{"version":3,"sources":["assets\\scripts\\MonsterManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\nenum MonsterType {\r\n    BlueSlime,\r\n    GreenSlime,\r\n    GreenBoss,\r\n    LavaSlime\r\n}\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    private level: number = 1;\r\n    private monsterManager: cc.Node = null;\r\n    private Map_xmax: number = 0;\r\n    private Map_ymax: number = 0;\r\n\r\n\r\n    onLoad () {\r\n        cc.director.getCollisionManager().enabled = true;\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        this.level = cc.find(\"GameManager\").getComponent(\"GameManager\").Level;\r\n        //Initialize the monster manager\r\n        this.monsterManager = cc.find(\"Canvas/MapManager/MonsterManager\");\r\n        console.log(\"Monster onload\");\r\n    }\r\n\r\n    start () {\r\n    }\r\n\r\n    // update (dt) {}\r\n    initMonster() {\r\n        console.log(\"Map_xmax =\", this.Map_xmax, \"Map_ymax =\", this.Map_ymax);\r\n        let monsterCount = Math.floor((this.Map_xmax/100)*(this.Map_ymax/100)/9);\r\n        console.log(\"monster COunt = \",monsterCount);\r\n        for (let i = 0; i < monsterCount; i++) {\r\n            let randomType = Math.floor(Math.random()*3.9999);\r\n            console.log(\"Monster Type:\", randomType);\r\n            switch (randomType) {\r\n                case MonsterType.BlueSlime:\r\n                    this.initBlueSlime();\r\n                    break;\r\n                case MonsterType.GreenSlime:\r\n                    this.initGreenSlime();\r\n                    break;\r\n                case MonsterType.GreenBoss:\r\n                    this.initGreenBoss();\r\n                    break;\r\n                case MonsterType.LavaSlime:\r\n                    this.initLavaSlime();\r\n                    break;\r\n                default:\r\n                    cc.error(\"Unknown monster type:\", randomType);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    initBlueSlime() {\r\n        cc.resources.load(\"prefabs/Blue Slime\", cc.Prefab, (err, prefab) => {\r\n            if (err) {\r\n                cc.error(\"Failed to load Blue Slime:\", err);\r\n                return;\r\n            }\r\n            const SlimeNode = cc.instantiate(prefab);\r\n            this.monsterManager.addChild(SlimeNode,1,'Blue Slime');\r\n            let x = Math.floor(Math.random() * (this.Map_xmax + 1)) ;\r\n            let y = Math.floor(Math.random() * (this.Map_ymax + 1)) ;\r\n            SlimeNode.setPosition(x,y);\r\n        })\r\n        console.log(\"Map_xmax =\", this.Map_xmax, \"Map_ymax =\", this.Map_ymax);\r\n    }\r\n    initGreenSlime() {\r\n        cc.resources.load(\"prefabs/Green Slime\", cc.Prefab, (err, prefab) => {\r\n            if (err) {\r\n                cc.error(\"Failed to load Green Slime:\", err);\r\n                return;\r\n            }\r\n            const SlimeNode = cc.instantiate(prefab);\r\n            this.monsterManager.addChild(SlimeNode, 1,'Green Slime');\r\n            let x = Math.floor(Math.random() * (this.Map_xmax + 1)) ;\r\n            let y = Math.floor(Math.random() * (this.Map_ymax + 1)) ;\r\n            SlimeNode.setPosition(x,y);\r\n            console.log(\"x=\", x, \"y=\",y);\r\n        })\r\n        \r\n    }\r\n    initGreenBoss() {\r\n        cc.resources.load(\"prefabs/Green Boss\", cc.Prefab, (err, prefab) => {\r\n            if (err) {\r\n                cc.error(\"Failed to load Green Boss\", err);\r\n                return;\r\n            }\r\n            const SlimeNode = cc.instantiate(prefab);\r\n            this.monsterManager.addChild(SlimeNode, 1, 'Green Boss');\r\n            let x = Math.floor(Math.random() * (this.Map_xmax + 1)) ;\r\n            let y = Math.floor(Math.random() * (this.Map_ymax + 1)) ;\r\n            SlimeNode.setPosition(x,y);\r\n        })\r\n        console.log(\"Map_xmax =\", this.Map_xmax, \"Map_ymax =\", this.Map_ymax);\r\n    }\r\n    initLavaSlime() {\r\n        cc.resources.load(\"prefabs/Lava Slime\", cc.Prefab, (err, prefab) => {\r\n            if (err) {\r\n                cc.error(\"Failed to load Lava Slime:\", err);\r\n                return;\r\n            }\r\n            const SlimeNode = cc.instantiate(prefab);\r\n            this.monsterManager.addChild(SlimeNode, 1, 'Lava Slime');\r\n            let x = Math.floor(Math.random() * (this.Map_xmax + 1)) ;\r\n            let y = Math.floor(Math.random() * (this.Map_ymax + 1)) ;\r\n            SlimeNode.setPosition(x,y);\r\n        })\r\n        console.log(\"Map_xmax =\", this.Map_xmax, \"Map_ymax =\", this.Map_ymax);\r\n    }\r\n\r\n    public SetMonster(_level: number) {\r\n        this.level = _level;\r\n        let MapGEn = cc.find(\"GameManager\").getComponent(\"GameManager\");\r\n        this.Map_xmax = Number((this.level *4+6)*100);\r\n        this.Map_ymax = Number((this.level *2+3)*100);\r\n        console.log(\"Level = \", this.level, typeof this.level);\r\n        console.log(\"Map_xmax = \", this.Map_xmax, typeof this.Map_xmax);\r\n\r\n        this.monsterManager.removeAllChildren();\r\n        this.initMonster();\r\n        console.log(\"set monster\");\r\n    }\r\n}\r\n"]}