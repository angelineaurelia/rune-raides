{"version":3,"sources":["assets\\scripts\\ai\\strategies\\AgentStrategy.ts"],"names":[],"mappings":";;;;;;;AACA,IAAiB,EAAE,CAuBlB;AAvBD,WAAiB,EAAE;IACf;;;;;;OAMG;IACH;QAAA;QAcA,CAAC;QAAD,eAAC;IAAD,CAdA,AAcC,IAAA;IAdqB,WAAQ,WAc7B,CAAA;AACL,CAAC,EAvBgB,EAAE,GAAF,UAAE,KAAF,UAAE,QAuBlB","file":"","sourceRoot":"/","sourcesContent":["import { ButtonState, IInputControls } from \"../../input/IInputControls\";\r\nexport namespace AI{\r\n    /**\r\n     * An abstraction over AI strategies.\r\n     * An Agent can combine several strategies to create new strategies.\r\n     * Remember to call their start and update methods.\r\n     * \r\n     * This is a technique called \"object composition\".\r\n     */\r\n    export abstract class Strategy implements IInputControls{\r\n        public abstract get horizontalAxis(): number;\r\n        public abstract get verticalAxis(): number;\r\n        public abstract get attack(): ButtonState;\r\n        public abstract get interact(): ButtonState;\r\n        /**\r\n         * Implements initialization of the strategy.\r\n         */\r\n        public abstract start(): void;\r\n        /**\r\n         * Implements updating of the strategy.\r\n         * @param dt Time elapsed since last update.\r\n         */\r\n        public abstract update(dt: number):void;\r\n    }\r\n}\r\n"]}