{"version":3,"sources":["assets/scripts/ai/BlueSlimeAI.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\nenum SlimeState {\n    Idle,\n    Walk,\n    Run,\n    Attack\n}\n\n@ccclass\nexport default class BlueSlimeAI extends cc.Component {\n    @property({ tooltip: \"Slime walk speed in pixels per second\" })\n    walkSpeed: number = 100;\n\n    @property({ tooltip: \"Slime run speed in pixels per second\" })\n    runSpeed: number = 200;\n\n    @property({ tooltip: \"How long the slime stays idle before walking (seconds)\" })\n    idleTime: number = 5;\n\n    @property({ tooltip: \"How long the slime walks in one direction (seconds)\" })\n    walkTime: number = 5;\n\n    @property({ tooltip: \"Patrol radius from start point (pixels)\" })\n    patrolRadius: number = 200;\n\n    @property({ tooltip: \"Detection circle radius (pixels)\" })\n    detectionRadius: number = 150;\n\n    @property({ tooltip: \"Attack circle radius (pixels)\" })\n    attackRadius: number = 50;\n\n    @property({ tooltip: \"Maximum health of the slime\" })\n    maxHealth: number = 100;\n\n    @property({ tooltip: \"Current health of the slime\" })\n    health: number = 100;\n\n    @property(cc.Node)\n    private lifebar: cc.Node = null;\n\n    @property({ tooltip: \"Vertical offset of health bar above slime (pixels)\" })\n    private barOffsetY: number = 10;\n\n    //@property({ type: cc.Node, tooltip: \"Player node to detect\" })\n    //player: cc.Node = null;\n\n    public player: cc.Node = null;\n    private slimeState = SlimeState.Idle;\n    private timer = 0;\n    private direction = cc.v2(0, 0);\n    private patrolCenter = cc.v2(0, 0);\n\n    private boundaryNode!: cc.Node;\n    private detectionNode!: cc.Node;\n    private detectionGfx!: cc.Graphics;\n    private attackNode!: cc.Node;\n    private attackGfx!: cc.Graphics;\n\n    private anim!: cc.Animation;\n    private currentRunClip = \"\";\n    private currentAttackClip = \"\";\n\n    start() {\n        this.player = cc.find(\"Canvas/MapManager/Actors/Player\") as cc.Node;\n        if (!this.player) cc.error(\"Player node not found\");\n\n\n        this.anim = this.getComponent(cc.Animation)!;\n        this.patrolCenter = this.node.getPosition().clone();\n\n        // Draw patrol boundary\n        this.boundaryNode = new cc.Node(\"PatrolBoundary\");\n        this.boundaryNode.parent = this.node.parent!;\n        this.boundaryNode.setPosition(this.patrolCenter);\n        const patrolGfx = this.boundaryNode.addComponent(cc.Graphics);\n        patrolGfx.lineWidth = 2;\n        patrolGfx.strokeColor = cc.color(0, 255, 0);\n        patrolGfx.circle(0, 0, this.patrolRadius);\n        patrolGfx.stroke();\n\n        // Detection area\n        this.detectionNode = new cc.Node(\"DetectionArea\");\n        this.detectionNode.parent = this.node;\n        this.detectionNode.setPosition(0, 0);\n        this.detectionGfx = this.detectionNode.addComponent(cc.Graphics);\n        this.detectionGfx.lineWidth = 2;\n\n        // Attack area\n        this.attackNode = new cc.Node(\"AttackArea\");\n        this.attackNode.parent = this.node;\n        this.attackNode.setPosition(0, 0);\n        this.attackGfx = this.attackNode.addComponent(cc.Graphics);\n        this.attackGfx.lineWidth = 2;\n\n        // Health bar setup\n        if (this.lifebar) {\n            this.lifebar.setPosition(0, this.node.height / 2 + this.barOffsetY);\n            this.updateLife(0, this.health);\n        }\n\n        this.setToIdle();\n    }\n\n    update(dt: number) {\n        // 1) Compute distance to player\n        let distToPlayer = Infinity;\n        if (this.player) {\n            const slimeW = this.node.parent!.convertToWorldSpaceAR(this.node.position);\n            const playerW = this.player.parent!.convertToWorldSpaceAR(this.player.position);\n            distToPlayer = slimeW.sub(playerW).mag();\n        }\n\n        // 2) Check if player is still within patrol area\n        const localPlayerPos = this.node.parent!\n            .convertToNodeSpaceAR(\n                this.player!.parent!.convertToWorldSpaceAR(this.player!.position)\n            );\n        const distFromCenter = localPlayerPos\n            .sub(this.patrolCenter)\n            .mag();\n        const playerInPatrol = distFromCenter <= this.patrolRadius;\n\n        // 3) Clamp radii for drawing\n        const drawDetectR = Math.min(this.detectionRadius, this.patrolRadius);\n        const drawAttackR = Math.min(this.attackRadius, this.patrolRadius);\n\n        // 4) Redraw detection circle\n        this.detectionGfx.clear();\n        this.detectionGfx.lineWidth = 2;\n        this.detectionGfx.strokeColor = distToPlayer <= this.detectionRadius\n            ? cc.color(255, 165, 0)\n            : cc.color(255, 0, 0);\n        this.detectionGfx.circle(0, 0, drawDetectR);\n        this.detectionGfx.stroke();\n\n        // 5) Redraw attack circle\n        this.attackGfx.clear();\n        this.attackGfx.lineWidth = 2;\n        this.attackGfx.strokeColor = distToPlayer <= this.attackRadius\n            ? cc.color(128, 0, 128)\n            : cc.color(0, 0, 255);\n        this.attackGfx.circle(0, 0, drawAttackR);\n        this.attackGfx.stroke();\n\n        // Determine states\n        const inDetect = distToPlayer <= this.detectionRadius && playerInPatrol;\n        const inAttack = distToPlayer <= this.attackRadius && playerInPatrol;\n\n        // Attack priority\n        if (inAttack && this.slimeState !== SlimeState.Attack) {\n            this.startAttack();\n            return;\n        }\n        if (this.slimeState === SlimeState.Attack) {\n            this.timer += dt;\n            if (this.timer >= 1) this.setToIdle();\n            return;\n        }\n\n        // Running if detected\n        if (inDetect) {\n            if (this.slimeState !== SlimeState.Run) this.startRunning();\n            this.runTowardsPlayer(dt);\n            return;\n        } else if (this.slimeState === SlimeState.Run) {\n            this.setToIdle();\n        }\n\n        // Patrol logic\n        this.timer += dt;\n        if (this.slimeState === SlimeState.Idle && this.timer >= this.idleTime) {\n            this.startWalking();\n        }\n        if (this.slimeState === SlimeState.Walk) {\n            const pos = this.node.getPosition();\n            const moveDelta = cc.v2(\n                this.direction.x * this.walkSpeed * dt,\n                this.direction.y * this.walkSpeed * dt\n            );\n            const nextPos = pos.add(moveDelta);\n\n            if (nextPos.sub(this.patrolCenter).mag() > this.patrolRadius) {\n                this.setToIdle();\n                return;\n            }\n            this.node.setPosition(nextPos);\n\n            if (this.timer >= this.walkTime) this.setToIdle();\n        }\n    }\n\n    // Life-bar update logic from Player\n    private updateLife(delta: number, hp: number) {\n        console.log(\"slime life change:\", delta, \"→\", hp);\n        if (!this.lifebar) return;\n        this.lifebar.width = hp;\n        if (hp <= 10) this.lifebar.color = cc.Color.RED;\n        else if (hp <= 20) this.lifebar.color = cc.Color.ORANGE;\n        else this.lifebar.color = cc.Color.GREEN;\n    }\n\n    public takeDamage(amount: number) {\n        this.health -= amount;\n        if (this.health < 0) this.health = 0;\n        this.updateLife(-amount, this.health);\n        if (this.health === 0) this.die();\n    }\n\n    public heal(amount: number) {\n        this.health += amount;\n        if (this.health > this.maxHealth) this.health = this.maxHealth;\n        this.updateLife(amount, this.health);\n    }\n\n    private die() {\n        this.node.destroy();\n    }\n\n    private setToIdle() {\n        this.slimeState = SlimeState.Idle;\n        this.timer = 0;\n        this.anim.play(\"BlueSlimeIdle\");\n    }\n\n    private startWalking() {\n        this.slimeState = SlimeState.Walk;\n        this.timer = 0;\n        this.direction = cc.v2(\n            Math.random() >= 0.5 ? 1 : -1,\n            Math.random() >= 0.5 ? 1 : -1\n        ).normalize();\n        const clip = Math.abs(this.direction.x) > Math.abs(this.direction.y)\n            ? (this.direction.x > 0 ? \"BlueSlimeWalkRight\" : \"BlueSlimeWalkLeft\")\n            : (this.direction.y > 0 ? \"BlueSlimeWalkUp\" : \"BlueSlimeWalkDown\");\n        this.anim.play(clip);\n    }\n\n    private startRunning() {\n        this.slimeState = SlimeState.Run;\n        this.currentRunClip = \"\";\n    }\n\n    private startAttack() {\n        this.slimeState = SlimeState.Attack;\n        this.timer = 0;\n        this.currentAttackClip = \"\";\n        const dir = this.getRunDirection();\n        const clip = Math.abs(dir.x) > Math.abs(dir.y)\n            ? (dir.x > 0 ? \"BlueSlimeAttackRight\" : \"BlueSlimeAttackLeft\")\n            : (dir.y > 0 ? \"BlueSlimeAttackUp\" : \"BlueSlimeAttackDown\");\n        this.anim.play(clip);\n    }\n\n    private runTowardsPlayer(dt: number) {\n        const dir = this.getRunDirection();\n        const clip = Math.abs(dir.x) > Math.abs(dir.y)\n            ? (dir.x > 0 ? \"BlueSlimeRunRight\" : \"BlueSlimeRunLeft\")\n            : (dir.y > 0 ? \"BlueSlimeRunUp\" : \"BlueSlimeRunDown\");\n        if (clip !== this.currentRunClip) {\n            this.anim.play(clip);\n            this.currentRunClip = clip;\n        }\n        const moveDelta = cc.v2(dir.x * this.runSpeed * dt, dir.y * this.runSpeed * dt);\n        const nextPos = this.node.getPosition().add(moveDelta);\n        if (nextPos.sub(this.patrolCenter).mag() > this.patrolRadius) {\n            this.setToIdle();\n            return;\n        }\n        this.node.setPosition(nextPos);\n    }\n\n    private getRunDirection() {\n        const worldP = this.player.parent!.convertToWorldSpaceAR(this.player.position);\n        const localP = this.node.parent!.convertToNodeSpaceAR(worldP);\n        return cc.v2(localP.x - this.node.x, localP.y - this.node.y).normalize();\n    }\n}\n"]}