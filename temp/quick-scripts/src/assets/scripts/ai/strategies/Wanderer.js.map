{"version":3,"sources":["assets/scripts/ai/strategies/Wanderer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ButtonState } from \"../../input/IInputControls\";\nimport Agent from \"../Agent\";\nimport { AI } from \"./AgentStrategy\";\n\n/**\n * An AI strategy that describes a \"wandering\" behaviour.\n */\nexport class Wanderer extends AI.Strategy {\n    /** The agent will move for this long before stopping to wait. */\n    private _moveDuration = 1.0;\n    /** The agent will wait for this long before starting to move again. */\n    private _waitDuration = 0.5;\n    /** The actual wait duration will be randomized by this factor, \n     *  such that the actual wait duration is a random number between\n     *  waitDuration x (1 - waitRandomFactor) and \n     *  waitDuration x (1 + waitRandomFactor).\n    */\n    private _waitRandomFactor = 0.1;\n\n    constructor(moveDuration: number, waitDuration: number, waitRandomFactor: number) {\n        super();\n        //*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*\\\\\n        // TODO (2.1): Complete the constructor.\n        // [SPECIFICATIONS]\n        // - Initialize the four private variables above properly.\n        //*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*\\\\\n        //#region [YOUR IMPLEMENTATION HERE]\n        this._moveDuration = moveDuration;\n        this._waitDuration = waitDuration;\n        this._waitRandomFactor = waitRandomFactor;\n        //#endregion\n    }\n\n    /** The time point after which the agent should wait. */\n    private _nextWaitTime = 0;\n    /** The time point after which the agent should move again. */\n    private _nextMoveTime = 0;\n    /** The velocity (vector with magnitude) at which the agent should move. */\n    private _wanderVelocity = cc.Vec2.ZERO;\n    /** The agent's output to IInput. */\n    private _moveAxis2D = cc.Vec2.ZERO;\n\n    //*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*\\\\\n    // TODO (2.2): Map moveAxis2D to horizontal and vertical axes.\n    // [SPECIFICATIONS]\n    // - moveAxis2D.x should be mapped to the horizontal axis.\n    // - moveAxis2D.y should be mapped to the vertical axis.\n    // - You can leave the remaining unimplemented.\n    //*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*\\\\\n    public get horizontalAxis(): number {\n        //#region [YOUR IMPLEMENTATION HERE]\n        return this._moveAxis2D.x;\n        //#endregion\n    }\n    public get verticalAxis(): number {\n        //#region [YOUR IMPLEMENTATION HERE]\n        return this._moveAxis2D.y;\n        //#endregion\n    }\n    public get attack(): ButtonState {\n        throw new Error(\"Method not implemented.\");\n    }\n    public get interact(): ButtonState {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public start() {\n        this._nextMoveTime = cc.director.getTotalTime() / 1000.0;\n        this._nextWaitTime = this._nextMoveTime - this._waitDuration;\n    }\n    public update(dt: number) {\n        /** The current time in the game in seconds. */\n        let currentTime = cc.director.getTotalTime() / 1000.0;\n\n        //*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*\\\\\n        // TODO (2.3): Implement the behaviour of a wandering agent.\n        // [SPECIFICATIONS]\n        // 1. The agent should recompute its wandering direction when the\n        //    current time (curTime) reaches the next move time (this.nextMoveTime)\n        //     - When this happens, recompute the next move time and the next wait \n        //       time.\n        //     - Compute the wandering direction as a random 2D vector using the\n        //       provided function \"randomPointOnCircle\".\n        // 2. The agent's movement axes (this.moveAxis2D)\n        //    should be equal to the wander velocity (this.wanderVelocity) before\n        //    the next wait time (this.nextWaitTime). \n        //    OTHERWISE it should be equal to cc.Vec2.ZERO.\n        //*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*\\\\\n\n        //#region [YOUR IMPLEMENTATION HERE]\n        if (currentTime >= this._nextMoveTime) {\n            this._nextWaitTime = currentTime + this._moveDuration;\n            this._nextMoveTime = this._nextWaitTime + this._waitDuration * (1.0 * this._waitRandomFactor * (Math.random() - 2.0 * 1.0));\n\n            this._wanderVelocity = randomPointOnUnitCircle()\n        }\n\n        this ._moveAxis2D = (currentTime < this._nextWaitTime) ? this._wanderVelocity : cc.Vec2.ZERO;\n        //#endregion\n    }\n\n}\n\nfunction randomPointOnUnitCircle() {\n    let angle = Math.random() * Math.PI * 2;\n    return new cc.Vec2(Math.cos(angle), Math.sin(angle));\n}"]}