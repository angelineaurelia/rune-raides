{"version":3,"sources":["assets/scripts/ai/strategies/AgentStrategy.ts"],"names":[],"mappings":";;;;;;;AACA,IAAiB,EAAE,CAuBlB;AAvBD,WAAiB,EAAE;IACf;;;;;;OAMG;IACH;QAAA;QAcA,CAAC;QAAD,eAAC;IAAD,CAdA,AAcC,IAAA;IAdqB,WAAQ,WAc7B,CAAA;AACL,CAAC,EAvBgB,EAAE,GAAF,UAAE,KAAF,UAAE,QAuBlB","file":"","sourceRoot":"/","sourcesContent":["import { ButtonState, IInputControls } from \"../../input/IInputControls\";\nexport namespace AI{\n    /**\n     * An abstraction over AI strategies.\n     * An Agent can combine several strategies to create new strategies.\n     * Remember to call their start and update methods.\n     * \n     * This is a technique called \"object composition\".\n     */\n    export abstract class Strategy implements IInputControls{\n        public abstract get horizontalAxis(): number;\n        public abstract get verticalAxis(): number;\n        public abstract get attack(): ButtonState;\n        public abstract get interact(): ButtonState;\n        /**\n         * Implements initialization of the strategy.\n         */\n        public abstract start(): void;\n        /**\n         * Implements updating of the strategy.\n         * @param dt Time elapsed since last update.\n         */\n        public abstract update(dt: number):void;\n    }\n}\n"]}