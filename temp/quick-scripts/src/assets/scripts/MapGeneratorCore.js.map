{"version":3,"sources":["assets\\scripts\\MapGeneratorCore.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\r\nfunction init(){\r\n    console.log(\"myscript.ts line 2\");\r\n    document.getElementById(\"text0\").innerHTML = \"Hello World!\";\r\n    document.getElementById(\"controlBtn0\").addEventListener('click',drawMap);\r\n}\r\n*/\r\n/*class _GraphNode{\r\n    nodeNumber : number;\r\n    edgeList : number[];\r\n    constructor(_nodeNumber){\r\n        this.nodeNumber = _nodeNumber;\r\n    }\r\n}*/\r\n\r\nexport class Map_node{\r\n    disjoint_set_ptr : number;\r\n    disjoint_set_height : number\r\n    constructor(_ip:number){\r\n        this.disjoint_set_height = 1;\r\n        this.disjoint_set_ptr = _ip;\r\n    }\r\n}// able to modify (have to modify related code, too)\r\nexport class Map_edge{\r\n    from : number;\r\n    to : number;\r\n    weight : number;\r\n    constructor(_f,_t){\r\n        this.from = _f;\r\n        this.to = _t;\r\n        this.weight = Math.random();\r\n    }\r\n}\r\nexport class Map_selected_edge{\r\n    from : number;\r\n    to : number;\r\n    constructor(_f,_t){\r\n        this.from = _f;\r\n        this.to = _t;\r\n    }\r\n}\r\nexport class mapRoomUnit{// true -> wall\r\n    up : boolean;\r\n    down : boolean;\r\n    right : boolean;\r\n    left : boolean;\r\n    constructor(_init : boolean){\r\n        this.up = _init;\r\n        this.down = _init;\r\n        this.right = _init;\r\n        this.left = _init;\r\n    }\r\n}\r\n\r\nexport class Map_Graph{\r\n    xmax : number;\r\n    ymax : number;\r\n    /*\r\n    _blockWidth : number;\r\n    _LineWidth : number;\r\n    */\r\n    vertexList : Map<number,Map_node> = new Map<number,Map_node>();\r\n    edgeList : Map_edge[] = [];\r\n    selectedEdgeList : Map_selected_edge[] = [];\r\n    mapBlock : mapRoomUnit[][] = []; // mapBlock[_y][_x] // true -> wall\r\n    constructor(_xmax,_ymax){\r\n        this.ymax = _ymax;\r\n        this.xmax = _xmax;\r\n        //this.vertexList = new Map<number,Map_node>();\r\n        for(let _y:number = 0;_y<this.ymax;_y += 1){\r\n            this.mapBlock[_y] = [];\r\n            for(let _x:number = 0;_x<this.xmax;_x += 1){\r\n                this.mapBlock[_y][_x] = new mapRoomUnit(true);\r\n            }\r\n        }\r\n        this.initializeGraph();\r\n    }\r\n    disjoint_set_top(_ip : number): number{\r\n        while(true){\r\n            if(this.vertexList.get(_ip) === undefined){\r\n                return -1;\r\n            }\r\n            if(_ip === this.vertexList.get(_ip).disjoint_set_ptr){\r\n                return _ip;\r\n            }\r\n            _ip = this.vertexList.get(_ip).disjoint_set_ptr;\r\n        }\r\n    }\r\n    initializeGraph() {\r\n        let totalVertex:number = 0;\r\n        //initialize vertex\r\n        for(let _x:number = 0;_x<this.xmax;_x += 1){\r\n            for(let _y:number = 0;_y<this.ymax;_y += 1){\r\n                let nodeNum : number = _x+_y*this.xmax;\r\n                let nodeProperty : Map_node = new Map_node(nodeNum);\r\n                this.vertexList.set(nodeNum,nodeProperty);\r\n                totalVertex+=1;\r\n            }\r\n        }\r\n        //initialize horizontal edge\r\n        for(let _x:number = 0;_x<this.xmax-1;_x += 1){\r\n            for(let _y:number = 0;_y<this.ymax;_y += 1){\r\n                let nodeNum : number = _x+_y*this.xmax;\r\n                if((this.vertexList.get(nodeNum) === undefined) || (this.vertexList.get(nodeNum+1) === undefined)){\r\n                    continue;\r\n                }\r\n                let newEdge : Map_edge = new Map_edge(nodeNum,nodeNum+1);\r\n                this.edgeList.push(newEdge);\r\n            }\r\n        }\r\n        //initialize virtical edge\r\n        for(let _x:number = 0;_x<this.xmax;_x += 1){\r\n            for(let _y:number = 0;_y<this.ymax-1;_y += 1){\r\n                let nodeNum : number = _x+_y*this.xmax;\r\n                if((this.vertexList.get(nodeNum) === undefined) || (this.vertexList.get(nodeNum+this.xmax) === undefined)){\r\n                    continue;\r\n                }\r\n                let newEdge : Map_edge = new Map_edge(nodeNum,nodeNum+this.xmax);\r\n                this.edgeList.push(newEdge);\r\n            }\r\n        }\r\n        //initialize edgeList\r\n        this.edgeList.sort((ipa,ipb)=>{return ipa.weight-ipb.weight});\r\n        /*for(let i:number =0;i<this.edgeList.length;i++){\r\n            //this.edgeList[i].disjoint_set_ptr = i;//wrong\r\n        }*/\r\n        //\r\n        this.calculateMinimumSpanningTree();//totalVertex-1\r\n        this.calculate_block();\r\n    }\r\n    calculate_block(){\r\n        for(let i:number =0;i<this.selectedEdgeList.length;i++){\r\n            if((this.selectedEdgeList[i].to-this.selectedEdgeList[i].from) === 1){\r\n                //horizontal\r\n                var _x :number = this.selectedEdgeList[i].from % this.xmax;\r\n                var _y :number = (this.selectedEdgeList[i].from-_x) / this.xmax;\r\n                this.mapBlock[_y][_x].right = false;\r\n                this.mapBlock[_y][_x+1].left = false;\r\n            }else{\r\n                //vertical\r\n                var _x :number = this.selectedEdgeList[i].from % this.xmax;\r\n                var _y :number = (this.selectedEdgeList[i].from-_x) / this.xmax;\r\n                this.mapBlock[_y][_x].down = false;\r\n                this.mapBlock[_y+1][_x].up = false;\r\n            }\r\n        }\r\n    }\r\n    calculateMinimumSpanningTree(){//treeEdges : number\r\n        for(let i:number =0;i<this.edgeList.length;i++){\r\n            if(this.disjoint_set_top(this.edgeList[i].from) === this.disjoint_set_top(this.edgeList[i].to)){\r\n                continue;\r\n            }\r\n            let newE : Map_selected_edge = new Map_selected_edge(this.edgeList[i].from,this.edgeList[i].to);\r\n            this.selectedEdgeList.push(newE);\r\n            let setA_id = this.disjoint_set_top(this.edgeList[i].from);\r\n            let setB_id = this.disjoint_set_top(this.edgeList[i].to);\r\n            if(this.vertexList.get(setA_id).disjoint_set_height === this.vertexList.get(setB_id).disjoint_set_height){\r\n                this.vertexList.get(setB_id).disjoint_set_ptr = setA_id;\r\n                this.vertexList.get(setA_id).disjoint_set_height += 1;\r\n            }else if(this.vertexList.get(setA_id).disjoint_set_height > this.vertexList.get(setB_id).disjoint_set_height){\r\n                this.vertexList.get(setB_id).disjoint_set_ptr = setA_id;\r\n            }else{\r\n                this.vertexList.get(setA_id).disjoint_set_ptr = setB_id;\r\n            }\r\n            /*treeEdges -= 1;\r\n            if(treeEdges === 0){\r\n                break;\r\n            }*/\r\n        }\r\n    }\r\n}\r\n/*\r\nfunction drawMap(){\r\n    //console.log(\"onClick\");\r\n    var mapSize = 10;\r\n    var myMap : Map_Graph = new Map_Graph(mapSize,mapSize);\r\n    var _blockWidth : number = 40;\r\n    var _LineWidth : number = 2;\r\n    const myCanvas : any = document.getElementById(\"canvas0\");\r\n    const ctx = myCanvas.getContext('2d');\r\n    ctx.fillStyle = '#000000';\r\n    // ctx.clearRect\r\n    // ctx.fillRect\r\n    //initialize vertex\r\n    console.log(\"myscript.ts line 147\");\r\n    ctx.clearRect(0,0,512,512);\r\n    for(let _y:number = 0;_y<mapSize;_y += 1){\r\n        for(let _x:number = 0;_x<mapSize;_x += 1){\r\n            if(myMap.mapBlock[_y][_x].up){\r\n                ctx.fillRect(_x*_blockWidth,_y*_blockWidth,_blockWidth,_LineWidth);\r\n            }\r\n            if(myMap.mapBlock[_y][_x].left){\r\n                ctx.fillRect(_x*_blockWidth,_y*_blockWidth,_LineWidth,_blockWidth);\r\n            }\r\n            if(myMap.mapBlock[_y][_x].down){\r\n                ctx.fillRect(_x*_blockWidth,_y*_blockWidth+_blockWidth-_LineWidth,_blockWidth,_LineWidth);\r\n            }\r\n            if(myMap.mapBlock[_y][_x].right){\r\n                ctx.fillRect(_x*_blockWidth+_blockWidth-_LineWidth,_y*_blockWidth,_LineWidth,_blockWidth);\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    for(let _x:number = 0;_x<=mapSize;_x += 1){\r\n        for(let _y:number = 0;_y<=mapSize;_y += 1){\r\n            ctx.fillRect(_blockWidth*_x,_blockWidth*_y,_LineWidth,_LineWidth);\r\n        }\r\n    }\r\n    //initialize horizontal edge\r\n    for(let _x:number = -1;_x<mapSize;_x += 1){\r\n        for(let _y:number = 0;_y<mapSize;_y += 1){\r\n            ctx.fillRect(_blockWidth+_blockWidth*_x,_blockWidth*_y,_LineWidth,_blockWidth);\r\n        }\r\n    }\r\n    //initialize virtical edge\r\n    for(let _x:number = 0;_x<mapSize;_x += 1){\r\n        for(let _y:number = -1;_y<mapSize;_y += 1){\r\n            ctx.fillRect(_blockWidth*_x,_blockWidth+_blockWidth*_y,_blockWidth,_LineWidth);\r\n        }\r\n    }\r\n    for(let i:number=0;i<myMap.selectedEdgeList.length;i+=1){\r\n        var _x :number = myMap.selectedEdgeList[i].from % mapSize;\r\n        var _y :number = (myMap.selectedEdgeList[i].from-_x) / mapSize;\r\n        if((myMap.selectedEdgeList[i].to-myMap.selectedEdgeList[i].from) === 1){\r\n            ctx.clearRect(_blockWidth+_blockWidth*_x,+_blockWidth*_y,_LineWidth,_blockWidth);\r\n        }else{\r\n            ctx.clearRect(_blockWidth*_x,_blockWidth+_blockWidth*_y,_blockWidth,_LineWidth);\r\n        }\r\n    }\r\n}\r\n\r\n*/\r\n/*\r\ninit();\r\nconsole.log(\"myscript.ts line 7\");*/\r\n"]}