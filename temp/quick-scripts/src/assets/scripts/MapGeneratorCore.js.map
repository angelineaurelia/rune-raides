{"version":3,"sources":["assets/scripts/MapGeneratorCore.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\nfunction init(){\n    console.log(\"myscript.ts line 2\");\n    document.getElementById(\"text0\").innerHTML = \"Hello World!\";\n    document.getElementById(\"controlBtn0\").addEventListener('click',drawMap);\n}\n*/\n/*class _GraphNode{\n    nodeNumber : number;\n    edgeList : number[];\n    constructor(_nodeNumber){\n        this.nodeNumber = _nodeNumber;\n    }\n}*/\n\nexport class Map_node{\n    disjoint_set_ptr : number;\n    disjoint_set_height : number\n    constructor(_ip:number){\n        this.disjoint_set_height = 1;\n        this.disjoint_set_ptr = _ip;\n    }\n}// able to modify (have to modify related code, too)\nexport class Map_edge{\n    from : number;\n    to : number;\n    weight : number;\n    constructor(_f,_t){\n        this.from = _f;\n        this.to = _t;\n        this.weight = Math.random();\n    }\n}\nexport class Map_selected_edge{\n    from : number;\n    to : number;\n    constructor(_f,_t){\n        this.from = _f;\n        this.to = _t;\n    }\n}\nexport class mapRoomUnit{// true -> wall\n    up : boolean;\n    down : boolean;\n    right : boolean;\n    left : boolean;\n    constructor(_init : boolean){\n        this.up = _init;\n        this.down = _init;\n        this.right = _init;\n        this.left = _init;\n    }\n}\n\nexport class Map_Graph{\n    xmax : number;\n    ymax : number;\n    /*\n    _blockWidth : number;\n    _LineWidth : number;\n    */\n    vertexList : Map<number,Map_node> = new Map<number,Map_node>();\n    edgeList : Map_edge[] = [];\n    selectedEdgeList : Map_selected_edge[] = [];\n    mapBlock : mapRoomUnit[][] = []; // mapBlock[_y][_x] // true -> wall\n    constructor(_xmax,_ymax){\n        this.ymax = _ymax;\n        this.xmax = _xmax;\n        //this.vertexList = new Map<number,Map_node>();\n        for(let _y:number = 0;_y<this.ymax;_y += 1){\n            this.mapBlock[_y] = [];\n            for(let _x:number = 0;_x<this.xmax;_x += 1){\n                this.mapBlock[_y][_x] = new mapRoomUnit(true);\n            }\n        }\n        this.initializeGraph();\n    }\n    disjoint_set_top(_ip : number): number{\n        while(true){\n            if(this.vertexList.get(_ip) === undefined){\n                return -1;\n            }\n            if(_ip === this.vertexList.get(_ip).disjoint_set_ptr){\n                return _ip;\n            }\n            _ip = this.vertexList.get(_ip).disjoint_set_ptr;\n        }\n    }\n    initializeGraph() {\n        let totalVertex:number = 0;\n        //initialize vertex\n        for(let _x:number = 0;_x<this.xmax;_x += 1){\n            for(let _y:number = 0;_y<this.ymax;_y += 1){\n                let nodeNum : number = _x+_y*this.xmax;\n                let nodeProperty : Map_node = new Map_node(nodeNum);\n                this.vertexList.set(nodeNum,nodeProperty);\n                totalVertex+=1;\n            }\n        }\n        //initialize horizontal edge\n        for(let _x:number = 0;_x<this.xmax-1;_x += 1){\n            for(let _y:number = 0;_y<this.ymax;_y += 1){\n                let nodeNum : number = _x+_y*this.xmax;\n                if((this.vertexList.get(nodeNum) === undefined) || (this.vertexList.get(nodeNum+1) === undefined)){\n                    continue;\n                }\n                let newEdge : Map_edge = new Map_edge(nodeNum,nodeNum+1);\n                this.edgeList.push(newEdge);\n            }\n        }\n        //initialize virtical edge\n        for(let _x:number = 0;_x<this.xmax;_x += 1){\n            for(let _y:number = 0;_y<this.ymax-1;_y += 1){\n                let nodeNum : number = _x+_y*this.xmax;\n                if((this.vertexList.get(nodeNum) === undefined) || (this.vertexList.get(nodeNum+this.xmax) === undefined)){\n                    continue;\n                }\n                let newEdge : Map_edge = new Map_edge(nodeNum,nodeNum+this.xmax);\n                this.edgeList.push(newEdge);\n            }\n        }\n        //initialize edgeList\n        this.edgeList.sort((ipa,ipb)=>{return ipa.weight-ipb.weight});\n        /*for(let i:number =0;i<this.edgeList.length;i++){\n            //this.edgeList[i].disjoint_set_ptr = i;//wrong\n        }*/\n        //\n        this.calculateMinimumSpanningTree();//totalVertex-1\n        this.calculate_block();\n    }\n    calculate_block(){\n        for(let i:number =0;i<this.selectedEdgeList.length;i++){\n            if((this.selectedEdgeList[i].to-this.selectedEdgeList[i].from) === 1){\n                //horizontal\n                var _x :number = this.selectedEdgeList[i].from % this.xmax;\n                var _y :number = (this.selectedEdgeList[i].from-_x) / this.xmax;\n                this.mapBlock[_y][_x].right = false;\n                this.mapBlock[_y][_x+1].left = false;\n            }else{\n                //vertical\n                var _x :number = this.selectedEdgeList[i].from % this.xmax;\n                var _y :number = (this.selectedEdgeList[i].from-_x) / this.xmax;\n                this.mapBlock[_y][_x].down = false;\n                this.mapBlock[_y+1][_x].up = false;\n            }\n        }\n    }\n    calculateMinimumSpanningTree(){//treeEdges : number\n        for(let i:number =0;i<this.edgeList.length;i++){\n            if(this.disjoint_set_top(this.edgeList[i].from) === this.disjoint_set_top(this.edgeList[i].to)){\n                continue;\n            }\n            let newE : Map_selected_edge = new Map_selected_edge(this.edgeList[i].from,this.edgeList[i].to);\n            this.selectedEdgeList.push(newE);\n            let setA_id = this.disjoint_set_top(this.edgeList[i].from);\n            let setB_id = this.disjoint_set_top(this.edgeList[i].to);\n            if(this.vertexList.get(setA_id).disjoint_set_height === this.vertexList.get(setB_id).disjoint_set_height){\n                this.vertexList.get(setB_id).disjoint_set_ptr = setA_id;\n                this.vertexList.get(setA_id).disjoint_set_height += 1;\n            }else if(this.vertexList.get(setA_id).disjoint_set_height > this.vertexList.get(setB_id).disjoint_set_height){\n                this.vertexList.get(setB_id).disjoint_set_ptr = setA_id;\n            }else{\n                this.vertexList.get(setA_id).disjoint_set_ptr = setB_id;\n            }\n            /*treeEdges -= 1;\n            if(treeEdges === 0){\n                break;\n            }*/\n        }\n    }\n}\n/*\nfunction drawMap(){\n    //console.log(\"onClick\");\n    var mapSize = 10;\n    var myMap : Map_Graph = new Map_Graph(mapSize,mapSize);\n    var _blockWidth : number = 40;\n    var _LineWidth : number = 2;\n    const myCanvas : any = document.getElementById(\"canvas0\");\n    const ctx = myCanvas.getContext('2d');\n    ctx.fillStyle = '#000000';\n    // ctx.clearRect\n    // ctx.fillRect\n    //initialize vertex\n    console.log(\"myscript.ts line 147\");\n    ctx.clearRect(0,0,512,512);\n    for(let _y:number = 0;_y<mapSize;_y += 1){\n        for(let _x:number = 0;_x<mapSize;_x += 1){\n            if(myMap.mapBlock[_y][_x].up){\n                ctx.fillRect(_x*_blockWidth,_y*_blockWidth,_blockWidth,_LineWidth);\n            }\n            if(myMap.mapBlock[_y][_x].left){\n                ctx.fillRect(_x*_blockWidth,_y*_blockWidth,_LineWidth,_blockWidth);\n            }\n            if(myMap.mapBlock[_y][_x].down){\n                ctx.fillRect(_x*_blockWidth,_y*_blockWidth+_blockWidth-_LineWidth,_blockWidth,_LineWidth);\n            }\n            if(myMap.mapBlock[_y][_x].right){\n                ctx.fillRect(_x*_blockWidth+_blockWidth-_LineWidth,_y*_blockWidth,_LineWidth,_blockWidth);\n            }\n        }\n    }\n    /*\n    for(let _x:number = 0;_x<=mapSize;_x += 1){\n        for(let _y:number = 0;_y<=mapSize;_y += 1){\n            ctx.fillRect(_blockWidth*_x,_blockWidth*_y,_LineWidth,_LineWidth);\n        }\n    }\n    //initialize horizontal edge\n    for(let _x:number = -1;_x<mapSize;_x += 1){\n        for(let _y:number = 0;_y<mapSize;_y += 1){\n            ctx.fillRect(_blockWidth+_blockWidth*_x,_blockWidth*_y,_LineWidth,_blockWidth);\n        }\n    }\n    //initialize virtical edge\n    for(let _x:number = 0;_x<mapSize;_x += 1){\n        for(let _y:number = -1;_y<mapSize;_y += 1){\n            ctx.fillRect(_blockWidth*_x,_blockWidth+_blockWidth*_y,_blockWidth,_LineWidth);\n        }\n    }\n    for(let i:number=0;i<myMap.selectedEdgeList.length;i+=1){\n        var _x :number = myMap.selectedEdgeList[i].from % mapSize;\n        var _y :number = (myMap.selectedEdgeList[i].from-_x) / mapSize;\n        if((myMap.selectedEdgeList[i].to-myMap.selectedEdgeList[i].from) === 1){\n            ctx.clearRect(_blockWidth+_blockWidth*_x,+_blockWidth*_y,_LineWidth,_blockWidth);\n        }else{\n            ctx.clearRect(_blockWidth*_x,_blockWidth+_blockWidth*_y,_blockWidth,_LineWidth);\n        }\n    }\n}\n\n*/\n/*\ninit();\nconsole.log(\"myscript.ts line 7\");*/\n"]}