{"version":3,"sources":["assets/scripts/ai/GreenSlimeAI.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\nimport Player from \"../Player\";\nenum SlimeState {\n    Idle,\n    Walk,\n    Run,\n    Attack\n}\n\n@ccclass\nexport default class GreenSlimeAI extends cc.Component {\n    @property({ tooltip: \"Slime walk speed in pixels per second\" })\n    walkSpeed: number = 120;\n\n    @property({ tooltip: \"Slime run speed in pixels per second\" })\n    runSpeed: number = 240;\n\n    @property({ tooltip: \"How long the slime stays idle before walking (seconds)\" })\n    idleTime: number = 5;\n\n    @property({ tooltip: \"How long the slime walks in one direction (seconds)\" })\n    walkTime: number = 5;\n\n    @property({ tooltip: \"Patrol radius from start point (pixels)\" })\n    patrolRadius: number = 200;\n\n    @property({ tooltip: \"Detection circle radius (pixels)\" })\n    detectionRadius: number = 150;\n\n    @property({ tooltip: \"Attack circle radius (pixels)\" })\n    attackRadius: number = 80;\n\n    @property({ tooltip: \"How much damage the slime does per attack\" })\n    attackDamage: number = 12;\n\n    @property({ type: cc.Float, tooltip: \"Seconds into attack anim to apply damage\" })\n    attackHitDelay: number = 0.3;\n\n    @property({ type: cc.Float, tooltip: \"Total length of attack anim (seconds)\" })\n    attackAnimDuration: number = 1.0;\n\n    @property({ tooltip: \"Maximum health of the slime\" })\n    maxHealth: number = 15;\n\n    @property({ tooltip: \"Current health of the slime\" })\n    health: number = 15;\n\n    @property(cc.Node)\n    private lifebar: cc.Node = null;\n\n    @property({ tooltip: \"Vertical offset of health bar above slime (pixels)\" })\n    private barOffsetY: number = 10;\n\n    private isDead: boolean = false;\n    private isDeathAnimPlaying: boolean = false; // NEW: Tracks death animation\n\n    public player: cc.Node = null;\n    private slimeState: SlimeState = SlimeState.Idle;\n    private timer: number = 0;\n    private direction: cc.Vec2 = cc.v2(0, 0);\n    private patrolCenter: cc.Vec2 = cc.v2(0, 0);\n\n    private boundaryNode!: cc.Node;\n    private detectionNode!: cc.Node;\n    private detectionGfx!: cc.Graphics;\n    private attackNode!: cc.Node;\n    private attackGfx!: cc.Graphics;\n\n    private anim!: cc.Animation;\n    private currentRunClip: string = \"\";\n    private currentAttackClip: string = \"\";\n\n    onLoad() {\n        cc.director.getCollisionManager().enabled = true;\n    }\n\n    start() {\n        this.player = cc.find(\"Canvas/MapManager/Actors/Player\") as cc.Node;\n        if (!this.player) cc.error(\"Player node not found\");\n\n        this.anim = this.getComponent(cc.Animation)!;\n        this.patrolCenter = this.node.getPosition().clone();\n\n        this.boundaryNode = new cc.Node(\"PatrolBoundary\");\n        this.boundaryNode.parent = this.node.parent!;\n        this.boundaryNode.setPosition(this.patrolCenter);\n        //const patrolGfx = this.boundaryNode.addComponent(cc.Graphics);\n        //patrolGfx.lineWidth = 2;\n        //patrolGfx.strokeColor = cc.color(0, 255, 0);\n        //patrolGfx.circle(0, 0, this.patrolRadius);\n        //patrolGfx.stroke();\n\n        this.detectionNode = new cc.Node(\"DetectionArea\");\n        this.detectionNode.parent = this.node;\n        this.detectionNode.setPosition(0, 0);\n        this.detectionGfx = this.detectionNode.addComponent(cc.Graphics);\n        this.detectionGfx.lineWidth = 2;\n\n        this.attackNode = new cc.Node(\"AttackArea\");\n        this.attackNode.parent = this.node;\n        this.attackNode.setPosition(0, 0);\n        this.attackGfx = this.attackNode.addComponent(cc.Graphics);\n        this.attackGfx.lineWidth = 2;\n\n        if (this.lifebar) {\n            //this.updateLife(0, 40);\n        }\n\n        this.setToIdle();\n    }\n\n    update(dt: number) {\n        if (this.isDead) return; // Actually dead, nothing happens\n\n        if (this.isDeathAnimPlaying) {\n            // Let the death animation play, but skip AI\n            return;\n        }\n\n        let distToPlayer = Infinity;\n        if (this.player) {\n            const slimeW = this.node.parent!.convertToWorldSpaceAR(this.node.position);\n            const playerW = this.player.parent!.convertToWorldSpaceAR(this.player.position);\n            distToPlayer = slimeW.sub(playerW).mag();\n        }\n\n        const localPlayerPos = this.node.parent!\n            .convertToNodeSpaceAR(\n                this.player!.parent!.convertToWorldSpaceAR(this.player!.position)\n            );\n        const distFromCenter = localPlayerPos.sub(this.patrolCenter).mag();\n        const playerInPatrol = distFromCenter <= this.patrolRadius;\n\n        const drawDetectR = Math.min(this.detectionRadius, this.patrolRadius);\n        const drawAttackR = Math.min(this.attackRadius, this.patrolRadius);\n\n        this.detectionGfx.clear();\n        //this.detectionGfx.lineWidth = 2;\n       // this.detectionGfx.strokeColor = distToPlayer <= this.detectionRadius\n        //    ? cc.color(255, 165, 0)\n        //    : cc.color(255, 0, 0);\n        //this.detectionGfx.circle(0, 0, drawDetectR);\n        //this.detectionGfx.stroke();\n\n        this.attackGfx.clear();\n        this.attackGfx.lineWidth = 2;\n        //this.attackGfx.strokeColor = distToPlayer <= this.attackRadius\n        //    ? cc.color(128, 0, 128)\n        //    : cc.color(0, 0, 255);\n        //this.attackGfx.circle(0, 0, drawAttackR);\n        //this.attackGfx.stroke();\n\n        const inDetect = distToPlayer <= this.detectionRadius && playerInPatrol;\n        const inAttack = distToPlayer <= this.attackRadius && playerInPatrol;\n\n        if (inAttack && this.slimeState !== SlimeState.Attack) {\n            this.startAttack();\n            return;\n        }\n\n        if (this.slimeState === SlimeState.Attack) {\n            this.timer += dt;\n            if (this.timer >= this.attackAnimDuration) {\n                this.setToIdle();\n            }\n            return;\n        }\n\n        if (inDetect) {\n            if (this.slimeState !== SlimeState.Run) this.startRunning();\n            this.runTowardsPlayer(dt);\n            return;\n        } else if (this.slimeState === SlimeState.Run) {\n            this.setToIdle();\n        }\n\n        this.timer += dt;\n        if (this.slimeState === SlimeState.Idle && this.timer >= this.idleTime) {\n            this.startWalking();\n        }\n        if (this.slimeState === SlimeState.Walk) {\n            const pos = this.node.getPosition();\n            const moveDelta = cc.v2(\n                this.direction.x * this.walkSpeed * dt,\n                this.direction.y * this.walkSpeed * dt\n            );\n            const nextPos = pos.add(moveDelta);\n\n            if (nextPos.sub(this.patrolCenter).mag() > this.patrolRadius) {\n                this.setToIdle();\n                return;\n            }\n            this.node.setPosition(nextPos);\n\n            if (this.timer >= this.walkTime) this.setToIdle();\n        }\n    }\n\n    private updateLife(delta: number, hp: number) {\n        if (!this.lifebar) return;\n        this.lifebar.width = (hp/this.maxHealth)*40;\n        if (hp <= 10) this.lifebar.color = cc.Color.RED;\n        else if (hp <= 20) this.lifebar.color = cc.Color.ORANGE;\n        else this.lifebar.color = cc.Color.GREEN;\n    }\n\n    public takeDamage(amount: number) {\n        if (this.isDead || this.isDeathAnimPlaying) return; // Already dead or anim playing\n\n        const playerPos = this.player.getPosition();\n        const slimePos = this.node.getPosition();\n        const direction = playerPos.sub(slimePos).normalize();\n\n        const hurtAnim = Math.abs(direction.x) > Math.abs(direction.y)\n            ? (direction.x > 0 ? \"GreeenSlimeHurtRight\" : \"GreeenSlimeHurtLeft\")\n            : (direction.y > 0 ? \"GreeenSlimeHurtUp\" : \"GreeenSlimeHurtDown\");\n\n        this.anim.play(hurtAnim);\n\n        this.health -= amount;\n        if (this.health <= 0) {\n            this.health = 0;\n            if (!this.isDeathAnimPlaying) {\n                this.isDeathAnimPlaying = true;\n                this.playDeathAnimation(direction);\n            }\n        }\n\n        this.updateLife(-amount, this.health);\n    }\n\n    public heal(amount: number) {\n        this.health += amount;\n        if (this.health > this.maxHealth) this.health = this.maxHealth;\n        this.updateLife(amount, this.health);\n    }\n\n    private die() {\n        this.unscheduleAllCallbacks();\n    }\n\n    private setToIdle() {\n        this.slimeState = SlimeState.Idle;\n        this.timer = 0;\n        this.anim.play(\"GreeenSlimeIdle\");\n    }\n\n    private startWalking() {\n        this.slimeState = SlimeState.Walk;\n        this.timer = 0;\n        this.direction = cc.v2(\n            Math.random() >= 0.5 ? 1 : -1,\n            Math.random() >= 0.5 ? 1 : -1\n        ).normalize();\n        const clip = Math.abs(this.direction.x) > Math.abs(this.direction.y)\n            ? (this.direction.x > 0 ? \"GreeenSlimeWalkRight\" : \"GreeenSlimeWalkLeft\")\n            : (this.direction.y > 0 ? \"GreeenSlimeWalkUp\" : \"GreeenSlimeWalkDown\");\n        this.anim.play(clip);\n    }\n\n    private startRunning() {\n        this.slimeState = SlimeState.Run;\n        this.currentRunClip = \"\";\n    }\n\n    private startAttack() {\n        this.slimeState = SlimeState.Attack;\n        this.timer = 0;\n        this.currentAttackClip = \"\";\n\n        const dir = this.getRunDirection();\n        const clip = Math.abs(dir.x) > Math.abs(dir.y)\n            ? (dir.x > 0 ? \"GreeenSlimeAttackRight\" : \"GreeenSlimeAttackLeft\")\n            : (dir.y > 0 ? \"GreeenSlimeAttackUp\" : \"GreeenSlimeAttackDown\");\n        this.anim.play(clip);\n\n        this.scheduleOnce(this.applyAttackHit, this.attackHitDelay);\n    }\n\n    \n    private applyAttackHit() {\n        if (this.slimeState !== SlimeState.Attack) return;\n\n        const slimeWorld3 = this.node.parent!.convertToWorldSpaceAR(this.node.position);\n        const slimeWorld2 = cc.v2(slimeWorld3.x, slimeWorld3.y);\n\n        const playerWorld3 = this.player!.parent!.convertToWorldSpaceAR(this.player!.position);\n        const playerWorld2 = cc.v2(playerWorld3.x, playerWorld3.y);\n\n        const dist = slimeWorld2.sub(playerWorld2).mag();\n        if (dist <= this.attackRadius) {\n            const playerComp = this.player.getComponent(Player);\n            if (playerComp) {\n                playerComp.takeDamage(this.attackDamage);\n            }\n        }\n    }\n\n    private runTowardsPlayer(dt: number) {\n        const dir = this.getRunDirection();\n        const clip = Math.abs(dir.x) > Math.abs(dir.y)\n            ? (dir.x > 0 ? \"GreeenSlimeRunRight\" : \"GreeenSlimeRunLeft\")\n            : (dir.y > 0 ? \"GreeenSlimeRunUp\" : \"GreeenSlimeRunDown\");\n        if (clip !== this.currentRunClip) {\n            this.anim.play(clip);\n            this.currentRunClip = clip;\n        }\n        const moveDelta = cc.v2(dir.x * this.runSpeed * dt, dir.y * this.runSpeed * dt);\n        const nextPos = this.node.getPosition().add(moveDelta);\n        if (nextPos.sub(this.patrolCenter).mag() > this.patrolRadius) {\n            this.setToIdle();\n            return;\n        }\n        this.node.setPosition(nextPos);\n    }\n\n    private getRunDirection() {\n        const worldP = this.player!.parent!.convertToWorldSpaceAR(this.player!.position);\n        const localP = this.node.parent!.convertToNodeSpaceAR(worldP);\n        return cc.v2(localP.x - this.node.x, localP.y - this.node.y).normalize();\n    }\n\n    onDisable() {\n        this.unscheduleAllCallbacks();\n    }\n\n    private playDeathAnimation(direction: cc.Vec2) {\n        const deathAnim = Math.abs(direction.x) > Math.abs(direction.y)\n            ? (direction.x > 0 ? \"GreeenSlimeDeathRight\" : \"GreeenSlimeDeathLeft\")\n            : (direction.y > 0 ? \"GreeenSlimeDeathUp\" : \"GreeenSlimeDeathDown\");\n\n        this.anim.play(deathAnim);\n\n        this.unscheduleAllCallbacks();\n        this.slimeState = SlimeState.Idle;\n\n        this.scheduleOnce(() => {\n            this.isDead = true;\n            this.isDeathAnimPlaying = false;\n        }, 1.0); // match to your animation's duration\n    }\n}\n"]}