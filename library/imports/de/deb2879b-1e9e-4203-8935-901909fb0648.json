{
  "__type__": "cc.TextAsset",
  "_name": "firebase-compat.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <code>firebase</code> is a global namespace from which all Firebase\n * services are accessed.\n */\ndeclare namespace firebase {\n  /**\n   * @hidden\n   */\n  type NextFn<T> = (value: T) => void;\n  /**\n   * @hidden\n   */\n  type ErrorFn<E = Error> = (error: E) => void;\n  /**\n   * @hidden\n   */\n  type CompleteFn = () => void;\n\n  /**\n   * `FirebaseError` is a subclass of the standard JavaScript `Error` object. In\n   * addition to a message string and stack trace, it contains a string code.\n   */\n  interface FirebaseError {\n    /**\n     * Error codes are strings using the following format: `\"service/string-code\"`.\n     * Some examples include `\"app/no-app\"` and `\"auth/user-not-found\"`.\n     *\n     * While the message for a given error can change, the code will remain the same\n     * between backward-compatible versions of the Firebase SDK.\n     */\n    code: string;\n    /**\n     * An explanatory message for the error that just occurred.\n     *\n     * This message is designed to be helpful to you, the developer. Because\n     * it generally does not convey meaningful information to end users,\n     * this message should not be displayed in your application.\n     */\n    message: string;\n    /**\n     * The name of the class of errors, which is `\"FirebaseError\"`.\n     */\n    name: \"FirebaseError\";\n    /**\n     * A string value containing the execution backtrace when the error originally\n     * occurred. This may not always be available.\n     *\n     * When it is available, this information can be sent to\n     * {@link https://firebase.google.com/support/ Firebase Support} to help\n     * explain the cause of an error.\n     */\n    stack?: string;\n  }\n\n  /**\n   * @hidden\n   */\n  interface Observer<T, E = Error> {\n    next: NextFn<T>;\n    error: ErrorFn<E>;\n    complete: CompleteFn;\n  }\n\n  /**\n   * The JS SDK supports 5 log levels and also allows a user the ability to\n   * silence the logs altogether.\n   *\n   * The order is as follows:\n   * silent < debug < verbose < info < warn < error\n   */\n  type LogLevel = \"debug\" | \"verbose\" | \"info\" | \"warn\" | \"error\" | \"silent\";\n\n  /**\n   * The current SDK version.\n   */\n  var SDK_VERSION: string;\n\n  /**\n   * Registers a library's name and version for platform logging purposes.\n   * @param library Name of 1p or 3p library (e.g. firestore, angularfire)\n   * @param version Current version of that library.\n   * @param variant Bundle variant, e.g., node, rn, etc.\n   */\n  function registerVersion(\n    library: string,\n    version: string,\n    variant?: string,\n  ): void;\n\n  /**\n   * Sets log level for all Firebase packages.\n   *\n   * All of the log types above the current log level are captured (i.e. if\n   * you set the log level to `info`, errors are logged, but `debug` and\n   * `verbose` logs are not).\n   */\n  function setLogLevel(logLevel: LogLevel): void;\n\n  /**\n   * Sets log handler for all Firebase packages.\n   * @param logCallback An optional custom log handler that executes user code whenever\n   * the Firebase SDK makes a logging call.\n   */\n  function onLog(\n    logCallback: (callbackParams: {\n      /**\n       * Level of event logged.\n       */\n      level: LogLevel;\n      /**\n       * Any text from logged arguments joined into one string.\n       */\n      message: string;\n      /**\n       * The raw arguments passed to the log call.\n       */\n      args: any[];\n      /**\n       * A string indicating the name of the package that made the log call,\n       * such as `@firebase/firestore`.\n       */\n      type: string;\n    }) => void,\n    options?: {\n      /**\n       * Threshhold log level. Only logs at or above this level trigger the `logCallback`\n       * passed to `onLog`.\n       */\n      level: LogLevel;\n    },\n  ): void;\n\n  /**\n   * @hidden\n   */\n  type Unsubscribe = () => void;\n\n  /**\n   * A user account.\n   */\n  interface User extends firebase.UserInfo {\n    /**\n     * Deletes and signs out the user.\n     *\n     * <b>Important:</b> this is a security-sensitive operation that requires the\n     * user to have recently signed in. If this requirement isn't met, ask the user\n     * to authenticate again and then call\n     * {@link firebase.User.reauthenticateWithCredential}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/requires-recent-login</dt>\n     * <dd>Thrown if the user's last sign-in time does not meet the security\n     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to\n     *     resolve. This does not apply if the user is anonymous.</dd>\n     * </dl>\n     */\n    delete(): Promise<void>;\n    emailVerified: boolean;\n    getIdTokenResult(\n      forceRefresh?: boolean,\n    ): Promise<firebase.auth.IdTokenResult>;\n    /**\n     * Returns a JSON Web Token (JWT) used to identify the user to a Firebase\n     * service.\n     *\n     * Returns the current token if it has not expired. Otherwise, this will\n     * refresh the token and return a new one.\n     *\n     * @param forceRefresh Force refresh regardless of token\n     *     expiration.\n     */\n    getIdToken(forceRefresh?: boolean): Promise<string>;\n    isAnonymous: boolean;\n    /**\n     * Links the user account with the given credentials and returns any available\n     * additional user information, such as user name.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/provider-already-linked</dt>\n     * <dd>Thrown if the provider has already been linked to the user. This error is\n     *     thrown even if this is not the same provider's account that is currently\n     *     linked to the user.</dd>\n     * <dt>auth/invalid-credential</dt>\n     * <dd>Thrown if the provider's credential is not valid. This can happen if it\n     *     has already expired when calling link, or if it used invalid token(s).\n     *     See the Firebase documentation for your provider, and make sure you pass\n     *     in the correct parameters to the credential method.</dd>\n     * <dt>auth/credential-already-in-use</dt>\n     * <dd>Thrown if the account corresponding to the credential already exists\n     *     among your users, or is already linked to a Firebase User.\n     *     For example, this error could be thrown if you are upgrading an anonymous\n     *     user to a Google user by linking a Google credential to it and the Google\n     *     credential used is already associated with an existing Firebase Google\n     *     user.\n     *     The fields <code>error.email</code>, <code>error.phoneNumber</code>, and\n     *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})\n     *     may be provided, depending on the type of credential. You can recover\n     *     from this error by signing in with <code>error.credential</code> directly\n     *     via {@link firebase.auth.Auth.signInWithCredential}.</dd>\n     * <dt>auth/email-already-in-use</dt>\n     * <dd>Thrown if the email corresponding to the credential already exists\n     *     among your users. When thrown while linking a credential to an existing\n     *     user, an <code>error.email</code> and <code>error.credential</code>\n     *     ({@link firebase.auth.AuthCredential}) fields are also provided.\n     *     You have to link the credential to the existing user with that email if\n     *     you wish to continue signing in with that credential. To do so, call\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to\n     *     <code>error.email</code> via one of the providers returned and then\n     *     {@link firebase.User.linkWithCredential} the original credential to that\n     *     newly signed in user.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go\n     *     to the Firebase Console for your project, in the Auth section and the\n     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if the password used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or\n     *     when the user associated with the email does not have a password.</dd>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification\n     *     ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @deprecated  This method is deprecated. Use\n     * {@link firebase.User.linkWithCredential} instead.\n     *\n     * @param credential The auth credential.\n     */\n    linkAndRetrieveDataWithCredential(\n      credential: firebase.auth.AuthCredential,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Links the user account with the given credentials.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/provider-already-linked</dt>\n     * <dd>Thrown if the provider has already been linked to the user. This error is\n     *     thrown even if this is not the same provider's account that is currently\n     *     linked to the user.</dd>\n     * <dt>auth/invalid-credential</dt>\n     * <dd>Thrown if the provider's credential is not valid. This can happen if it\n     *     has already expired when calling link, or if it used invalid token(s).\n     *     See the Firebase documentation for your provider, and make sure you pass\n     *     in the correct parameters to the credential method.</dd>\n     * <dt>auth/credential-already-in-use</dt>\n     * <dd>Thrown if the account corresponding to the credential already exists\n     *     among your users, or is already linked to a Firebase User.\n     *     For example, this error could be thrown if you are upgrading an anonymous\n     *     user to a Google user by linking a Google credential to it and the Google\n     *     credential used is already associated with an existing Firebase Google\n     *     user.\n     *     The fields <code>error.email</code>, <code>error.phoneNumber</code>, and\n     *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})\n     *     may be provided, depending on the type of credential. You can recover\n     *     from this error by signing in with <code>error.credential</code> directly\n     *     via {@link firebase.auth.Auth.signInWithCredential}.</dd>\n     * <dt>auth/email-already-in-use</dt>\n     * <dd>Thrown if the email corresponding to the credential already exists\n     *     among your users. When thrown while linking a credential to an existing\n     *     user, an <code>error.email</code> and <code>error.credential</code>\n     *     ({@link firebase.auth.AuthCredential}) fields are also provided.\n     *     You have to link the credential to the existing user with that email if\n     *     you wish to continue signing in with that credential. To do so, call\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to\n     *     <code>error.email</code> via one of the providers returned and then\n     *     {@link firebase.User.linkWithCredential} the original credential to that\n     *     newly signed in user.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go\n     *     to the Firebase Console for your project, in the Auth section and the\n     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if the password used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or\n     *     when the user associated with the email does not have a password.</dd>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification\n     *     ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @param credential The auth credential.\n     */\n    linkWithCredential(\n      credential: firebase.auth.AuthCredential,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Links the user account with the given phone number.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/provider-already-linked</dt>\n     * <dd>Thrown if the provider has already been linked to the user. This error is\n     *     thrown even if this is not the same provider's account that is currently\n     *     linked to the user.</dd>\n     * <dt>auth/captcha-check-failed</dt>\n     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if\n     *     this method was called from a non-whitelisted domain.</dd>\n     * <dt>auth/invalid-phone-number</dt>\n     * <dd>Thrown if the phone number has an invalid format.</dd>\n     * <dt>auth/missing-phone-number</dt>\n     * <dd>Thrown if the phone number is missing.</dd>\n     * <dt>auth/quota-exceeded</dt>\n     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given phone number has been\n     *     disabled.</dd>\n     * <dt>auth/credential-already-in-use</dt>\n     * <dd>Thrown if the account corresponding to the phone number already exists\n     *     among your users, or is already linked to a Firebase User.\n     *     The fields <code>error.phoneNumber</code> and\n     *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})\n     *     are provided in this case. You can recover from this error by signing in\n     *     with that credential directly via\n     *     {@link firebase.auth.Auth.signInWithCredential}.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if you have not enabled the phone authentication provider in the\n     *     Firebase Console. Go to the Firebase Console for your project, in the\n     *     Auth section and the <strong>Sign in Method</strong> tab and configure\n     *     the provider.</dd>\n     * </dl>\n     *\n     * @param phoneNumber The user's phone number in E.164 format (e.g.\n     *     +16505550101).\n     * @param applicationVerifier\n     */\n    linkWithPhoneNumber(\n      phoneNumber: string,\n      applicationVerifier: firebase.auth.ApplicationVerifier,\n    ): Promise<firebase.auth.ConfirmationResult>;\n    /**\n     * Links the authenticated provider to the user account using a pop-up based\n     * OAuth flow.\n     *\n     * If the linking is successful, the returned result will contain the user\n     * and the provider's credential.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/cancelled-popup-request</dt>\n     * <dd>Thrown if successive popup operations are triggered. Only one popup\n     *     request is allowed at one time on a user or an auth instance. All the\n     *     popups would fail with this error except for the last one.</dd>\n     * <dt>auth/credential-already-in-use</dt>\n     * <dd>Thrown if the account corresponding to the credential already exists\n     *     among your users, or is already linked to a Firebase User.\n     *     For example, this error could be thrown if you are upgrading an anonymous\n     *     user to a Google user by linking a Google credential to it and the Google\n     *     credential used is already associated with an existing Firebase Google\n     *     user.\n     *     An <code>error.email</code> and <code>error.credential</code>\n     *     ({@link firebase.auth.AuthCredential}) fields are also provided. You can\n     *     recover from this error by signing in with that credential directly via\n     *     {@link firebase.auth.Auth.signInWithCredential}.</dd>\n     * <dt>auth/email-already-in-use</dt>\n     * <dd>Thrown if the email corresponding to the credential already exists\n     *     among your users. When thrown while linking a credential to an existing\n     *     user, an <code>error.email</code> and <code>error.credential</code>\n     *     ({@link firebase.auth.AuthCredential}) fields are also provided.\n     *     You have to link the credential to the existing user with that email if\n     *     you wish to continue signing in with that credential. To do so, call\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to\n     *     <code>error.email</code> via one of the providers returned and then\n     *     {@link firebase.User.linkWithCredential} the original credential to that\n     *     newly signed in user.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go\n     *     to the Firebase Console for your project, in the Auth section and the\n     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>\n     * <dt>auth/popup-blocked</dt>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dd>Thrown if the popup was blocked by the browser, typically when this\n     *     operation is triggered outside of a click handler.</dd>\n     * <dt>auth/popup-closed-by-user</dt>\n     * <dd>Thrown if the popup window is closed by the user without completing the\n     *     sign in to the provider.</dd>\n     * <dt>auth/provider-already-linked</dt>\n     * <dd>Thrown if the provider has already been linked to the user. This error is\n     *     thrown even if this is not the same provider's account that is currently\n     *     linked to the user.</dd>\n     * <dt>auth/unauthorized-domain</dt>\n     * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n     *     Firebase project. Edit the list of authorized domains from the Firebase\n     *     console.</dd>\n     * </dl>\n     *\n     * This method does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * // Creates the provider object.\n     * var provider = new firebase.auth.FacebookAuthProvider();\n     * // You can add additional scopes to the provider:\n     * provider.addScope('email');\n     * provider.addScope('user_friends');\n     * // Link with popup:\n     * user.linkWithPopup(provider).then(function(result) {\n     *   // The firebase.User instance:\n     *   var user = result.user;\n     *   // The Facebook firebase.auth.AuthCredential containing the Facebook\n     *   // access token:\n     *   var credential = result.credential;\n     * }, function(error) {\n     *   // An error happened.\n     * });\n     * ```\n     *\n     * @param provider The provider to authenticate.\n     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link\n     *     firebase.auth.EmailAuthProvider} will throw an error.\n     */\n    linkWithPopup(\n      provider: firebase.auth.AuthProvider,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Links the authenticated provider to the user account using a full-page\n     * redirect flow.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dt>auth/provider-already-linked</dt>\n     * <dd>Thrown if the provider has already been linked to the user. This error is\n     *     thrown even if this is not the same provider's account that is currently\n     *     linked to the user.</dd>\n     * <dt>auth/unauthorized-domain</dt>\n     * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n     *     Firebase project. Edit the list of authorized domains from the Firebase\n     *     console.</dd>\n     * </dl>\n     *\n     * @param provider The provider to authenticate.\n     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link\n     *     firebase.auth.EmailAuthProvider} will throw an error.\n     */\n    linkWithRedirect(provider: firebase.auth.AuthProvider): Promise<void>;\n    metadata: firebase.auth.UserMetadata;\n    /**\n     * The {@link firebase.User.MultiFactorUser} object corresponding to the current user.\n     * This is used to access all multi-factor properties and operations related to the\n     * current user.\n     */\n\n    multiFactor: firebase.User.MultiFactorUser;\n    /**\n     * The phone number normalized based on the E.164 standard (e.g. +16505550101)\n     * for the current user. This is null if the user has no phone credential linked\n     * to the account.\n     */\n    phoneNumber: string | null;\n    providerData: (firebase.UserInfo | null)[];\n    /**\n     * Re-authenticates a user using a fresh credential, and returns any available\n     * additional user information, such as user name. Use before operations\n     * such as {@link firebase.User.updatePassword} that require tokens from recent\n     * sign-in attempts.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/user-mismatch</dt>\n     * <dd>Thrown if the credential given does not correspond to the user.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if the credential given does not correspond to any existing user.\n     *     </dd>\n     * <dt>auth/invalid-credential</dt>\n     * <dd>Thrown if the provider's credential is not valid. This can happen if it\n     *     has already expired when calling link, or if it used invalid token(s).\n     *     See the Firebase documentation for your provider, and make sure you pass\n     *     in the correct parameters to the credential method.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if the password used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or when\n     *     the user associated with the email does not have a password.</dd>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification\n     *     ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @deprecated\n     * This method is deprecated. Use\n     * {@link firebase.User.reauthenticateWithCredential} instead.\n     *\n     * @param credential\n     */\n    reauthenticateAndRetrieveDataWithCredential(\n      credential: firebase.auth.AuthCredential,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Re-authenticates a user using a fresh credential. Use before operations\n     * such as {@link firebase.User.updatePassword} that require tokens from recent\n     * sign-in attempts.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/user-mismatch</dt>\n     * <dd>Thrown if the credential given does not correspond to the user.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if the credential given does not correspond to any existing user.\n     *     </dd>\n     * <dt>auth/invalid-credential</dt>\n     * <dd>Thrown if the provider's credential is not valid. This can happen if it\n     *     has already expired when calling link, or if it used invalid token(s).\n     *     See the Firebase documentation for your provider, and make sure you pass\n     *     in the correct parameters to the credential method.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if the password used in a\n     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or when\n     *     the user associated with the email does not have a password.</dd>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification\n     *     ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @param credential\n     */\n    reauthenticateWithCredential(\n      credential: firebase.auth.AuthCredential,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Re-authenticates a user using a fresh credential. Use before operations\n     * such as {@link firebase.User.updatePassword} that require tokens from recent\n     * sign-in attempts.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/user-mismatch</dt>\n     * <dd>Thrown if the credential given does not correspond to the user.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if the credential given does not correspond to any existing user.\n     *     </dd>\n     * <dt>auth/captcha-check-failed</dt>\n     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if\n     *     this method was called from a non-whitelisted domain.</dd>\n     * <dt>auth/invalid-phone-number</dt>\n     * <dd>Thrown if the phone number has an invalid format.</dd>\n     * <dt>auth/missing-phone-number</dt>\n     * <dd>Thrown if the phone number is missing.</dd>\n     * <dt>auth/quota-exceeded</dt>\n     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>\n     * </dl>\n     *\n     * @param phoneNumber The user's phone number in E.164 format (e.g.\n     *     +16505550101).\n     * @param applicationVerifier\n     */\n    reauthenticateWithPhoneNumber(\n      phoneNumber: string,\n      applicationVerifier: firebase.auth.ApplicationVerifier,\n    ): Promise<firebase.auth.ConfirmationResult>;\n    /**\n     * Reauthenticates the current user with the specified provider using a pop-up\n     * based OAuth flow.\n     *\n     * If the reauthentication is successful, the returned result will contain the\n     * user and the provider's credential.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/cancelled-popup-request</dt>\n     * <dd>Thrown if successive popup operations are triggered. Only one popup\n     *     request is allowed at one time on a user or an auth instance. All the\n     *     popups would fail with this error except for the last one.</dd>\n     * <dt>auth/user-mismatch</dt>\n     * <dd>Thrown if the credential given does not correspond to the user.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go\n     *     to the Firebase Console for your project, in the Auth section and the\n     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>\n     * <dt>auth/popup-blocked</dt>\n     * <dd>Thrown if the popup was blocked by the browser, typically when this\n     *     operation is triggered outside of a click handler.</dd>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dt>auth/popup-closed-by-user</dt>\n     * <dd>Thrown if the popup window is closed by the user without completing the\n     *     sign in to the provider.</dd>\n     * <dt>auth/unauthorized-domain</dt>\n     * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n     *     Firebase project. Edit the list of authorized domains from the Firebase\n     *     console.</dd>\n     * </dl>\n     *\n     * This method does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * // Creates the provider object.\n     * var provider = new firebase.auth.FacebookAuthProvider();\n     * // You can add additional scopes to the provider:\n     * provider.addScope('email');\n     * provider.addScope('user_friends');\n     * // Reauthenticate with popup:\n     * user.reauthenticateWithPopup(provider).then(function(result) {\n     *   // The firebase.User instance:\n     *   var user = result.user;\n     *   // The Facebook firebase.auth.AuthCredential containing the Facebook\n     *   // access token:\n     *   var credential = result.credential;\n     * }, function(error) {\n     *   // An error happened.\n     * });\n     * ```\n     *\n     * @param provider The provider to authenticate.\n     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link\n     *     firebase.auth.EmailAuthProvider} will throw an error.\n     */\n    reauthenticateWithPopup(\n      provider: firebase.auth.AuthProvider,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Reauthenticates the current user with the specified OAuth provider using a\n     * full-page redirect flow.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dt>auth/user-mismatch</dt>\n     * <dd>Thrown if the credential given does not correspond to the user.</dd>\n     * <dt>auth/unauthorized-domain</dt>\n     * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n     *     Firebase project. Edit the list of authorized domains from the Firebase\n     *     console.</dd>\n     * </dl>\n     *\n     * This method does not work in a Node.js environment.\n     *\n     * @param provider The provider to authenticate.\n     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link\n     *     firebase.auth.EmailAuthProvider} will throw an error.\n     */\n    reauthenticateWithRedirect(\n      provider: firebase.auth.AuthProvider,\n    ): Promise<void>;\n    refreshToken: string;\n    /**\n     * Refreshes the current user, if signed in.\n     *\n     */\n    reload(): Promise<void>;\n    /**\n     * Sends a verification email to a user.\n     *\n     * The verification process is completed by calling\n     * {@link firebase.auth.Auth.applyActionCode}\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/missing-android-pkg-name</dt>\n     * <dd>An Android package name must be provided if the Android app is required\n     *     to be installed.</dd>\n     * <dt>auth/missing-continue-uri</dt>\n     * <dd>A continue URL must be provided in the request.</dd>\n     * <dt>auth/missing-ios-bundle-id</dt>\n     * <dd>An iOS bundle ID must be provided if an App Store ID is provided.</dd>\n     * <dt>auth/invalid-continue-uri</dt>\n     * <dd>The continue URL provided in the request is invalid.</dd>\n     * <dt>auth/unauthorized-continue-uri</dt>\n     * <dd>The domain of the continue URL is not whitelisted. Whitelist\n     *     the domain in the Firebase console.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   url: 'https://www.example.com/cart?email=user@example.com&cartId=123',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   handleCodeInApp: true\n     * };\n     * firebase.auth().currentUser.sendEmailVerification(actionCodeSettings)\n     *     .then(function() {\n     *       // Verification email sent.\n     *     })\n     *     .catch(function(error) {\n     *       // Error occurred. Inspect error.code.\n     *     });\n     * ```\n     *\n     * @param actionCodeSettings The action\n     *     code settings. If specified, the state/continue URL will be set as the\n     *     \"continueUrl\" parameter in the email verification link. The default email\n     *     verification landing page will use this to display a link to go back to\n     *     the app if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is whitelisted by the\n     *     developer in the console. Otherwise an error will be thrown.\n     *     Mobile app redirects will only be applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of condition.\n     *     The Android package name and iOS bundle ID will be respected only if they\n     *     are configured in the same Firebase Auth project used.\n     */\n    sendEmailVerification(\n      actionCodeSettings?: firebase.auth.ActionCodeSettings | null,\n    ): Promise<void>;\n    /**\n     * The current user's tenant ID. This is a read-only property, which indicates\n     * the tenant ID used to sign in the current user. This is null if the user is\n     * signed in from the parent project.\n     *\n     * @example\n     * ```javascript\n     * // Set the tenant ID on Auth instance.\n     * firebase.auth().tenantId = ‘TENANT_PROJECT_ID’;\n     *\n     * // All future sign-in request now include tenant ID.\n     * firebase.auth().signInWithEmailAndPassword(email, password)\n     *   .then(function(result) {\n     *     // result.user.tenantId should be ‘TENANT_PROJECT_ID’.\n     *   }).catch(function(error) {\n     *     // Handle error.\n     *   });\n     * ```\n     */\n    tenantId: string | null;\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @return A JSON-serializable representation of this object.\n     */\n    toJSON(): Object;\n    /**\n     * Unlinks a provider from a user account.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/no-such-provider</dt>\n     * <dd>Thrown if the user does not have this provider linked or when the\n     *     provider ID given does not exist.</dd>\n     * </dt>\n     *\n     * @param providerId\n     */\n    unlink(providerId: string): Promise<firebase.User>;\n    /**\n     * Updates the user's email address.\n     *\n     * An email will be sent to the original email address (if it was set) that\n     * allows to revoke the email address change, in order to protect them from\n     * account hijacking.\n     *\n     * <b>Important:</b> this is a security sensitive operation that requires the\n     * user to have recently signed in. If this requirement isn't met, ask the user\n     * to authenticate again and then call\n     * {@link firebase.User.reauthenticateWithCredential}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email used is invalid.</dd>\n     * <dt>auth/email-already-in-use</dt>\n     * <dd>Thrown if the email is already used by another user.</dd>\n     * <dt>auth/requires-recent-login</dt>\n     * <dd>Thrown if the user's last sign-in time does not meet the security\n     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to\n     *     resolve. This does not apply if the user is anonymous.</dd>\n     * </dl>\n     *\n     * @param newEmail The new email address.\n     */\n    updateEmail(newEmail: string): Promise<void>;\n    /**\n     * Updates the user's password.\n     *\n     * <b>Important:</b> this is a security sensitive operation that requires the\n     * user to have recently signed in. If this requirement isn't met, ask the user\n     * to authenticate again and then call\n     * {@link firebase.User.reauthenticateWithCredential}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/weak-password</dt>\n     * <dd>Thrown if the password is not strong enough.</dd>\n     * <dt>auth/requires-recent-login</dt>\n     * <dd>Thrown if the user's last sign-in time does not meet the security\n     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to\n     *     resolve. This does not apply if the user is anonymous.</dd>\n     * </dl>\n     *\n     * @param newPassword\n     */\n    updatePassword(newPassword: string): Promise<void>;\n    /**\n     * Updates the user's phone number.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the verification code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the verification ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @param phoneCredential\n     */\n    updatePhoneNumber(\n      phoneCredential: firebase.auth.AuthCredential,\n    ): Promise<void>;\n    /**\n     * Updates a user's profile data.\n     *\n     * @example\n     * ```javascript\n     * // Updates the user attributes:\n     * user.updateProfile({\n     *   displayName: \"Jane Q. User\",\n     *   photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n     * }).then(function() {\n     *   // Profile updated successfully!\n     *   // \"Jane Q. User\"\n     *   var displayName = user.displayName;\n     *   // \"https://example.com/jane-q-user/profile.jpg\"\n     *   var photoURL = user.photoURL;\n     * }, function(error) {\n     *   // An error happened.\n     * });\n     *\n     * // Passing a null value will delete the current attribute's value, but not\n     * // passing a property won't change the current attribute's value:\n     * // Let's say we're using the same user than before, after the update.\n     * user.updateProfile({photoURL: null}).then(function() {\n     *   // Profile updated successfully!\n     *   // \"Jane Q. User\", hasn't changed.\n     *   var displayName = user.displayName;\n     *   // Now, this is null.\n     *   var photoURL = user.photoURL;\n     * }, function(error) {\n     *   // An error happened.\n     * });\n     * ```\n     *\n     * @param profile The profile's\n     *     displayName and photoURL to update.\n     */\n    updateProfile(profile: {\n      displayName?: string | null;\n      photoURL?: string | null;\n    }): Promise<void>;\n    /**\n     * Sends a verification email to a new email address. The user's email will be\n     * updated to the new one after being verified.\n     *\n     * If you have a custom email action handler, you can complete the verification\n     * process by calling {@link firebase.auth.Auth.applyActionCode}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/missing-android-pkg-name</dt>\n     * <dd>An Android package name must be provided if the Android app is required\n     *     to be installed.</dd>\n     * <dt>auth/missing-continue-uri</dt>\n     * <dd>A continue URL must be provided in the request.</dd>\n     * <dt>auth/missing-ios-bundle-id</dt>\n     * <dd>An iOS bundle ID must be provided if an App Store ID is provided.</dd>\n     * <dt>auth/invalid-continue-uri</dt>\n     * <dd>The continue URL provided in the request is invalid.</dd>\n     * <dt>auth/unauthorized-continue-uri</dt>\n     * <dd>The domain of the continue URL is not whitelisted. Whitelist\n     *     the domain in the Firebase console.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   url: 'https://www.example.com/cart?email=user@example.com&cartId=123',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   handleCodeInApp: true\n     * };\n     * firebase.auth().currentUser.verifyBeforeUpdateEmail(\n     *   'user@example.com', actionCodeSettings)\n     *   .then(function() {\n     *     // Verification email sent.\n     *   })\n     *   .catch(function(error) {\n     *     // Error occurred. Inspect error.code.\n     *   });\n     * ```\n     *\n     * @param newEmail The email address to be verified and updated to.\n     * @param actionCodeSettings The action\n     *     code settings. If specified, the state/continue URL will be set as the\n     *     \"continueUrl\" parameter in the email verification link. The default email\n     *     verification landing page will use this to display a link to go back to\n     *     the app if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is whitelisted by the\n     *     developer in the console. Otherwise an error will be thrown.\n     *     Mobile app redirects will only be applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of condition.\n     *     The Android package name and iOS bundle ID will be respected only if they\n     *     are configured in the same Firebase Auth project used.\n     */\n    verifyBeforeUpdateEmail(\n      newEmail: string,\n      actionCodeSettings?: firebase.auth.ActionCodeSettings | null,\n    ): Promise<void>;\n  }\n\n  /**\n   * User profile information, visible only to the Firebase project's\n   * apps.\n   *\n   */\n  interface UserInfo {\n    displayName: string | null;\n    email: string | null;\n    phoneNumber: string | null;\n    photoURL: string | null;\n    providerId: string;\n    /**\n     * The user's unique ID.\n     */\n    uid: string;\n  }\n\n  type FirebaseSignInProvider =\n    | \"custom\"\n    | \"email\"\n    | \"password\"\n    | \"phone\"\n    | \"anonymous\"\n    | \"google.com\"\n    | \"facebook.com\"\n    | \"github.com\"\n    | \"twitter.com\"\n    | \"microsoft.com\"\n    | \"apple.com\";\n\n  interface FirebaseIdToken {\n    /** Always set to https://securetoken.google.com/PROJECT_ID */\n    iss: string;\n\n    /** Always set to PROJECT_ID */\n    aud: string;\n\n    /** The user's unique ID */\n    sub: string;\n\n    /** The token issue time, in seconds since epoch */\n    iat: number;\n\n    /** The token expiry time, normally 'iat' + 3600 */\n    exp: number;\n\n    /** The user's unique ID. Must be equal to 'sub' */\n    user_id: string;\n\n    /** The time the user authenticated, normally 'iat' */\n    auth_time: number;\n\n    /** The sign in provider, only set when the provider is 'anonymous' */\n    provider_id?: \"anonymous\";\n\n    /** The user's primary email */\n    email?: string;\n\n    /** The user's email verification status */\n    email_verified?: boolean;\n\n    /** The user's primary phone number */\n    phone_number?: string;\n\n    /** The user's display name */\n    name?: string;\n\n    /** The user's profile photo URL */\n    picture?: string;\n\n    /** Information on all identities linked to this user */\n    firebase: {\n      /** The primary sign-in provider */\n      sign_in_provider: FirebaseSignInProvider;\n\n      /** A map of providers to the user's list of unique identifiers from each provider */\n      identities?: { [provider in FirebaseSignInProvider]?: string[] };\n    };\n\n    /** Custom claims set by the developer */\n    [claim: string]: unknown;\n\n    // NO LONGER SUPPORTED. Use \"sub\" instead. (Not a jsdoc comment to avoid generating docs.)\n    uid?: never;\n  }\n\n  export type EmulatorMockTokenOptions = (\n    | { user_id: string }\n    | { sub: string }\n  ) &\n    Partial<FirebaseIdToken>;\n\n  /**\n   * Retrieves a Firebase {@link firebase.app.App app} instance.\n   *\n   * When called with no arguments, the default app is returned. When an app name\n   * is provided, the app corresponding to that name is returned.\n   *\n   * An exception is thrown if the app being retrieved has not yet been\n   * initialized.\n   *\n   * @example\n   * ```javascript\n   * // Return the default app\n   * var app = firebase.app();\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Return a named app\n   * var otherApp = firebase.app(\"otherApp\");\n   * ```\n   *\n   * @param name Optional name of the app to return. If no name is\n   *   provided, the default is `\"[DEFAULT]\"`.\n   *\n   * @return The app corresponding to the provided app name.\n   *   If no app name is provided, the default app is returned.\n   */\n  function app(name?: string): firebase.app.App;\n\n  /**\n   * A (read-only) array of all initialized apps.\n   */\n  var apps: firebase.app.App[];\n\n  /**\n   * Gets the {@link firebase.auth.Auth `Auth`} service for the default app or a\n   * given app.\n   *\n   * `firebase.auth()` can be called with no arguments to access the default app's\n   * {@link firebase.auth.Auth `Auth`} service or as `firebase.auth(app)` to\n   * access the {@link firebase.auth.Auth `Auth`} service associated with a\n   * specific app.\n   *\n   * @example\n   * ```javascript\n   *\n   * // Get the Auth service for the default app\n   * var defaultAuth = firebase.auth();\n   * ```\n   * @example\n   * ```javascript\n   *\n   * // Get the Auth service for a given app\n   * var otherAuth = firebase.auth(otherApp);\n   * ```\n   * @param app\n   */\n  function auth(app?: firebase.app.App): firebase.auth.Auth;\n\n  /**\n   * Gets the {@link firebase.database.Database `Database`} service for the\n   * default app or a given app.\n   *\n   * `firebase.database()` can be called with no arguments to access the default\n   * app's {@link firebase.database.Database `Database`} service or as\n   * `firebase.database(app)` to access the\n   * {@link firebase.database.Database `Database`} service associated with a\n   * specific app.\n   *\n   * `firebase.database` is also a namespace that can be used to access global\n   * constants and methods associated with the `Database` service.\n   *\n   * @example\n   * ```javascript\n   * // Get the Database service for the default app\n   * var defaultDatabase = firebase.database();\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Get the Database service for a specific app\n   * var otherDatabase = firebase.database(app);\n   * ```\n   *\n   * @namespace\n   * @param app Optional app whose Database service to\n   *   return. If not provided, the default Database service will be returned.\n   * @return The default Database service if no app\n   *   is provided or the Database service associated with the provided app.\n   */\n  function database(app?: firebase.app.App): firebase.database.Database;\n\n  /**\n   * Creates and initializes a Firebase {@link firebase.app.App app} instance.\n   *\n   * See\n   * {@link\n   *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n   *   Add Firebase to your app} and\n   * {@link\n   *   https://firebase.google.com/docs/web/learn-more#multiple-projects\n   *   Initialize multiple projects} for detailed documentation.\n   *\n   * @example\n   * ```javascript\n   *\n   * // Initialize default app\n   * // Retrieve your own options values by adding a web app on\n   * // https://console.firebase.google.com\n   * firebase.initializeApp({\n   *   apiKey: \"AIza....\",                             // Auth / General Use\n   *   appId: \"1:27992087142:web:ce....\",              // General Use\n   *   projectId: \"my-firebase-project\",               // General Use\n   *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n   *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n   *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n   *   messagingSenderId: \"123456789\",                 // Cloud Messaging\n   *   measurementId: \"G-12345\"                        // Analytics\n   * });\n   * ```\n   *\n   * @example\n   * ```javascript\n   *\n   * // Initialize another app\n   * var otherApp = firebase.initializeApp({\n   *   apiKey: \"AIza....\",\n   *   appId: \"1:27992087142:web:ce....\",\n   *   projectId: \"my-firebase-project\",\n   *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n   *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n   * }, \"nameOfOtherApp\");\n   * ```\n   *\n   * @param options Options to configure the app's services.\n   * @param name Optional name of the app to initialize. If no name\n   *   is provided, the default is `\"[DEFAULT]\"`.\n   *\n   * @return {!firebase.app.App} The initialized app.\n   */\n  function initializeApp(options: Object, name?: string): firebase.app.App;\n\n  /**\n   * Gets the {@link firebase.messaging.Messaging `Messaging`} service for the\n   * default app or a given app.\n   *\n   * `firebase.messaging()` can be called with no arguments to access the default\n   * app's {@link firebase.messaging.Messaging `Messaging`} service or as\n   * `firebase.messaging(app)` to access the\n   * {@link firebase.messaging.Messaging `Messaging`} service associated with a\n   * specific app.\n   *\n   * Calling `firebase.messaging()` in a service worker results in Firebase\n   * generating notifications if the push message payload has a `notification`\n   * parameter.\n   *\n   * The Messaging SDK does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Get the Messaging service for the default app\n   * var defaultMessaging = firebase.messaging();\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Get the Messaging service for a given app\n   * var otherMessaging = firebase.messaging(otherApp);\n   * ```\n   *\n   * @namespace\n   * @param app The app to create a Messaging service for.\n   *     If not passed, uses the default app.\n   */\n  function messaging(app?: firebase.app.App): firebase.messaging.Messaging;\n\n  /**\n   * Gets the {@link firebase.storage.Storage `Storage`} service for the default\n   * app or a given app.\n   *\n   * `firebase.storage()` can be called with no arguments to access the default\n   * app's {@link firebase.storage.Storage `Storage`} service or as\n   * `firebase.storage(app)` to access the\n   * {@link firebase.storage.Storage `Storage`} service associated with a\n   * specific app.\n   *\n   * @example\n   * ```javascript\n   * // Get the Storage service for the default app\n   * var defaultStorage = firebase.storage();\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Get the Storage service for a given app\n   * var otherStorage = firebase.storage(otherApp);\n   * ```\n   *\n   * @param app The app to create a storage service for.\n   *     If not passed, uses the default app.\n   */\n  function storage(app?: firebase.app.App): firebase.storage.Storage;\n\n  function firestore(app?: firebase.app.App): firebase.firestore.Firestore;\n\n  function functions(app?: firebase.app.App): firebase.functions.Functions;\n\n  /**\n   * Gets the {@link firebase.performance.Performance `Performance`} service.\n   *\n   * `firebase.performance()` can be called with no arguments to access the default\n   * app's {@link firebase.performance.Performance `Performance`} service.\n   * The {@link firebase.performance.Performance `Performance`} service does not work with\n   * any other app.\n   *\n   * The Performance SDK does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Get the Performance service for the default app\n   * const defaultPerformance = firebase.performance();\n   * ```\n   *\n   * @param app The app to create a performance service for. Performance Monitoring only works with\n   * the default app.\n   * If not passed, uses the default app.\n   */\n  function performance(\n    app?: firebase.app.App,\n  ): firebase.performance.Performance;\n\n  /**\n   * Gets the {@link firebase.remoteConfig.RemoteConfig `RemoteConfig`} instance.\n   *\n   * The Remote Config SDK does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Get the RemoteConfig instance for the default app\n   * const defaultRemoteConfig = firebase.remoteConfig();\n   * ```\n   *\n   * @param app The app to create a Remote Config service for. If not passed, uses the default app.\n   */\n  function remoteConfig(\n    app?: firebase.app.App,\n  ): firebase.remoteConfig.RemoteConfig;\n\n  /**\n   * Gets the {@link firebase.analytics.Analytics `Analytics`} service.\n   *\n   * `firebase.analytics()` can be called with no arguments to access the default\n   * app's {@link firebase.analytics.Analytics `Analytics`} service.\n   *\n   * The Analytics SDK does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Get the Analytics service for the default app\n   * const defaultAnalytics = firebase.analytics();\n   * ```\n   *\n   * @param app The app to create an analytics service for.\n   * If not passed, uses the default app.\n   */\n  function analytics(app?: firebase.app.App): firebase.analytics.Analytics;\n\n  function appCheck(app?: firebase.app.App): firebase.appCheck.AppCheck;\n}\n\ndeclare namespace firebase.app {\n  /**\n   * A Firebase App holds the initialization information for a collection of\n   * services.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.initializeApp|`firebase.initializeApp()`} to create an app.\n   *\n   */\n  interface App {\n    /**\n     * Gets the {@link firebase.auth.Auth `Auth`} service for the current app.\n     *\n     * @example\n     * ```javascript\n     * var auth = app.auth();\n     * // The above is shorthand for:\n     * // var auth = firebase.auth(app);\n     * ```\n     */\n    auth(): firebase.auth.Auth;\n    /**\n     * Gets the {@link firebase.database.Database `Database`} service for the\n     * current app.\n     *\n     * @example\n     * ```javascript\n     * var database = app.database();\n     * // The above is shorthand for:\n     * // var database = firebase.database(app);\n     * ```\n     */\n    database(url?: string): firebase.database.Database;\n    /**\n     * Renders this app unusable and frees the resources of all associated\n     * services.\n     *\n     * @example\n     * ```javascript\n     * app.delete()\n     *   .then(function() {\n     *     console.log(\"App deleted successfully\");\n     *   })\n     *   .catch(function(error) {\n     *     console.log(\"Error deleting app:\", error);\n     *   });\n     * ```\n     */\n    delete(): Promise<any>;\n    /**\n     * Gets the {@link firebase.installations.Installations `Installations`} service for the\n     * current app.\n     *\n     * The Installations SDK does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * const installations = app.installations();\n     * // The above is shorthand for:\n     * // const installations = firebase.installations(app);\n     * ```\n     */\n    installations(): firebase.installations.Installations;\n    /**\n     * Gets the {@link firebase.messaging.Messaging `Messaging`} service for the\n     * current app.\n     *\n     * The Messaging SDK does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * var messaging = app.messaging();\n     * // The above is shorthand for:\n     * // var messaging = firebase.messaging(app);\n     * ```\n     */\n    messaging(): firebase.messaging.Messaging;\n    /**\n     * The (read-only) name for this app.\n     *\n     * The default app's name is `\"[DEFAULT]\"`.\n     *\n     * @example\n     * ```javascript\n     * // The default app's name is \"[DEFAULT]\"\n     * firebase.initializeApp(defaultAppConfig);\n     * console.log(firebase.app().name);  // \"[DEFAULT]\"\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // A named app's name is what you provide to initializeApp()\n     * var otherApp = firebase.initializeApp(otherAppConfig, \"other\");\n     * console.log(otherApp.name);  // \"other\"\n     * ```\n     */\n    name: string;\n    /**\n     * The settable config flag for GDPR opt-in/opt-out\n     */\n    automaticDataCollectionEnabled: boolean;\n    /**\n     * The (read-only) configuration options for this app. These are the original\n     * parameters given in\n     * {@link firebase.initializeApp `firebase.initializeApp()`}.\n     *\n     * @example\n     * ```javascript\n     * var app = firebase.initializeApp(config);\n     * console.log(app.options.databaseURL === config.databaseURL);  // true\n     * ```\n     */\n    options: Object;\n    /**\n     * Gets the {@link firebase.storage.Storage `Storage`} service for the current\n     * app, optionally initialized with a custom storage bucket.\n     *\n     * @example\n     * ```javascript\n     * var storage = app.storage();\n     * // The above is shorthand for:\n     * // var storage = firebase.storage(app);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * var storage = app.storage(\"gs://your-app.appspot.com\");\n     * ```\n     *\n     * @param url The gs:// url to your Firebase Storage Bucket.\n     *     If not passed, uses the app's default Storage Bucket.\n     */\n    storage(url?: string): firebase.storage.Storage;\n    firestore(): firebase.firestore.Firestore;\n    functions(regionOrCustomDomain?: string): firebase.functions.Functions;\n    /**\n     * Gets the {@link firebase.performance.Performance `Performance`} service for the\n     * current app. If the current app is not the default one, throws an error.\n     *\n     * The Performance SDK does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * const perf = app.performance();\n     * // The above is shorthand for:\n     * // const perf = firebase.performance(app);\n     * ```\n     */\n    performance(): firebase.performance.Performance;\n    /**\n     * Gets the {@link firebase.remoteConfig.RemoteConfig `RemoteConfig`} instance.\n     *\n     * The Remote Config SDK does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * const rc = app.remoteConfig();\n     * // The above is shorthand for:\n     * // const rc = firebase.remoteConfig(app);\n     * ```\n     */\n    remoteConfig(): firebase.remoteConfig.RemoteConfig;\n    /**\n     * Gets the {@link firebase.analytics.Analytics `Analytics`} service for the\n     * current app. If the current app is not the default one, throws an error.\n     *\n     * The Analytics SDK does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * const analytics = app.analytics();\n     * // The above is shorthand for:\n     * // const analytics = firebase.analytics(app);\n     * ```\n     */\n    analytics(): firebase.analytics.Analytics;\n    appCheck(): firebase.appCheck.AppCheck;\n  }\n}\n\n/**\n * Firebase App Check does not work in a Node.js environment using `ReCaptchaV3Provider` or\n * `ReCaptchaEnterpriseProvider`, but can be used in Node.js if you use\n * `CustomProvider` and write your own attestation method.\n */\ndeclare namespace firebase.appCheck {\n  /**\n   * Result returned by\n   * {@link firebase.appCheck.AppCheck.getToken `firebase.appCheck().getToken()`}.\n   */\n  interface AppCheckTokenResult {\n    token: string;\n  }\n  /*\n   * reCAPTCHA v3 token provider.\n   */\n  class ReCaptchaV3Provider {\n    /**\n     * @param siteKey - reCAPTCHA v3 site key (public key).\n     */\n    constructor(siteKey: string);\n  }\n  /*\n   * reCAPTCHA Enterprise token provider.\n   */\n  class ReCaptchaEnterpriseProvider {\n    /**\n     * @param keyId - reCAPTCHA Enterprise key ID.\n     */\n    constructor(keyId: string);\n  }\n  /*\n   * Custom token provider.\n   */\n  class CustomProvider {\n    /**\n     * @param options - Options for creating the custom provider.\n     */\n    constructor(options: CustomProviderOptions);\n  }\n  /**\n   * Options when creating a CustomProvider.\n   */\n  interface CustomProviderOptions {\n    /**\n     * Function to get an App Check token through a custom provider\n     * service.\n     */\n    getToken: () => Promise<AppCheckToken>;\n  }\n\n  /**\n   * The Firebase AppCheck service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.appCheck `firebase.appCheck()`}.\n   */\n  export interface AppCheck {\n    /**\n     * Activate AppCheck\n     * @param provider This can be a `ReCaptchaV3Provider` instance,\n     * a `ReCaptchaEnterpriseProvider` instance, a `CustomProvider` instance,\n     * an object with a custom `getToken()` method, or a reCAPTCHA site key.\n     * @param isTokenAutoRefreshEnabled If true, the SDK automatically\n     * refreshes App Check tokens as needed. If undefined, defaults to the\n     * value of `app.automaticDataCollectionEnabled`, which defaults to\n     * false and can be set in the app config.\n     */\n    activate(\n      provider:\n        | ReCaptchaV3Provider\n        | ReCaptchaEnterpriseProvider\n        | CustomProvider\n        | AppCheckProvider\n        | { getToken: () => AppCheckToken }\n        | string,\n      isTokenAutoRefreshEnabled?: boolean,\n    ): void;\n\n    /**\n     *\n     * @param isTokenAutoRefreshEnabled If true, the SDK automatically\n     * refreshes App Check tokens as needed. This overrides any value set\n     * during `activate()`.\n     */\n    setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled: boolean): void;\n    /**\n     * Get the current App Check token. Attaches to the most recent\n     * in-flight request if one is present. Returns null if no token\n     * is present and no token requests are in-flight.\n     *\n     * @param forceRefresh - If true, will always try to fetch a fresh token.\n     * If false, will use a cached token if found in storage.\n     */\n    getToken(\n      forceRefresh?: boolean,\n    ): Promise<firebase.appCheck.AppCheckTokenResult>;\n\n    /**\n     * Registers a listener to changes in the token state. There can be more\n     * than one listener registered at the same time for one or more\n     * App Check instances. The listeners call back on the UI thread whenever\n     * the current token associated with this App Check instance changes.\n     *\n     * @param observer An object with `next`, `error`, and `complete`\n     * properties. `next` is called with an\n     * {@link firebase.appCheck.AppCheckTokenResult `AppCheckTokenResult`}\n     * whenever the token changes. `error` is optional and is called if an\n     * error is thrown by the listener (the `next` function). `complete`\n     * is unused, as the token stream is unending.\n     *\n     * @returns A function that unsubscribes this listener.\n     */\n    onTokenChanged(observer: {\n      next: (tokenResult: firebase.appCheck.AppCheckTokenResult) => void;\n      error?: (error: Error) => void;\n      complete?: () => void;\n    }): Unsubscribe;\n\n    /**\n     * Registers a listener to changes in the token state. There can be more\n     * than one listener registered at the same time for one or more\n     * App Check instances. The listeners call back on the UI thread whenever\n     * the current token associated with this App Check instance changes.\n     *\n     * @param onNext When the token changes, this function is called with aa\n     * {@link firebase.appCheck.AppCheckTokenResult `AppCheckTokenResult`}.\n     * @param onError Optional. Called if there is an error thrown by the\n     * listener (the `onNext` function).\n     * @param onCompletion Currently unused, as the token stream is unending.\n     * @returns A function that unsubscribes this listener.\n     */\n    onTokenChanged(\n      onNext: (tokenResult: firebase.appCheck.AppCheckTokenResult) => void,\n      onError?: (error: Error) => void,\n      onCompletion?: () => void,\n    ): Unsubscribe;\n  }\n\n  /**\n   * An App Check provider. This can be either the built-in reCAPTCHA\n   * provider or a custom provider. For more on custom providers, see\n   * https://firebase.google.com/docs/app-check/web-custom-provider\n   */\n  interface AppCheckProvider {\n    /**\n     * Returns an AppCheck token.\n     */\n    getToken(): Promise<AppCheckToken>;\n  }\n\n  /**\n   * The token returned from an {@link firebase.appCheck.AppCheckProvider `AppCheckProvider`}.\n   */\n  interface AppCheckToken {\n    /**\n     * The token string in JWT format.\n     */\n    readonly token: string;\n    /**\n     * The local timestamp after which the token will expire.\n     */\n    readonly expireTimeMillis: number;\n  }\n}\n\n/**\n * The Installations SDK does not work in a Node.js environment.\n */\ndeclare namespace firebase.installations {\n  /**\n   * The Firebase Installations service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.installations `firebase.installations()`}.\n   */\n  export interface Installations {\n    /**\n     * The {@link firebase.app.App app} associated with the `Installations` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = analytics.app;\n     * ```\n     */\n    app: firebase.app.App;\n    /**\n     * Creates a Firebase Installation if there isn't one for the app and\n     * returns the Installation ID.\n     *\n     * @return Firebase Installation ID\n     */\n    getId(): Promise<string>;\n\n    /**\n     * Returns an Authentication Token for the current Firebase Installation.\n     *\n     * @return Firebase Installation Authentication Token\n     */\n    getToken(forceRefresh?: boolean): Promise<string>;\n\n    /**\n     * Deletes the Firebase Installation and all associated data.\n     */\n    delete(): Promise<void>;\n\n    /**\n     * Sets a new callback that will get called when Installation ID changes.\n     * Returns an unsubscribe function that will remove the callback when called.\n     */\n    onIdChange(callback: (installationId: string) => void): () => void;\n  }\n}\n\n/**\n * The Performance SDK does not work in a Node.js environment.\n */\ndeclare namespace firebase.performance {\n  /**\n   * The Firebase Performance Monitoring service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.performance `firebase.performance()`}.\n   */\n  export interface Performance {\n    /**\n     * The {@link firebase.app.App app} associated with the `Performance` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = analytics.app;\n     * ```\n     */\n    app: firebase.app.App;\n    /**\n     * Creates an uninitialized instance of {@link firebase.performance.Trace `trace`} and returns\n     * it.\n     *\n     * @param traceName The name of the trace instance.\n     * @return The Trace instance.\n     */\n    trace(traceName: string): Trace;\n\n    /**\n     * Controls the logging of automatic traces and HTTP/S network monitoring.\n     */\n    instrumentationEnabled: boolean;\n    /**\n     * Controls the logging of custom traces.\n     */\n    dataCollectionEnabled: boolean;\n  }\n\n  export interface Trace {\n    /**\n     * Starts the timing for the {@link firebase.performance.Trace `trace`} instance.\n     */\n    start(): void;\n    /**\n     * Stops the timing of the {@link firebase.performance.Trace `trace`} instance and logs the\n     * data of the instance.\n     */\n    stop(): void;\n    /**\n     * Records a {@link firebase.performance.Trace `trace`} from given parameters. This provides a\n     * direct way to use {@link firebase.performance.Trace `trace`} without a need to start/stop.\n     * This is useful for use cases in which the {@link firebase.performance.Trace `trace`} cannot\n     * directly be used (e.g. if the duration was captured before the Performance SDK was loaded).\n     *\n     * @param startTime Trace start time since epoch in millisec.\n     * @param duration The duration of the trace in millisec.\n     * @param options An object which can optionally hold maps of custom metrics and\n     * custom attributes.\n     */\n    record(\n      startTime: number,\n      duration: number,\n      options?: {\n        metrics?: { [key: string]: number };\n        attributes?: { [key: string]: string };\n      },\n    ): void;\n    /**\n     * Adds to the value of a custom metric. If a custom metric with the provided name does not\n     * exist, it creates one with that name and the value equal to the given number.\n     *\n     * @param metricName The name of the custom metric.\n     * @param num The number to be added to the value of the custom metric. If not provided, it\n     * uses a default value of one.\n     */\n    incrementMetric(metricName: string, num?: number): void;\n    /**\n     * Sets the value of the specified custom metric to the given number regardless of whether\n     * a metric with that name already exists on the {@link firebase.performance.Trace `trace`}\n     * instance or not.\n     *\n     * @param metricName Name of the custom metric.\n     * @param num Value to of the custom metric.\n     */\n    putMetric(metricName: string, num: number): void;\n    /**\n     * Returns the value of the custom metric by that name. If a custom metric with that name does\n     * not exist returns zero.\n     *\n     * @param metricName Name of the custom metric.\n     */\n    getMetric(metricName: string): number;\n    /**\n     * Set a custom attribute of a {@link firebase.performance.Trace `trace`} to a certain value.\n     *\n     * @param attr Name of the custom attribute.\n     * @param value Value of the custom attribute.\n     */\n    putAttribute(attr: string, value: string): void;\n    /**\n     * Retrieves the value that the custom attribute is set to.\n     *\n     * @param attr Name of the custom attribute.\n     */\n    getAttribute(attr: string): string | undefined;\n    /**\n     * Removes the specified custom attribute from a {@link firebase.performance.Trace `trace`}\n     * instance.\n     *\n     * @param attr Name of the custom attribute.\n     */\n\n    removeAttribute(attr: string): void;\n    /**\n     * Returns a map of all custom attributes of a {@link firebase.performance.Trace `trace`}\n     * instance.\n     */\n    getAttributes(): { [key: string]: string };\n  }\n}\n\n/**\n * The Remote Config SDK does not work in a Node.js environment.\n */\ndeclare namespace firebase.remoteConfig {\n  /**\n   * The Firebase Remote Config service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.remoteConfig `firebase.remoteConfig()`}.\n   */\n  export interface RemoteConfig {\n    /**\n     * The {@link firebase.app.App app} associated with the `Performance` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = analytics.app;\n     * ```\n     */\n    app: firebase.app.App;\n    /**\n     * Defines configuration for the Remote Config SDK.\n     */\n    settings: Settings;\n\n    /**\n     * Object containing default values for configs.\n     */\n    defaultConfig: { [key: string]: string | number | boolean };\n\n    /**\n     * The Unix timestamp in milliseconds of the last <i>successful</i> fetch, or negative one if\n     * the {@link RemoteConfig} instance either hasn't fetched or initialization\n     * is incomplete.\n     */\n    fetchTimeMillis: number;\n\n    /**\n     * The status of the last fetch <i>attempt</i>.\n     */\n    lastFetchStatus: FetchStatus;\n\n    /**\n     * Makes the last fetched config available to the getters.\n     * Returns a promise which resolves to true if the current call activated the fetched configs.\n     * If the fetched configs were already activated, the promise will resolve to false.\n     */\n    activate(): Promise<boolean>;\n\n    /**\n     * Ensures the last activated config are available to the getters.\n     */\n    ensureInitialized(): Promise<void>;\n\n    /**\n     * Fetches and caches configuration from the Remote Config service.\n     */\n    fetch(): Promise<void>;\n\n    /**\n     * Performs fetch and activate operations, as a convenience.\n     * Returns a promise which resolves to true if the current call activated the fetched configs.\n     * If the fetched configs were already activated, the promise will resolve to false.\n     */\n    fetchAndActivate(): Promise<boolean>;\n\n    /**\n     * Gets all config.\n     */\n    getAll(): { [key: string]: Value };\n\n    /**\n     * Gets the value for the given key as a boolean.\n     *\n     * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n     */\n    getBoolean(key: string): boolean;\n\n    /**\n     * Gets the value for the given key as a number.\n     *\n     * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n     */\n    getNumber(key: string): number;\n\n    /**\n     * Gets the value for the given key as a String.\n     *\n     * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n     */\n    getString(key: string): string;\n\n    /**\n     * Gets the {@link Value} for the given key.\n     */\n    getValue(key: string): Value;\n\n    /**\n     * Defines the log level to use.\n     */\n    setLogLevel(logLevel: LogLevel): void;\n  }\n\n  /**\n   * Indicates the source of a value.\n   *\n   * <ul>\n   *   <li>\"static\" indicates the value was defined by a static constant.</li>\n   *   <li>\"default\" indicates the value was defined by default config.</li>\n   *   <li>\"remote\" indicates the value was defined by fetched config.</li>\n   * </ul>\n   */\n  export type ValueSource = \"static\" | \"default\" | \"remote\";\n\n  /**\n   * Wraps a value with metadata and type-safe getters.\n   */\n  export interface Value {\n    /**\n     * Gets the value as a boolean.\n     *\n     * The following values (case-insensitive) are interpreted as true:\n     * \"1\", \"true\", \"t\", \"yes\", \"y\", \"on\". Other values are interpreted as false.\n     */\n    asBoolean(): boolean;\n\n    /**\n     * Gets the value as a number. Comparable to calling <code>Number(value) || 0</code>.\n     */\n    asNumber(): number;\n\n    /**\n     * Gets the value as a string.\n     */\n    asString(): string;\n\n    /**\n     * Gets the {@link ValueSource} for the given key.\n     */\n    getSource(): ValueSource;\n  }\n\n  /**\n   * Defines configuration options for the Remote Config SDK.\n   */\n  export interface Settings {\n    /**\n     * Defines the maximum age in milliseconds of an entry in the config cache before\n     * it is considered stale. Defaults to 43200000 (Twelve hours).\n     */\n    minimumFetchIntervalMillis: number;\n\n    /**\n     * Defines the maximum amount of milliseconds to wait for a response when fetching\n     * configuration from the Remote Config server. Defaults to 60000 (One minute).\n     */\n    fetchTimeoutMillis: number;\n  }\n\n  /**\n   * Summarizes the outcome of the last attempt to fetch config from the Firebase Remote Config server.\n   *\n   * <ul>\n   *   <li>\"no-fetch-yet\" indicates the {@link RemoteConfig} instance has not yet attempted\n   *       to fetch config, or that SDK initialization is incomplete.</li>\n   *   <li>\"success\" indicates the last attempt succeeded.</li>\n   *   <li>\"failure\" indicates the last attempt failed.</li>\n   *   <li>\"throttle\" indicates the last attempt was rate-limited.</li>\n   * </ul>\n   */\n  export type FetchStatus = \"no-fetch-yet\" | \"success\" | \"failure\" | \"throttle\";\n\n  /**\n   * Defines levels of Remote Config logging.\n   */\n  export type LogLevel = \"debug\" | \"error\" | \"silent\";\n\n  /**\n   * This method provides two different checks:\n   *\n   * 1. Check if IndexedDB exists in the browser environment.\n   * 2. Check if the current browser context allows IndexedDB `open()` calls.\n   *\n   * It returns a `Promise` which resolves to true if a {@link RemoteConfig} instance\n   * can be initialized in this environment, or false if it cannot.\n   */\n  export function isSupported(): Promise<boolean>;\n}\n\ndeclare namespace firebase.functions {\n  /**\n   * An HttpsCallableResult wraps a single result from a function call.\n   */\n  export interface HttpsCallableResult {\n    readonly data: any;\n  }\n  /**\n   * An HttpsCallable is a reference to a \"callable\" http trigger in\n   * Google Cloud Functions.\n   */\n  export interface HttpsCallable {\n    (data?: any): Promise<HttpsCallableResult>;\n  }\n  export interface HttpsCallableOptions {\n    timeout?: number;\n  }\n  /**\n   * The Cloud Functions for Firebase service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.functions `firebase.functions()`}.\n   */\n  export class Functions {\n    private constructor();\n\n    /**\n     * Modify this instance to communicate with the Cloud Functions emulator.\n     *\n     * Note: this must be called before this instance has been used to do any operations.\n     *\n     * @param host The emulator host (ex: localhost)\n     * @param port The emulator port (ex: 5001)\n     */\n    useEmulator(host: string, port: number): void;\n\n    /**\n     * Changes this instance to point to a Cloud Functions emulator running\n     * locally. See https://firebase.google.com/docs/functions/local-emulator\n     *\n     * @deprecated Prefer the useEmulator(host, port) method.\n     * @param origin The origin of the local emulator, such as\n     * \"http://localhost:5005\".\n     */\n    useFunctionsEmulator(url: string): void;\n    /**\n     * Gets an `HttpsCallable` instance that refers to the function with the given\n     * name.\n     *\n     * @param name The name of the https callable function.\n     * @param options The options for this HttpsCallable instance.\n     * @return The `HttpsCallable` instance.\n     */\n    httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable;\n  }\n  /**\n   * The set of Firebase Functions status codes. The codes are the same at the\n   * ones exposed by gRPC here:\n   * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n   *\n   * Possible values:\n   * - 'cancelled': The operation was cancelled (typically by the caller).\n   * - 'unknown': Unknown error or an error from a different error domain.\n   * - 'invalid-argument': Client specified an invalid argument. Note that this\n   *   differs from 'failed-precondition'. 'invalid-argument' indicates\n   *   arguments that are problematic regardless of the state of the system\n   *   (e.g. an invalid field name).\n   * - 'deadline-exceeded': Deadline expired before operation could complete.\n   *   For operations that change the state of the system, this error may be\n   *   returned even if the operation has completed successfully. For example,\n   *   a successful response from a server could have been delayed long enough\n   *   for the deadline to expire.\n   * - 'not-found': Some requested document was not found.\n   * - 'already-exists': Some document that we attempted to create already\n   *   exists.\n   * - 'permission-denied': The caller does not have permission to execute the\n   *   specified operation.\n   * - 'resource-exhausted': Some resource has been exhausted, perhaps a\n   *   per-user quota, or perhaps the entire file system is out of space.\n   * - 'failed-precondition': Operation was rejected because the system is not\n   *   in a state required for the operation's execution.\n   * - 'aborted': The operation was aborted, typically due to a concurrency\n   *   issue like transaction aborts, etc.\n   * - 'out-of-range': Operation was attempted past the valid range.\n   * - 'unimplemented': Operation is not implemented or not supported/enabled.\n   * - 'internal': Internal errors. Means some invariants expected by\n   *   underlying system has been broken. If you see one of these errors,\n   *   something is very broken.\n   * - 'unavailable': The service is currently unavailable. This is most likely\n   *   a transient condition and may be corrected by retrying with a backoff.\n   * - 'data-loss': Unrecoverable data loss or corruption.\n   * - 'unauthenticated': The request does not have valid authentication\n   *   credentials for the operation.\n   */\n  export type FunctionsErrorCode =\n    | \"ok\"\n    | \"cancelled\"\n    | \"unknown\"\n    | \"invalid-argument\"\n    | \"deadline-exceeded\"\n    | \"not-found\"\n    | \"already-exists\"\n    | \"permission-denied\"\n    | \"resource-exhausted\"\n    | \"failed-precondition\"\n    | \"aborted\"\n    | \"out-of-range\"\n    | \"unimplemented\"\n    | \"internal\"\n    | \"unavailable\"\n    | \"data-loss\"\n    | \"unauthenticated\";\n  export interface HttpsError extends Error {\n    /**\n     * A standard error code that will be returned to the client. This also\n     * determines the HTTP status code of the response, as defined in code.proto.\n     */\n    readonly code: FunctionsErrorCode;\n    /**\n     * Extra data to be converted to JSON and included in the error response.\n     */\n    readonly details?: any;\n  }\n}\n\ndeclare namespace firebase.auth {\n  /**\n   * A utility class to parse email action URLs.\n   */\n  class ActionCodeURL {\n    private constructor();\n    /**\n     * The API key of the email action link.\n     */\n    apiKey: string;\n    /**\n     * The action code of the email action link.\n     */\n    code: string;\n    /**\n     * The continue URL of the email action link. Null if not provided.\n     */\n    continueUrl: string | null;\n    /**\n     * The language code of the email action link. Null if not provided.\n     */\n    languageCode: string | null;\n    /**\n     * The action performed by the email action link. It returns from one\n     * of the types from {@link firebase.auth.ActionCodeInfo}.\n     */\n    operation: firebase.auth.ActionCodeInfo.Operation;\n    /**\n     * Parses the email action link string and returns an ActionCodeURL object\n     * if the link is valid, otherwise returns null.\n     *\n     * @param link The email action link string.\n     * @return The ActionCodeURL object, or null if the link is invalid.\n     */\n    static parseLink(link: string): firebase.auth.ActionCodeURL | null;\n    /**\n     * The tenant ID of the email action link. Null if the email action\n     * is from the parent project.\n     */\n    tenantId: string | null;\n  }\n  /**\n   * A response from {@link firebase.auth.Auth.checkActionCode}.\n   */\n  interface ActionCodeInfo {\n    /**\n     * The data associated with the action code.\n     *\n     * For the `PASSWORD_RESET`, `VERIFY_EMAIL`, and `RECOVER_EMAIL` actions, this object\n     * contains an `email` field with the address the email was sent to.\n     *\n     * For the RECOVER_EMAIL action, which allows a user to undo an email address\n     * change, this object also contains a `previousEmail` field with the user account's\n     * current email address. After the action completes, the user's email address will\n     * revert to the value in the `email` field from the value in `previousEmail` field.\n     *\n     * For the VERIFY_AND_CHANGE_EMAIL action, which allows a user to verify the email\n     * before updating it, this object contains a `previousEmail` field with the user\n     * account's email address before updating. After the action completes, the user's\n     * email address will be updated to the value in the `email` field from the value\n     * in `previousEmail` field.\n     *\n     * For the REVERT_SECOND_FACTOR_ADDITION action, which allows a user to unenroll\n     * a newly added second factor, this object contains a `multiFactorInfo` field with\n     * the information about the second factor. For phone second factor, the\n     * `multiFactorInfo` is a {@link firebase.auth.PhoneMultiFactorInfo} object,\n     * which contains the phone number.\n     */\n    data: {\n      email?: string | null;\n      /**\n       * @deprecated\n       * This field is deprecated in favor of previousEmail.\n       */\n      fromEmail?: string | null;\n      multiFactorInfo?: firebase.auth.MultiFactorInfo | null;\n      previousEmail?: string | null;\n    };\n    /**\n     * The type of operation that generated the action code. This could be:\n     * <ul>\n     * <li>`EMAIL_SIGNIN`: email sign in code generated via\n     *     {@link firebase.auth.Auth.sendSignInLinkToEmail}.</li>\n     * <li>`PASSWORD_RESET`: password reset code generated via\n     *     {@link firebase.auth.Auth.sendPasswordResetEmail}.</li>\n     * <li>`RECOVER_EMAIL`: email change revocation code generated via\n     *     {@link firebase.User.updateEmail}.</li>\n     * <li>`REVERT_SECOND_FACTOR_ADDITION`: revert second factor addition\n     *     code generated via\n     *     {@link firebase.User.MultiFactorUser.enroll}.</li>\n     * <li>`VERIFY_AND_CHANGE_EMAIL`: verify and change email code generated\n     *     via {@link firebase.User.verifyBeforeUpdateEmail}.</li>\n     * <li>`VERIFY_EMAIL`: email verification code generated via\n     *     {@link firebase.User.sendEmailVerification}.</li>\n     * </ul>\n     */\n    operation: string;\n  }\n\n  /**\n   * This is the interface that defines the required continue/state URL with\n   * optional Android and iOS bundle identifiers.\n   * The action code setting fields are:\n   * <ul>\n   * <li><p>url: Sets the link continue/state URL, which has different meanings\n   *     in different contexts:</p>\n   *     <ul>\n   *     <li>When the link is handled in the web action widgets, this is the deep\n   *         link in the continueUrl query parameter.</li>\n   *     <li>When the link is handled in the app directly, this is the continueUrl\n   *         query parameter in the deep link of the Dynamic Link.</li>\n   *     </ul>\n   *     </li>\n   * <li>iOS: Sets the iOS bundle ID. This will try to open the link in an iOS app\n   *     if it is installed.</li>\n   * <li>android: Sets the Android package name. This will try to open the link in\n   *     an android app if it is installed. If installApp is passed, it specifies\n   *     whether to install the Android app if the device supports it and the app\n   *     is not already installed. If this field is provided without a\n   *     packageName, an error is thrown explaining that the packageName must be\n   *     provided in conjunction with this field.\n   *     If minimumVersion is specified, and an older version of the app is\n   *     installed, the user is taken to the Play Store to upgrade the app.</li>\n   * <li>handleCodeInApp: The default is false. When set to true, the action code\n   *     link will be be sent as a Universal Link or Android App Link and will be\n   *     opened by the app if installed. In the false case, the code will be sent\n   *     to the web widget first and then on continue will redirect to the app if\n   *     installed.</li>\n   * </ul>\n   */\n  type ActionCodeSettings = {\n    android?: {\n      installApp?: boolean;\n      minimumVersion?: string;\n      packageName: string;\n    };\n    handleCodeInApp?: boolean;\n    iOS?: { bundleId: string };\n    url: string;\n    dynamicLinkDomain?: string;\n  };\n\n  /**\n   * A structure containing additional user information from a federated identity\n   * provider.\n   */\n  type AdditionalUserInfo = {\n    isNewUser: boolean;\n    profile: Object | null;\n    providerId: string;\n    username?: string | null;\n  };\n\n  /**\n   * A verifier for domain verification and abuse prevention. Currently, the\n   * only implementation is {@link firebase.auth.RecaptchaVerifier}.\n   */\n  interface ApplicationVerifier {\n    /**\n     * Identifies the type of application verifier (e.g. \"recaptcha\").\n     */\n    type: string;\n    /**\n     * Executes the verification process.\n     * @return A Promise for a token that can be used to\n     *     assert the validity of a request.\n     */\n    verify(): Promise<string>;\n  }\n\n  /**\n   * Interface representing an Auth instance's settings, currently used for\n   * enabling/disabling app verification for phone Auth testing.\n   */\n  interface AuthSettings {\n    /**\n     * When set, this property disables app verification for the purpose of testing\n     * phone authentication. For this property to take effect, it needs to be set\n     * before rendering a reCAPTCHA app verifier. When this is disabled, a\n     * mock reCAPTCHA is rendered instead. This is useful for manual testing during\n     * development or for automated integration tests.\n     *\n     * In order to use this feature, you will need to\n     * {@link https://firebase.google.com/docs/auth/web/phone-auth#test-with-whitelisted-phone-numbers\n     * whitelist your phone number} via the\n     * Firebase Console.\n     *\n     * The default value is false (app verification is enabled).\n     */\n    appVerificationDisabledForTesting: boolean;\n  }\n\n  /**\n   * Interface representing the Auth config.\n   *\n   * @public\n   */\n  export interface Config {\n    /**\n     * The API Key used to communicate with the Firebase Auth backend.\n     */\n    apiKey: string;\n    /**\n     * The host at which the Firebase Auth backend is running.\n     */\n    apiHost: string;\n    /**\n     * The scheme used to communicate with the Firebase Auth backend.\n     */\n    apiScheme: string;\n    /**\n     * The host at which the Secure Token API is running.\n     */\n    tokenApiHost: string;\n    /**\n     * The SDK Client Version.\n     */\n    sdkClientVersion: string;\n    /**\n     * The domain at which the web widgets are hosted (provided via Firebase Config).\n     */\n    authDomain?: string;\n  }\n\n  /**\n   * Configuration of Firebase Authentication Emulator.\n   */\n  export interface EmulatorConfig {\n    /**\n     * The protocol used to communicate with the emulator (\"http\"/\"https\").\n     */\n    readonly protocol: string;\n    /**\n     * The hostname of the emulator, which may be a domain (\"localhost\"), IPv4 address (\"127.0.0.1\")\n     * or quoted IPv6 address (\"[::1]\").\n     */\n    readonly host: string;\n    /**\n     * The port of the emulator, or null if port isn't specified (i.e. protocol default).\n     */\n    readonly port: number | null;\n    /**\n     * The emulator-specific options.\n     */\n    readonly options: {\n      /**\n       * Whether the warning banner attached to the DOM was disabled.\n       */\n      readonly disableWarnings: boolean;\n    };\n  }\n\n  /**\n   * The Firebase Auth service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.auth `firebase.auth()`}.\n   *\n   * See\n   * {@link https://firebase.google.com/docs/auth/ Firebase Authentication}\n   * for a full guide on how to use the Firebase Auth service.\n   *\n   */\n  interface Auth {\n    /** The name of the app associated with the Auth service instance. */\n    readonly name: string;\n    /** The config used to initialize this instance. */\n    readonly config: Config;\n    /** The current emulator configuration (or null). */\n    readonly emulatorConfig: EmulatorConfig | null;\n    /**\n     * The {@link firebase.app.App app} associated with the `Auth` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = auth.app;\n     * ```\n     */\n    app: firebase.app.App;\n    /**\n     * Applies a verification code sent to the user by email or other out-of-band\n     * mechanism.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/expired-action-code</dt>\n     * <dd>Thrown if the action code has expired.</dd>\n     * <dt>auth/invalid-action-code</dt>\n     * <dd>Thrown if the action code is invalid. This can happen if the code is\n     *     malformed or has already been used.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given action code has been\n     *     disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if there is no user corresponding to the action code. This may\n     *     have happened if the user was deleted between when the action code was\n     *     issued and when this method was called.</dd>\n     * </dl>\n     *\n     * @param code A verification code sent to the user.\n     */\n    applyActionCode(code: string): Promise<void>;\n    /**\n     * Checks a verification code sent to the user by email or other out-of-band\n     * mechanism.\n     *\n     * Returns metadata about the code.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/expired-action-code</dt>\n     * <dd>Thrown if the action code has expired.</dd>\n     * <dt>auth/invalid-action-code</dt>\n     * <dd>Thrown if the action code is invalid. This can happen if the code is\n     *     malformed or has already been used.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given action code has been\n     *     disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if there is no user corresponding to the action code. This may\n     *     have happened if the user was deleted between when the action code was\n     *     issued and when this method was called.</dd>\n     * </dl>\n     *\n     * @param code A verification code sent to the user.\n     */\n    checkActionCode(code: string): Promise<firebase.auth.ActionCodeInfo>;\n    /**\n     * Completes the password reset process, given a confirmation code and new\n     * password.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/expired-action-code</dt>\n     * <dd>Thrown if the password reset code has expired.</dd>\n     * <dt>auth/invalid-action-code</dt>\n     * <dd>Thrown if the password reset code is invalid. This can happen if the\n     *     code is malformed or has already been used.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given password reset code has\n     *     been disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if there is no user corresponding to the password reset code. This\n     *     may have happened if the user was deleted between when the code was\n     *     issued and when this method was called.</dd>\n     * <dt>auth/weak-password</dt>\n     * <dd>Thrown if the new password is not strong enough.</dd>\n     * </dl>\n     *\n     * @param code The confirmation code send via email to the user.\n     * @param newPassword The new password.\n     */\n    confirmPasswordReset(code: string, newPassword: string): Promise<void>;\n\n    /**\n     * Creates a new user account associated with the specified email address and\n     * password.\n     *\n     * On successful creation of the user account, this user will also be\n     * signed in to your application.\n     *\n     * User account creation can fail if the account already exists or the password\n     * is invalid.\n     *\n     * Note: The email address acts as a unique identifier for the user and\n     * enables an email-based password reset.  This function will create\n     * a new user account and set the initial user password.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/email-already-in-use</dt>\n     * <dd>Thrown if there already exists an account with the given email\n     *     address.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email address is not valid.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if email/password accounts are not enabled. Enable email/password\n     *     accounts in the Firebase Console, under the Auth tab.</dd>\n     * <dt>auth/weak-password</dt>\n     * <dd>Thrown if the password is not strong enough.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().createUserWithEmailAndPassword(email, password)\n     *     .catch(function(error) {\n     *   // Handle Errors here.\n     *   var errorCode = error.code;\n     *   var errorMessage = error.message;\n     *   if (errorCode == 'auth/weak-password') {\n     *     alert('The password is too weak.');\n     *   } else {\n     *     alert(errorMessage);\n     *   }\n     *   console.log(error);\n     * });\n     * ```\n     * @param email The user's email address.\n     * @param password The user's chosen password.\n     */\n    createUserWithEmailAndPassword(\n      email: string,\n      password: string,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * The currently signed-in user (or null).\n     */\n    currentUser: firebase.User | null;\n\n    /**\n     * Gets the list of possible sign in methods for the given email address. This\n     * is useful to differentiate methods of sign-in for the same provider,\n     * eg. `EmailAuthProvider` which has 2 methods of sign-in, email/password and\n     * email/link.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email address is not valid.</dd>\n     * </dl>\n     */\n    fetchSignInMethodsForEmail(email: string): Promise<Array<string>>;\n\n    /**\n     * Checks if an incoming link is a sign-in with email link.\n     */\n    isSignInWithEmailLink(emailLink: string): boolean;\n    /**\n     * Returns a UserCredential from the redirect-based sign-in flow.\n     *\n     * If sign-in succeeded, returns the signed in user. If sign-in was\n     * unsuccessful, fails with an error. If no redirect operation was called, returns `null`.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/account-exists-with-different-credential</dt>\n     * <dd>Thrown if there already exists an account with the email address\n     *     asserted by the credential. Resolve this by calling\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} with the error.email\n     *     and then asking the user to sign in using one of the returned providers.\n     *     Once the user is signed in, the original credential retrieved from the\n     *     error.credential can be linked to the user with\n     *     {@link firebase.User.linkWithCredential} to prevent the user from signing\n     *     in again to the original provider via popup or redirect. If you are using\n     *     redirects for sign in, save the credential in session storage and then\n     *     retrieve on redirect and repopulate the credential using for example\n     *     {@link firebase.auth.GoogleAuthProvider.credential} depending on the\n     *     credential provider id and complete the link.</dd>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/credential-already-in-use</dt>\n     * <dd>Thrown if the account corresponding to the credential already exists\n     *     among your users, or is already linked to a Firebase User.\n     *     For example, this error could be thrown if you are upgrading an anonymous\n     *     user to a Google user by linking a Google credential to it and the Google\n     *     credential used is already associated with an existing Firebase Google\n     *     user.\n     *     An <code>error.email</code> and <code>error.credential</code>\n     *     ({@link firebase.auth.AuthCredential}) fields are also provided. You can\n     *     recover from this error by signing in with that credential directly via\n     *     {@link firebase.auth.Auth.signInWithCredential}.</dd>\n     * <dt>auth/email-already-in-use</dt>\n     * <dd>Thrown if the email corresponding to the credential already exists\n     *     among your users. When thrown while linking a credential to an existing\n     *     user, an <code>error.email</code> and <code>error.credential</code>\n     *     ({@link firebase.auth.AuthCredential}) fields are also provided.\n     *     You have to link the credential to the existing user with that email if\n     *     you wish to continue signing in with that credential. To do so, call\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to\n     *     <code>error.email</code> via one of the providers returned and then\n     *     {@link firebase.User.linkWithCredential} the original credential to that\n     *     newly signed in user.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if the type of account corresponding to the credential\n     *     is not enabled. Enable the account type in the Firebase Console, under\n     *     the Auth tab.</dd>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dt>auth/timeout</dt>\n     * <dd>Thrown typically if the app domain is not authorized for OAuth operations\n     *     for your Firebase project. Edit the list of authorized domains from the\n     *     Firebase console.</dd>\n     * </dl>\n     *\n     * This method does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * // First, we perform the signInWithRedirect.\n     * // Creates the provider object.\n     * var provider = new firebase.auth.FacebookAuthProvider();\n     * // You can add additional scopes to the provider:\n     * provider.addScope('email');\n     * provider.addScope('user_friends');\n     * // Sign in with redirect:\n     * auth.signInWithRedirect(provider)\n     * ////////////////////////////////////////////////////////////\n     * // The user is redirected to the provider's sign in flow...\n     * ////////////////////////////////////////////////////////////\n     * // Then redirected back to the app, where we check the redirect result:\n     * auth.getRedirectResult().then(function(result) {\n     *   // The firebase.User instance:\n     *   var user = result.user;\n     *   // The Facebook firebase.auth.AuthCredential containing the Facebook\n     *   // access token:\n     *   var credential = result.credential;\n     *   // As this API can be used for sign-in, linking and reauthentication,\n     *   // check the operationType to determine what triggered this redirect\n     *   // operation.\n     *   var operationType = result.operationType;\n     * }, function(error) {\n     *   // The provider's account email, can be used in case of\n     *   // auth/account-exists-with-different-credential to fetch the providers\n     *   // linked to the email:\n     *   var email = error.email;\n     *   // The provider's credential:\n     *   var credential = error.credential;\n     *   // In case of auth/account-exists-with-different-credential error,\n     *   // you can fetch the providers using this:\n     *   if (error.code === 'auth/account-exists-with-different-credential') {\n     *     auth.fetchSignInMethodsForEmail(email).then(function(providers) {\n     *       // The returned 'providers' is a list of the available providers\n     *       // linked to the email address. Please refer to the guide for a more\n     *       // complete explanation on how to recover from this error.\n     *     });\n     *   }\n     * });\n     * ```\n     */\n    getRedirectResult(): Promise<firebase.auth.UserCredential>;\n    /**\n     * The current Auth instance's language code. This is a readable/writable\n     * property. When set to null, the default Firebase Console language setting\n     * is applied. The language code will propagate to email action templates\n     * (password reset, email verification and email change revocation), SMS\n     * templates for phone authentication, reCAPTCHA verifier and OAuth\n     * popup/redirect operations provided the specified providers support\n     * localization with the language code specified.\n     */\n    languageCode: string | null;\n    /**\n     * The current Auth instance's settings. This is used to edit/read configuration\n     * related options like app verification mode for phone authentication.\n     */\n    settings: firebase.auth.AuthSettings;\n    /**\n     * Adds an observer for changes to the user's sign-in state.\n     *\n     * Prior to 4.0.0, this triggered the observer when users were signed in,\n     * signed out, or when the user's ID token changed in situations such as token\n     * expiry or password change. After 4.0.0, the observer is only triggered\n     * on sign-in or sign-out.\n     *\n     * To keep the old behavior, see {@link firebase.auth.Auth.onIdTokenChanged}.\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().onAuthStateChanged(function(user) {\n     *   if (user) {\n     *     // User is signed in.\n     *   }\n     * });\n     * ```\n     */\n    onAuthStateChanged(\n      nextOrObserver:\n        | firebase.Observer<any>\n        | ((a: firebase.User | null) => any),\n      error?: (a: firebase.auth.Error) => any,\n      completed?: firebase.Unsubscribe,\n    ): firebase.Unsubscribe;\n    /**\n     * Adds an observer for changes to the signed-in user's ID token, which includes\n     * sign-in, sign-out, and token refresh events. This method has the same\n     * behavior as {@link firebase.auth.Auth.onAuthStateChanged} had prior to 4.0.0.\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().onIdTokenChanged(function(user) {\n     *   if (user) {\n     *     // User is signed in or token was refreshed.\n     *   }\n     * });\n     * ```\n     * @param\n     *     nextOrObserver An observer object or a function triggered on change.\n     * @param error Optional A function\n     *     triggered on auth error.\n     * @param completed Optional A function triggered when the\n     *     observer is removed.\n     */\n    onIdTokenChanged(\n      nextOrObserver:\n        | firebase.Observer<any>\n        | ((a: firebase.User | null) => any),\n      error?: (a: firebase.auth.Error) => any,\n      completed?: firebase.Unsubscribe,\n    ): firebase.Unsubscribe;\n    /**\n     * Sends a sign-in email link to the user with the specified email.\n     *\n     * The sign-in operation has to always be completed in the app unlike other out\n     * of band email actions (password reset and email verifications). This is\n     * because, at the end of the flow, the user is expected to be signed in and\n     * their Auth state persisted within the app.\n     *\n     * To complete sign in with the email link, call\n     * {@link firebase.auth.Auth.signInWithEmailLink} with the email address and\n     * the email link supplied in the email sent to the user.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/argument-error</dt>\n     * <dd>Thrown if handleCodeInApp is false.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email address is not valid.</dd>\n     * <dt>auth/missing-android-pkg-name</dt>\n     * <dd>An Android package name must be provided if the Android app is required\n     *     to be installed.</dd>\n     * <dt>auth/missing-continue-uri</dt>\n     * <dd>A continue URL must be provided in the request.</dd>\n     * <dt>auth/missing-ios-bundle-id</dt>\n     * <dd>An iOS Bundle ID must be provided if an App Store ID is provided.</dd>\n     * <dt>auth/invalid-continue-uri</dt>\n     * <dd>The continue URL provided in the request is invalid.</dd>\n     * <dt>auth/unauthorized-continue-uri</dt>\n     * <dd>The domain of the continue URL is not whitelisted. Whitelist\n     *     the domain in the Firebase console.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   // The URL to redirect to for sign-in completion. This is also the deep\n     *   // link for mobile redirects. The domain (www.example.com) for this URL\n     *   // must be whitelisted in the Firebase Console.\n     *   url: 'https://www.example.com/finishSignUp?cartId=1234',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   // This must be true.\n     *   handleCodeInApp: true\n     * };\n     * firebase.auth().sendSignInLinkToEmail('user@example.com', actionCodeSettings)\n     *     .then(function() {\n     *       // The link was successfully sent. Inform the user. Save the email\n     *       // locally so you don't need to ask the user for it again if they open\n     *       // the link on the same device.\n     *     })\n     *     .catch(function(error) {\n     *       // Some error occurred, you can inspect the code: error.code\n     *     });\n     * ```\n     * @param email The email account to sign in with.\n     * @param actionCodeSettings The action\n     *     code settings. The action code settings which provides Firebase with\n     *     instructions on how to construct the email link. This includes the\n     *     sign in completion URL or the deep link for mobile redirects, the mobile\n     *     apps to use when the sign-in link is opened on an Android or iOS device.\n     *     Mobile app redirects will only be applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of condition.\n     *     The Android package name and iOS bundle ID will be respected only if they\n     *     are configured in the same Firebase Auth project used.\n     */\n    sendSignInLinkToEmail(\n      email: string,\n      actionCodeSettings: firebase.auth.ActionCodeSettings,\n    ): Promise<void>;\n\n    /**\n     * Sends a password reset email to the given email address.\n     *\n     * To complete the password reset, call\n     * {@link firebase.auth.Auth.confirmPasswordReset} with the code supplied in the\n     * email sent to the user, along with the new password specified by the user.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email address is not valid.</dd>\n     * <dt>auth/missing-android-pkg-name</dt>\n     * <dd>An Android package name must be provided if the Android app is required\n     *     to be installed.</dd>\n     * <dt>auth/missing-continue-uri</dt>\n     * <dd>A continue URL must be provided in the request.</dd>\n     * <dt>auth/missing-ios-bundle-id</dt>\n     * <dd>An iOS Bundle ID must be provided if an App Store ID is provided.</dd>\n     * <dt>auth/invalid-continue-uri</dt>\n     * <dd>The continue URL provided in the request is invalid.</dd>\n     * <dt>auth/unauthorized-continue-uri</dt>\n     * <dd>The domain of the continue URL is not whitelisted. Whitelist\n     *     the domain in the Firebase console.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if there is no user corresponding to the email address.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   url: 'https://www.example.com/?email=user@example.com',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   handleCodeInApp: true\n     * };\n     * firebase.auth().sendPasswordResetEmail(\n     *     'user@example.com', actionCodeSettings)\n     *     .then(function() {\n     *       // Password reset email sent.\n     *     })\n     *     .catch(function(error) {\n     *       // Error occurred. Inspect error.code.\n     *     });\n     * ```\n     *\n     * @param email The email address with the password to be reset.\n     * @param actionCodeSettings The action\n     *     code settings. If specified, the state/continue URL will be set as the\n     *     \"continueUrl\" parameter in the password reset link. The default password\n     *     reset landing page will use this to display a link to go back to the app\n     *     if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is whitelisted by the\n     *     developer in the console. Otherwise an error will be thrown.\n     *     Mobile app redirects will only be applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of condition.\n     *     The Android package name and iOS bundle ID will be respected only if they\n     *     are configured in the same Firebase Auth project used.\n     */\n    sendPasswordResetEmail(\n      email: string,\n      actionCodeSettings?: firebase.auth.ActionCodeSettings | null,\n    ): Promise<void>;\n\n    /**\n     * Changes the current type of persistence on the current Auth instance for the\n     * currently saved Auth session and applies this type of persistence for\n     * future sign-in requests, including sign-in with redirect requests. This will\n     * return a promise that will resolve once the state finishes copying from one\n     * type of storage to the other.\n     * Calling a sign-in method after changing persistence will wait for that\n     * persistence change to complete before applying it on the new Auth state.\n     *\n     * This makes it easy for a user signing in to specify whether their session\n     * should be remembered or not. It also makes it easier to never persist the\n     * Auth state for applications that are shared by other users or have sensitive\n     * data.\n     *\n     * The default for web browser apps and React Native apps is 'local' (provided\n     * the browser supports this mechanism) whereas it is 'none' for Node.js backend\n     * apps.\n     *\n     * <h4>Error Codes (thrown synchronously)</h4>\n     * <dl>\n     * <dt>auth/invalid-persistence-type</dt>\n     * <dd>Thrown if the specified persistence type is invalid.</dd>\n     * <dt>auth/unsupported-persistence-type</dt>\n     * <dd>Thrown if the current environment does not support the specified\n     *     persistence type.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\n     *     .then(function() {\n     *   // Existing and future Auth states are now persisted in the current\n     *   // session only. Closing the window would clear any existing state even if\n     *   // a user forgets to sign out.\n     * });\n     * ```\n     */\n    setPersistence(persistence: firebase.auth.Auth.Persistence): Promise<void>;\n\n    /**\n     * Asynchronously signs in with the given credentials, and returns any available\n     * additional user information, such as user name.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/account-exists-with-different-credential</dt>\n     * <dd>Thrown if there already exists an account with the email address\n     *     asserted by the credential. Resolve this by calling\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} and then asking the\n     *     user to sign in using one of the returned providers. Once the user is\n     *     signed in, the original credential can be linked to the user with\n     *     {@link firebase.User.linkWithCredential}.</dd>\n     * <dt>auth/invalid-credential</dt>\n     * <dd>Thrown if the credential is malformed or has expired.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if the type of account corresponding to the credential\n     *     is not enabled. Enable the account type in the Firebase Console, under\n     *     the Auth tab.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given credential has been\n     *     disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if signing in with a credential from\n     *     {@link firebase.auth.EmailAuthProvider.credential} and there is no user\n     *     corresponding to the given email. </dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if signing in with a credential from\n     *     {@link firebase.auth.EmailAuthProvider.credential} and the password is\n     *     invalid for the given email, or if the account corresponding to the email\n     *     does not have a password set.</dd>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification\n     *     ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @deprecated\n     * This method is deprecated. Use\n     * {@link firebase.auth.Auth.signInWithCredential} instead.\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().signInAndRetrieveDataWithCredential(credential)\n     *     .then(function(userCredential) {\n     *       console.log(userCredential.additionalUserInfo.username);\n     *     });\n     * ```\n     * @param credential The auth credential.\n     */\n    signInAndRetrieveDataWithCredential(\n      credential: firebase.auth.AuthCredential,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Asynchronously signs in as an anonymous user.\n     *\n     *\n     * If there is already an anonymous user signed in, that user will be returned;\n     * otherwise, a new anonymous user identity will be created and returned.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if anonymous accounts are not enabled. Enable anonymous accounts\n     *     in the Firebase Console, under the Auth tab.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().signInAnonymously().catch(function(error) {\n     *   // Handle Errors here.\n     *   var errorCode = error.code;\n     *   var errorMessage = error.message;\n     *\n     *   if (errorCode === 'auth/operation-not-allowed') {\n     *     alert('You must enable Anonymous auth in the Firebase Console.');\n     *   } else {\n     *     console.error(error);\n     *   }\n     * });\n     * ```\n     */\n    signInAnonymously(): Promise<firebase.auth.UserCredential>;\n\n    /**\n     * Asynchronously signs in with the given credentials.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/account-exists-with-different-credential</dt>\n     * <dd>Thrown if there already exists an account with the email address\n     *     asserted by the credential. Resolve this by calling\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} and then asking the\n     *     user to sign in using one of the returned providers. Once the user is\n     *     signed in, the original credential can be linked to the user with\n     *     {@link firebase.User.linkWithCredential}.</dd>\n     * <dt>auth/invalid-credential</dt>\n     * <dd>Thrown if the credential is malformed or has expired.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if the type of account corresponding to the credential\n     *     is not enabled. Enable the account type in the Firebase Console, under\n     *     the Auth tab.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given credential has been\n     *     disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if signing in with a credential from\n     *     {@link firebase.auth.EmailAuthProvider.credential} and there is no user\n     *     corresponding to the given email. </dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if signing in with a credential from\n     *     {@link firebase.auth.EmailAuthProvider.credential} and the password is\n     *     invalid for the given email, or if the account corresponding to the email\n     *     does not have a password set.</dd>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     code of the credential is not valid.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification\n     *     ID of the credential is not valid.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().signInWithCredential(credential).catch(function(error) {\n     *   // Handle Errors here.\n     *   var errorCode = error.code;\n     *   var errorMessage = error.message;\n     *   // The email of the user's account used.\n     *   var email = error.email;\n     *   // The firebase.auth.AuthCredential type that was used.\n     *   var credential = error.credential;\n     *   if (errorCode === 'auth/account-exists-with-different-credential') {\n     *     alert('Email already associated with another account.');\n     *     // Handle account linking here, if using.\n     *   } else {\n     *     console.error(error);\n     *   }\n     *  });\n     * ```\n     *\n     * @param credential The auth credential.\n     */\n    signInWithCredential(\n      credential: firebase.auth.AuthCredential,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Asynchronously signs in using a custom token.\n     *\n     * Custom tokens are used to integrate Firebase Auth with existing auth systems,\n     * and must be generated by the auth backend.\n     *\n     * Fails with an error if the token is invalid, expired, or not accepted by the\n     * Firebase Auth service.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/custom-token-mismatch</dt>\n     * <dd>Thrown if the custom token is for a different Firebase App.</dd>\n     * <dt>auth/invalid-custom-token</dt>\n     * <dd>Thrown if the custom token format is incorrect.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().signInWithCustomToken(token).catch(function(error) {\n     *   // Handle Errors here.\n     *   var errorCode = error.code;\n     *   var errorMessage = error.message;\n     *   if (errorCode === 'auth/invalid-custom-token') {\n     *     alert('The token you provided is not valid.');\n     *   } else {\n     *     console.error(error);\n     *   }\n     * });\n     * ```\n     *\n     * @param token The custom token to sign in with.\n     */\n    signInWithCustomToken(token: string): Promise<firebase.auth.UserCredential>;\n    /**\n     * Asynchronously signs in using an email and password.\n     *\n     * Fails with an error if the email address and password do not match.\n     *\n     * Note: The user's password is NOT the password used to access the user's email\n     * account. The email address serves as a unique identifier for the user, and\n     * the password is used to access the user's account in your Firebase project.\n     *\n     * See also: {@link firebase.auth.Auth.createUserWithEmailAndPassword}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email address is not valid.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given email has been\n     *     disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if there is no user corresponding to the given email.</dd>\n     * <dt>auth/wrong-password</dt>\n     * <dd>Thrown if the password is invalid for the given email, or the account\n     *     corresponding to the email does not have a password set.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().signInWithEmailAndPassword(email, password)\n     *     .catch(function(error) {\n     *   // Handle Errors here.\n     *   var errorCode = error.code;\n     *   var errorMessage = error.message;\n     *   if (errorCode === 'auth/wrong-password') {\n     *     alert('Wrong password.');\n     *   } else {\n     *     alert(errorMessage);\n     *   }\n     *   console.log(error);\n     * });\n     * ```\n     *\n     * @param email The users email address.\n     * @param password The users password.\n     */\n    signInWithEmailAndPassword(\n      email: string,\n      password: string,\n    ): Promise<firebase.auth.UserCredential>;\n\n    /**\n     * Asynchronously signs in using a phone number. This method sends a code via\n     * SMS to the given phone number, and returns a\n     * {@link firebase.auth.ConfirmationResult}. After the user provides the code\n     * sent to their phone, call {@link firebase.auth.ConfirmationResult.confirm}\n     * with the code to sign the user in.\n     *\n     * For abuse prevention, this method also requires a\n     * {@link firebase.auth.ApplicationVerifier}. The Firebase Auth SDK includes\n     * a reCAPTCHA-based implementation, {@link firebase.auth.RecaptchaVerifier}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/captcha-check-failed</dt>\n     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if\n     *     this method was called from a non-whitelisted domain.</dd>\n     * <dt>auth/invalid-phone-number</dt>\n     * <dd>Thrown if the phone number has an invalid format.</dd>\n     * <dt>auth/missing-phone-number</dt>\n     * <dd>Thrown if the phone number is missing.</dd>\n     * <dt>auth/quota-exceeded</dt>\n     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given phone number has been\n     *     disabled.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go\n     *     to the Firebase Console for your project, in the Auth section and the\n     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * // 'recaptcha-container' is the ID of an element in the DOM.\n     * var applicationVerifier = new firebase.auth.RecaptchaVerifier(\n     *     'recaptcha-container');\n     * firebase.auth().signInWithPhoneNumber(phoneNumber, applicationVerifier)\n     *     .then(function(confirmationResult) {\n     *       var verificationCode = window.prompt('Please enter the verification ' +\n     *           'code that was sent to your mobile device.');\n     *       return confirmationResult.confirm(verificationCode);\n     *     })\n     *     .catch(function(error) {\n     *       // Handle Errors here.\n     *     });\n     * ```\n     *\n     * @param phoneNumber The user's phone number in E.164 format (e.g.\n     *     +16505550101).\n     * @param applicationVerifier\n     */\n    signInWithPhoneNumber(\n      phoneNumber: string,\n      applicationVerifier: firebase.auth.ApplicationVerifier,\n    ): Promise<firebase.auth.ConfirmationResult>;\n    /**\n     * Asynchronously signs in using an email and sign-in email link. If no link\n     * is passed, the link is inferred from the current URL.\n     *\n     * Fails with an error if the email address is invalid or OTP in email link\n     * expires.\n     *\n     * Note: Confirm the link is a sign-in email link before calling this method\n     * {@link firebase.auth.Auth.isSignInWithEmailLink}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/expired-action-code</dt>\n     * <dd>Thrown if OTP in email link expires.</dd>\n     * <dt>auth/invalid-email</dt>\n     * <dd>Thrown if the email address is not valid.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given email has been\n     *     disabled.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().signInWithEmailLink(email, emailLink)\n     *     .catch(function(error) {\n     *       // Some error occurred, you can inspect the code: error.code\n     *       // Common errors could be invalid email and invalid or expired OTPs.\n     *     });\n     * ```\n     *\n     * @param email The email account to sign in with.\n     * @param emailLink The optional link which contains the OTP needed\n     *     to complete the sign in with email link. If not specified, the current\n     *     URL is used instead.\n     */\n    signInWithEmailLink(\n      email: string,\n      emailLink?: string,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Authenticates a Firebase client using a popup-based OAuth authentication\n     * flow.\n     *\n     * If succeeds, returns the signed in user along with the provider's credential.\n     * If sign in was unsuccessful, returns an error object containing additional\n     * information about the error.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/account-exists-with-different-credential</dt>\n     * <dd>Thrown if there already exists an account with the email address\n     *     asserted by the credential. Resolve this by calling\n     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} with the error.email\n     *     and then asking the user to sign in using one of the returned providers.\n     *     Once the user is signed in, the original credential retrieved from the\n     *     error.credential can be linked to the user with\n     *     {@link firebase.User.linkWithCredential} to prevent the user from signing\n     *     in again to the original provider via popup or redirect. If you are using\n     *     redirects for sign in, save the credential in session storage and then\n     *     retrieve on redirect and repopulate the credential using for example\n     *     {@link firebase.auth.GoogleAuthProvider.credential} depending on the\n     *     credential provider id and complete the link.</dd>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/cancelled-popup-request</dt>\n     * <dd>Thrown if successive popup operations are triggered. Only one popup\n     *     request is allowed at one time. All the popups would fail with this error\n     *     except for the last one.</dd>\n     * <dt>auth/operation-not-allowed</dt>\n     * <dd>Thrown if the type of account corresponding to the credential\n     *     is not enabled. Enable the account type in the Firebase Console, under\n     *     the Auth tab.</dd>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dt>auth/popup-blocked</dt>\n     * <dd>Thrown if the popup was blocked by the browser, typically when this\n     *     operation is triggered outside of a click handler.</dd>\n     * <dt>auth/popup-closed-by-user</dt>\n     * <dd>Thrown if the popup window is closed by the user without completing the\n     *     sign in to the provider.</dd>\n     * <dt>auth/unauthorized-domain</dt>\n     * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n     *     Firebase project. Edit the list of authorized domains from the Firebase\n     *     console.</dd>\n     * </dl>\n     *\n     * This method does not work in a Node.js environment.\n     *\n     * @example\n     * ```javascript\n     * // Creates the provider object.\n     * var provider = new firebase.auth.FacebookAuthProvider();\n     * // You can add additional scopes to the provider:\n     * provider.addScope('email');\n     * provider.addScope('user_friends');\n     * // Sign in with popup:\n     * auth.signInWithPopup(provider).then(function(result) {\n     *   // The firebase.User instance:\n     *   var user = result.user;\n     *   // The Facebook firebase.auth.AuthCredential containing the Facebook\n     *   // access token:\n     *   var credential = result.credential;\n     * }, function(error) {\n     *   // The provider's account email, can be used in case of\n     *   // auth/account-exists-with-different-credential to fetch the providers\n     *   // linked to the email:\n     *   var email = error.email;\n     *   // The provider's credential:\n     *   var credential = error.credential;\n     *   // In case of auth/account-exists-with-different-credential error,\n     *   // you can fetch the providers using this:\n     *   if (error.code === 'auth/account-exists-with-different-credential') {\n     *     auth.fetchSignInMethodsForEmail(email).then(function(providers) {\n     *       // The returned 'providers' is a list of the available providers\n     *       // linked to the email address. Please refer to the guide for a more\n     *       // complete explanation on how to recover from this error.\n     *     });\n     *   }\n     * });\n     * ```\n     *\n     * @param provider The provider to authenticate.\n     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link\n     *     firebase.auth.EmailAuthProvider} will throw an error.\n     */\n    signInWithPopup(\n      provider: firebase.auth.AuthProvider,\n    ): Promise<firebase.auth.UserCredential>;\n    /**\n     * Authenticates a Firebase client using a full-page redirect flow. To handle\n     * the results and errors for this operation, refer to {@link\n     * firebase.auth.Auth.getRedirectResult}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/auth-domain-config-required</dt>\n     * <dd>Thrown if authDomain configuration is not provided when calling\n     *     firebase.initializeApp(). Check Firebase Console for instructions on\n     *     determining and passing that field.</dd>\n     * <dt>auth/operation-not-supported-in-this-environment</dt>\n     * <dd>Thrown if this operation is not supported in the environment your\n     *     application is running on. \"location.protocol\" must be http or https.\n     *     </dd>\n     * <dt>auth/unauthorized-domain</dt>\n     * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n     *     Firebase project. Edit the list of authorized domains from the Firebase\n     *     console.</dd>\n     * </dl>\n     *\n     * This method does not work in a Node.js environment.\n     *\n     * @param provider The provider to authenticate.\n     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link\n     *     firebase.auth.EmailAuthProvider} will throw an error.\n     */\n    signInWithRedirect(provider: firebase.auth.AuthProvider): Promise<void>;\n    /**\n     * Signs out the current user.\n     */\n    signOut(): Promise<void>;\n    /**\n     * The current Auth instance's tenant ID. This is a readable/writable\n     * property. When you set the tenant ID of an Auth instance, all future\n     * sign-in/sign-up operations will pass this tenant ID and sign in or\n     * sign up users to the specified tenant project.\n     * When set to null, users are signed in to the parent project. By default,\n     * this is set to null.\n     *\n     * @example\n     * ```javascript\n     * // Set the tenant ID on Auth instance.\n     * firebase.auth().tenantId = ‘TENANT_PROJECT_ID’;\n     *\n     * // All future sign-in request now include tenant ID.\n     * firebase.auth().signInWithEmailAndPassword(email, password)\n     *   .then(function(result) {\n     *     // result.user.tenantId should be ‘TENANT_PROJECT_ID’.\n     *   }).catch(function(error) {\n     *     // Handle error.\n     *   });\n     * ```\n     */\n    tenantId: string | null;\n    /**\n     * Asynchronously sets the provided user as `currentUser` on the current Auth\n     * instance. A new instance copy of the user provided will be made and set as\n     * `currentUser`.\n     *\n     * This will trigger {@link firebase.auth.Auth.onAuthStateChanged} and\n     * {@link firebase.auth.Auth.onIdTokenChanged} listeners like other sign in\n     * methods.\n     *\n     * The operation fails with an error if the user to be updated belongs to a\n     * different Firebase project.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-user-token</dt>\n     * <dd>Thrown if the user to be updated belongs to a different Firebase\n     *     project.</dd>\n     * <dt>auth/user-token-expired</dt>\n     * <dd>Thrown if the token of the user to be updated is expired.</dd>\n     * <dt>auth/null-user</dt>\n     * <dd>Thrown if the user to be updated is null.</dd>\n     * <dt>auth/tenant-id-mismatch</dt>\n     * <dd>Thrown if the provided user's tenant ID does not match the\n     *     underlying Auth instance's configured tenant ID</dd>\n     * </dl>\n     */\n    updateCurrentUser(user: firebase.User | null): Promise<void>;\n    /**\n     * Sets the current language to the default device/browser preference.\n     */\n    useDeviceLanguage(): void;\n    /**\n     * Modify this Auth instance to communicate with the Firebase Auth emulator.  This must be\n     * called synchronously immediately following the first call to `firebase.auth()`.  Do not use\n     * with production credentials as emulator traffic is not encrypted.\n     *\n     * @param url The URL at which the emulator is running (eg, 'http://localhost:9099')\n     */\n    useEmulator(url: string): void;\n    /**\n     * Checks a password reset code sent to the user by email or other out-of-band\n     * mechanism.\n     *\n     * Returns the user's email address if valid.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/expired-action-code</dt>\n     * <dd>Thrown if the password reset code has expired.</dd>\n     * <dt>auth/invalid-action-code</dt>\n     * <dd>Thrown if the password reset code is invalid. This can happen if the code\n     *     is malformed or has already been used.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given password reset code has\n     *     been disabled.</dd>\n     * <dt>auth/user-not-found</dt>\n     * <dd>Thrown if there is no user corresponding to the password reset code. This\n     *     may have happened if the user was deleted between when the code was\n     *     issued and when this method was called.</dd>\n     * </dl>\n     *\n     * @param code A verification code sent to the user.\n     */\n    verifyPasswordResetCode(code: string): Promise<string>;\n  }\n\n  /**\n   * Interface that represents the credentials returned by an auth provider.\n   * Implementations specify the details about each auth provider's credential\n   * requirements.\n   *\n   */\n  abstract class AuthCredential {\n    /**\n     * The authentication provider ID for the credential.\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId: string;\n    /**\n     * The authentication sign in method for the credential.\n     * For example, 'password', or 'emailLink. This corresponds to the sign-in\n     * method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    signInMethod: string;\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON(): Object;\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link firebase.auth.AuthCredential}. Input can be either Object or the\n     * stringified representation of the object. When string is provided,\n     * JSON.parse would be called first. If the JSON input does not represent\n     * an`AuthCredential`, null is returned.\n     * @param json The plain object representation of an\n     *     AuthCredential.\n     */\n    static fromJSON(json: Object | string): AuthCredential | null;\n  }\n\n  /**\n   * Interface that represents the OAuth credentials returned by an OAuth\n   * provider. Implementations specify the details about each auth provider's\n   * credential requirements.\n   *\n   */\n  class OAuthCredential extends AuthCredential {\n    private constructor();\n    /**\n     * The OAuth ID token associated with the credential if it belongs to an\n     * OIDC provider, such as `google.com`.\n     */\n    idToken?: string;\n    /**\n     * The OAuth access token associated with the credential if it belongs to\n     * an OAuth provider, such as `facebook.com`, `twitter.com`, etc.\n     */\n    accessToken?: string;\n    /**\n     * The OAuth access token secret associated with the credential if it\n     * belongs to an OAuth 1.0 provider, such as `twitter.com`.\n     */\n    secret?: string;\n  }\n\n  /**\n   * Interface that represents an auth provider.\n   */\n  interface AuthProvider {\n    providerId: string;\n  }\n\n  /**\n   * A result from a phone number sign-in, link, or reauthenticate call.\n   */\n  interface ConfirmationResult {\n    /**\n     * Finishes a phone number sign-in, link, or reauthentication, given the code\n     * that was sent to the user's mobile device.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the verification code is not valid.</dd>\n     * <dt>auth/missing-verification-code</dt>\n     * <dd>Thrown if the verification code is missing.</dd>\n     * </dl>\n     */\n    confirm(verificationCode: string): Promise<firebase.auth.UserCredential>;\n    /**\n     * The phone number authentication operation's verification ID. This can be used\n     * along with the verification code to initialize a phone auth credential.\n     */\n    verificationId: string;\n  }\n\n  /**\n   * Email and password auth provider implementation.\n   *\n   * To authenticate: {@link firebase.auth.Auth.createUserWithEmailAndPassword}\n   * and {@link firebase.auth.Auth.signInWithEmailAndPassword}.\n   */\n  class EmailAuthProvider extends EmailAuthProvider_Instance {\n    static PROVIDER_ID: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    static EMAIL_PASSWORD_SIGN_IN_METHOD: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    static EMAIL_LINK_SIGN_IN_METHOD: string;\n    /**\n     * @example\n     * ```javascript\n     * var cred = firebase.auth.EmailAuthProvider.credential(\n     *     email,\n     *     password\n     * );\n     * ```\n     *\n     * @param email Email address.\n     * @param password User account password.\n     * @return The auth provider credential.\n     */\n    static credential(\n      email: string,\n      password: string,\n    ): firebase.auth.AuthCredential;\n    /**\n     * Initialize an `EmailAuthProvider` credential using an email and an email link\n     * after a sign in with email link operation.\n     *\n     * @example\n     * ```javascript\n     * var cred = firebase.auth.EmailAuthProvider.credentialWithLink(\n     *     email,\n     *     emailLink\n     * );\n     * ```\n     *\n     * @param email Email address.\n     * @param emailLink Sign-in email link.\n     * @return The auth provider credential.\n     */\n    static credentialWithLink(\n      email: string,\n      emailLink: string,\n    ): firebase.auth.AuthCredential;\n  }\n  /**\n   * @hidden\n   */\n  class EmailAuthProvider_Instance implements firebase.auth.AuthProvider {\n    providerId: string;\n  }\n\n  /**\n   * An authentication error.\n   * For method-specific error codes, refer to the specific methods in the\n   * documentation. For common error codes, check the reference below. Use{@link\n   * firebase.auth.Error.code} to get the specific error code. For a detailed\n   * message, use {@link firebase.auth.Error.message}.\n   * Errors with the code <strong>auth/account-exists-with-different-credential\n   * </strong> will have the additional fields <strong>email</strong> and <strong>\n   * credential</strong> which are needed to provide a way to resolve these\n   * specific errors. Refer to {@link firebase.auth.Auth.signInWithPopup} for more\n   * information.\n   *\n   * <h4>Common Error Codes</h4>\n   * <dl>\n   * <dt>auth/app-deleted</dt>\n   * <dd>Thrown if the instance of FirebaseApp has been deleted.</dd>\n   * <dt>auth/app-not-authorized</dt>\n   * <dd>Thrown if the app identified by the domain where it's hosted, is not\n   *     authorized to use Firebase Authentication with the provided API key.\n   *     Review your key configuration in the Google API console.</dd>\n   * <dt>auth/argument-error</dt>\n   * <dd>Thrown if a method is called with incorrect arguments.</dd>\n   * <dt>auth/invalid-api-key</dt>\n   * <dd>Thrown if the provided API key is invalid. Please check that you have\n   *     copied it correctly from the Firebase Console.</dd>\n   * <dt>auth/invalid-user-token</dt>\n   * <dd>Thrown if the user's credential is no longer valid. The user must sign in\n   *     again.</dd>\n   * <dt>auth/invalid-tenant-id</dt>\n   * <dd>Thrown if the tenant ID provided is invalid.</dd>\n   * <dt>auth/network-request-failed</dt>\n   * <dd>Thrown if a network error (such as timeout, interrupted connection or\n   *     unreachable host) has occurred.</dd>\n   * <dt>auth/operation-not-allowed</dt>\n   * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go\n   *     to the Firebase Console for your project, in the Auth section and the\n   *     <strong>Sign in Method</strong> tab and configure the provider.</dd>\n   * <dt>auth/requires-recent-login</dt>\n   * <dd>Thrown if the user's last sign-in time does not meet the security\n   *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to\n   *     resolve. This does not apply if the user is anonymous.</dd>\n   * <dt>auth/too-many-requests</dt>\n   * <dd>Thrown if requests are blocked from a device due to unusual activity.\n   *     Trying again after some delay would unblock.</dd>\n   * <dt>auth/unauthorized-domain</dt>\n   * <dd>Thrown if the app domain is not authorized for OAuth operations for your\n   *     Firebase project. Edit the list of authorized domains from the Firebase\n   *     console.</dd>\n   * <dt>auth/user-disabled</dt>\n   * <dd>Thrown if the user account has been disabled by an administrator.\n   *     Accounts can be enabled or disabled in the Firebase Console, the Auth\n   *     section and Users subsection.</dd>\n   * <dt>auth/user-token-expired</dt>\n   * <dd>Thrown if the user's credential has expired. This could also be thrown if\n   *     a user has been deleted. Prompting the user to sign in again should\n   *     resolve this for either case.</dd>\n   * <dt>auth/web-storage-unsupported</dt>\n   * <dd>Thrown if the browser does not support web storage or if the user\n   *     disables them.</dd>\n   * </dl>\n   */\n  interface Error {\n    name: string;\n    /**\n     * Unique error code.\n     */\n    code: string;\n    /**\n     * Complete error message.\n     */\n    message: string;\n  }\n\n  /**\n   * The account conflict error.\n   * Refer to {@link firebase.auth.Auth.signInWithPopup} for more information.\n   *\n   * <h4>Common Error Codes</h4>\n   * <dl>\n   * <dt>auth/account-exists-with-different-credential</dt>\n   * <dd>Thrown if there already exists an account with the email address\n   *     asserted by the credential. Resolve this by calling\n   *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} with the error.email\n   *     and then asking the user to sign in using one of the returned providers.\n   *     Once the user is signed in, the original credential retrieved from the\n   *     error.credential can be linked to the user with\n   *     {@link firebase.User.linkWithCredential} to prevent the user from signing\n   *     in again to the original provider via popup or redirect. If you are using\n   *     redirects for sign in, save the credential in session storage and then\n   *     retrieve on redirect and repopulate the credential using for example\n   *     {@link firebase.auth.GoogleAuthProvider.credential} depending on the\n   *     credential provider id and complete the link.</dd>\n   * <dt>auth/credential-already-in-use</dt>\n   * <dd>Thrown if the account corresponding to the credential already exists\n   *     among your users, or is already linked to a Firebase User.\n   *     For example, this error could be thrown if you are upgrading an anonymous\n   *     user to a Google user by linking a Google credential to it and the Google\n   *     credential used is already associated with an existing Firebase Google\n   *     user.\n   *     The fields <code>error.email</code>, <code>error.phoneNumber</code>, and\n   *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})\n   *     may be provided, depending on the type of credential. You can recover\n   *     from this error by signing in with <code>error.credential</code> directly\n   *     via {@link firebase.auth.Auth.signInWithCredential}.</dd>\n   * <dt>auth/email-already-in-use</dt>\n   * <dd>Thrown if the email corresponding to the credential already exists\n   *     among your users. When thrown while linking a credential to an existing\n   *     user, an <code>error.email</code> and <code>error.credential</code>\n   *     ({@link firebase.auth.AuthCredential}) fields are also provided.\n   *     You have to link the credential to the existing user with that email if\n   *     you wish to continue signing in with that credential. To do so, call\n   *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to\n   *     <code>error.email</code> via one of the providers returned and then\n   *     {@link firebase.User.linkWithCredential} the original credential to that\n   *     newly signed in user.</dd>\n   * </dl>\n   */\n  interface AuthError extends firebase.auth.Error {\n    /**\n     * The {@link firebase.auth.AuthCredential} that can be used to resolve the\n     * error.\n     */\n    credential?: firebase.auth.AuthCredential;\n    /**\n     * The email of the user's account used for sign-in/linking.\n     */\n    email?: string;\n    /**\n     * The phone number of the user's account used for sign-in/linking.\n     */\n    phoneNumber?: string;\n    /**\n     * The tenant ID being used for sign-in/linking. If you use\n     * {@link firebase.auth.Auth.signInWithRedirect} to sign in, you have to\n     * set the tenant ID on Auth instance again as the tenant ID is not\n     * persisted after redirection.\n     */\n    tenantId?: string;\n  }\n\n  /**\n   * The error thrown when the user needs to provide a second factor to sign in\n   * successfully.\n   * The error code for this error is <code>auth/multi-factor-auth-required</code>.\n   * This error provides a {@link firebase.auth.MultiFactorResolver} object,\n   * which you can use to get the second sign-in factor from the user.\n   *\n   * @example\n   * ```javascript\n   * firebase.auth().signInWithEmailAndPassword()\n   *     .then(function(result) {\n   *       // User signed in. No 2nd factor challenge is needed.\n   *     })\n   *     .catch(function(error) {\n   *       if (error.code == 'auth/multi-factor-auth-required') {\n   *         var resolver = error.resolver;\n   *         var multiFactorHints = resolver.hints;\n   *       } else {\n   *         // Handle other errors.\n   *       }\n   *     });\n   *\n   * resolver.resolveSignIn(multiFactorAssertion)\n   *     .then(function(userCredential) {\n   *       // User signed in.\n   *     });\n   * ```\n   */\n  interface MultiFactorError extends firebase.auth.AuthError {\n    /**\n     * The multi-factor resolver to complete second factor sign-in.\n     */\n    resolver: firebase.auth.MultiFactorResolver;\n  }\n\n  /**\n   * Facebook auth provider.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * firebase.auth().getRedirectResult().then(function(result) {\n   *   if (result.credential) {\n   *     // This gives you a Google Access Token.\n   *     var token = result.credential.accessToken;\n   *   }\n   *   var user = result.user;\n   * })\n   * // Start a sign in process for an unauthenticated user.\n   * var provider = new firebase.auth.FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * firebase.auth().signInWithRedirect(provider);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * var provider = new firebase.auth.FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * firebase.auth().signInWithPopup(provider).then(function(result) {\n   *   // This gives you a Facebook Access Token.\n   *   var token = result.credential.accessToken;\n   *   // The signed-in user info.\n   *   var user = result.user;\n   * });\n   * ```\n   *\n   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state\n   * changes.\n   */\n  class FacebookAuthProvider extends FacebookAuthProvider_Instance {\n    static PROVIDER_ID: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    static FACEBOOK_SIGN_IN_METHOD: string;\n    /**\n     * @example\n     * ```javascript\n     * var cred = firebase.auth.FacebookAuthProvider.credential(\n     *     // `event` from the Facebook auth.authResponseChange callback.\n     *     event.authResponse.accessToken\n     * );\n     * ```\n     *\n     * @param token Facebook access token.\n     */\n    static credential(token: string): firebase.auth.OAuthCredential;\n  }\n  /**\n   * @hidden\n   */\n  class FacebookAuthProvider_Instance implements firebase.auth.AuthProvider {\n    /**\n     * @param scope Facebook OAuth scope.\n     * @return The provider instance itself.\n     */\n    addScope(scope: string): firebase.auth.AuthProvider;\n    providerId: string;\n    /**\n     * Sets the OAuth custom parameters to pass in a Facebook OAuth request for\n     * popup and redirect sign-in operations.\n     * Valid parameters include 'auth_type', 'display' and 'locale'.\n     * For a detailed list, check the\n     * {@link https://goo.gl/pve4fo Facebook}\n     * documentation.\n     * Reserved required OAuth 2.0 parameters such as 'client_id', 'redirect_uri',\n     * 'scope', 'response_type' and 'state' are not allowed and will be ignored.\n     * @param customOAuthParameters The custom OAuth parameters to pass\n     *     in the OAuth request.\n     * @return The provider instance itself.\n     */\n    setCustomParameters(\n      customOAuthParameters: Object,\n    ): firebase.auth.AuthProvider;\n  }\n\n  /**\n   * GitHub auth provider.\n   *\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect\n   * directly, or use the signInWithPopup handler:\n   *\n   * @example\n   * ```javascript\n   * // Using a redirect.\n   * firebase.auth().getRedirectResult().then(function(result) {\n   *   if (result.credential) {\n   *     // This gives you a GitHub Access Token.\n   *     var token = result.credential.accessToken;\n   *   }\n   *   var user = result.user;\n   * }).catch(function(error) {\n   *   // Handle Errors here.\n   *   var errorCode = error.code;\n   *   var errorMessage = error.message;\n   *   // The email of the user's account used.\n   *   var email = error.email;\n   *   // The firebase.auth.AuthCredential type that was used.\n   *   var credential = error.credential;\n   *   if (errorCode === 'auth/account-exists-with-different-credential') {\n   *     alert('You have signed up with a different provider for that email.');\n   *     // Handle linking here if your app allows it.\n   *   } else {\n   *     console.error(error);\n   *   }\n   * });\n   *\n   * // Start a sign in process for an unauthenticated user.\n   * var provider = new firebase.auth.GithubAuthProvider();\n   * provider.addScope('repo');\n   * firebase.auth().signInWithRedirect(provider);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // With popup.\n   * var provider = new firebase.auth.GithubAuthProvider();\n   *  provider.addScope('repo');\n   *  firebase.auth().signInWithPopup(provider).then(function(result) {\n   *    // This gives you a GitHub Access Token.\n   *    var token = result.credential.accessToken;\n   *    // The signed-in user info.\n   *    var user = result.user;\n   *  }).catch(function(error) {\n   *    // Handle Errors here.\n   *    var errorCode = error.code;\n   *    var errorMessage = error.message;\n   *    // The email of the user's account used.\n   *    var email = error.email;\n   *    // The firebase.auth.AuthCredential type that was used.\n   *    var credential = error.credential;\n   *    if (errorCode === 'auth/account-exists-with-different-credential') {\n   *      alert('You have signed up with a different provider for that email.');\n   *      // Handle linking here if your app allows it.\n   *    } else {\n   *      console.error(error);\n   *    }\n   *  });\n   * ```\n   *\n   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state\n   * changes.\n   */\n  class GithubAuthProvider extends GithubAuthProvider_Instance {\n    static PROVIDER_ID: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    static GITHUB_SIGN_IN_METHOD: string;\n    /**\n     * @example\n     * ```javascript\n     * var cred = firebase.auth.GithubAuthProvider.credential(\n     *     // `event` from the GitHub auth.authResponseChange callback.\n     *     event.authResponse.accessToken\n     * );\n     * ```\n     *\n     * @param token GitHub access token.\n     * @return {!firebase.auth.OAuthCredential} The auth provider credential.\n     */\n    static credential(token: string): firebase.auth.OAuthCredential;\n  }\n  /**\n   * @hidden\n   */\n  class GithubAuthProvider_Instance implements firebase.auth.AuthProvider {\n    /**\n     * @param scope GitHub OAuth scope.\n     * @return The provider instance itself.\n     */\n    addScope(scope: string): firebase.auth.AuthProvider;\n    providerId: string;\n    /**\n     * Sets the OAuth custom parameters to pass in a GitHub OAuth request for popup\n     * and redirect sign-in operations.\n     * Valid parameters include 'allow_signup'.\n     * For a detailed list, check the\n     * {@link https://developer.github.com/v3/oauth/ GitHub} documentation.\n     * Reserved required OAuth 2.0 parameters such as 'client_id', 'redirect_uri',\n     * 'scope', 'response_type' and 'state' are not allowed and will be ignored.\n     * @param customOAuthParameters The custom OAuth parameters to pass\n     *     in the OAuth request.\n     * @return The provider instance itself.\n     */\n    setCustomParameters(\n      customOAuthParameters: Object,\n    ): firebase.auth.AuthProvider;\n  }\n\n  /**\n   * Google auth provider.\n   *\n   * @example\n   * ```javascript\n   * // Using a redirect.\n   * firebase.auth().getRedirectResult().then(function(result) {\n   *   if (result.credential) {\n   *     // This gives you a Google Access Token.\n   *     var token = result.credential.accessToken;\n   *   }\n   *   var user = result.user;\n   * });\n   *\n   * // Start a sign in process for an unauthenticated user.\n   * var provider = new firebase.auth.GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * firebase.auth().signInWithRedirect(provider);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Using a popup.\n   * var provider = new firebase.auth.GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * firebase.auth().signInWithPopup(provider).then(function(result) {\n   *  // This gives you a Google Access Token.\n   *  var token = result.credential.accessToken;\n   *  // The signed-in user info.\n   *  var user = result.user;\n   * });\n   * ```\n   *\n   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state\n   * changes.\n   */\n  class GoogleAuthProvider extends GoogleAuthProvider_Instance {\n    static PROVIDER_ID: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    static GOOGLE_SIGN_IN_METHOD: string;\n    /**\n     * Creates a credential for Google. At least one of ID token and access token\n     * is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * var credential = firebase.auth.GoogleAuthProvider.credential(\n                  googleUser.getAuthResponse().id_token);\n     * firebase.auth().signInWithCredential(credential)\n     * ```\n     * @param idToken Google ID token.\n     * @param accessToken Google access token.\n     * @return The auth provider credential.\n     */\n    static credential(\n      idToken?: string | null,\n      accessToken?: string | null,\n    ): firebase.auth.OAuthCredential;\n  }\n  /**\n   * @hidden\n   */\n  class GoogleAuthProvider_Instance implements firebase.auth.AuthProvider {\n    /**\n     * @param scope Google OAuth scope.\n     * @return The provider instance itself.\n     */\n    addScope(scope: string): firebase.auth.AuthProvider;\n    providerId: string;\n    /**\n     * Sets the OAuth custom parameters to pass in a Google OAuth request for popup\n     * and redirect sign-in operations.\n     * Valid parameters include 'hd', 'hl', 'include_granted_scopes', 'login_hint'\n     * and 'prompt'.\n     * For a detailed list, check the\n     * {@link https://goo.gl/Xo01Jm Google}\n     * documentation.\n     * Reserved required OAuth 2.0 parameters such as 'client_id', 'redirect_uri',\n     * 'scope', 'response_type' and 'state' are not allowed and will be ignored.\n     * @param customOAuthParameters The custom OAuth parameters to pass\n     *     in the OAuth request.\n     * @return The provider instance itself.\n     */\n    setCustomParameters(\n      customOAuthParameters: Object,\n    ): firebase.auth.AuthProvider;\n  }\n\n  /**\n   * Generic OAuth provider.\n   *\n   * @example\n   * ```javascript\n   * // Using a redirect.\n   * firebase.auth().getRedirectResult().then(function(result) {\n   *   if (result.credential) {\n   *     // This gives you the OAuth Access Token for that provider.\n   *     var token = result.credential.accessToken;\n   *   }\n   *   var user = result.user;\n   * });\n   *\n   * // Start a sign in process for an unauthenticated user.\n   * var provider = new firebase.auth.OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * firebase.auth().signInWithRedirect(provider);\n   * ```\n   * @example\n   * ```javascript\n   * // Using a popup.\n   * var provider = new firebase.auth.OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * firebase.auth().signInWithPopup(provider).then(function(result) {\n   *  // This gives you the OAuth Access Token for that provider.\n   *  var token = result.credential.accessToken;\n   *  // The signed-in user info.\n   *  var user = result.user;\n   * });\n   * ```\n   *\n   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state\n   * changes.\n   * @param providerId The associated provider ID, such as `github.com`.\n   */\n  class OAuthProvider implements firebase.auth.AuthProvider {\n    constructor(providerId: string);\n    providerId: string;\n    /**\n     * @param scope Provider OAuth scope to add.\n     */\n    addScope(scope: string): firebase.auth.AuthProvider;\n    /**\n     * Creates a Firebase credential from a generic OAuth provider's access token or\n     * ID token. The raw nonce is required when an ID token with a nonce field is\n     * provided. The SHA-256 hash of the raw nonce must match the nonce field in\n     * the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * var provider = new firebase.auth.OAuthProvider('google.com');\n     * var credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * firebase.auth().signInWithCredential(credential)\n     * ```\n     *\n     * @param optionsOrIdToken Either the options object containing\n     *     the ID token, access token and raw nonce or the ID token string.\n     * @param accessToken The OAuth access token.\n     */\n    credential(\n      optionsOrIdToken: firebase.auth.OAuthCredentialOptions | string | null,\n      accessToken?: string,\n    ): firebase.auth.OAuthCredential;\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup\n     * and redirect sign-in operations.\n     * For a detailed list, check the\n     * reserved required OAuth 2.0 parameters such as `client_id`, `redirect_uri`,\n     * `scope`, `response_type` and `state` are not allowed and will be ignored.\n     * @param customOAuthParameters The custom OAuth parameters to pass\n     *     in the OAuth request.\n     */\n    setCustomParameters(\n      customOAuthParameters: Object,\n    ): firebase.auth.AuthProvider;\n  }\n\n  class SAMLAuthProvider implements firebase.auth.AuthProvider {\n    constructor(providerId: string);\n    providerId: string;\n  }\n\n  /**\n   * Interface representing ID token result obtained from\n   * {@link firebase.User.getIdTokenResult}. It contains the ID token JWT string\n   * and other helper properties for getting different data associated with the\n   * token as well as all the decoded payload claims.\n   *\n   * Note that these claims are not to be trusted as they are parsed client side.\n   * Only server side verification can guarantee the integrity of the token\n   * claims.\n   */\n  interface IdTokenResult {\n    /**\n     * The Firebase Auth ID token JWT string.\n     */\n    token: string;\n    /**\n     * The ID token expiration time formatted as a UTC string.\n     */\n    expirationTime: string;\n    /**\n     * The authentication time formatted as a UTC string. This is the time the\n     * user authenticated (signed in) and not the time the token was refreshed.\n     */\n    authTime: string;\n    /**\n     * The ID token issued at time formatted as a UTC string.\n     */\n    issuedAtTime: string;\n    /**\n     * The sign-in provider through which the ID token was obtained (anonymous,\n     * custom, phone, password, etc). Note, this does not map to provider IDs.\n     */\n    signInProvider: string | null;\n    /**\n     * The type of second factor associated with this session, provided the user\n     * was multi-factor authenticated (eg. phone, etc).\n     */\n    signInSecondFactor: string | null;\n    /**\n     * The entire payload claims of the ID token including the standard reserved\n     * claims as well as the custom claims.\n     */\n    claims: {\n      [key: string]: any;\n    };\n  }\n\n  /**\n   * Defines the options for initializing an\n   * {@link firebase.auth.OAuthCredential}. For ID tokens with nonce claim,\n   * the raw nonce has to also be provided.\n   */\n  interface OAuthCredentialOptions {\n    /**\n     * The OAuth ID token used to initialize the OAuthCredential.\n     */\n    idToken?: string;\n    /**\n     * The OAuth access token used to initialize the OAuthCredential.\n     */\n    accessToken?: string;\n    /**\n     * The raw nonce associated with the ID token. It is required when an ID token\n     * with a nonce field is provided. The SHA-256 hash of the raw nonce must match\n     * the nonce field in the ID token.\n     */\n    rawNonce?: string;\n  }\n\n  /**\n   * The base class for asserting ownership of a second factor. This is used to\n   * facilitate enrollment of a second factor on an existing user\n   * or sign-in of a user who already verified the first factor.\n   *\n   */\n  abstract class MultiFactorAssertion {\n    /**\n     * The identifier of the second factor.\n     */\n    factorId: string;\n  }\n\n  /**\n   * The class for asserting ownership of a phone second factor.\n   */\n  class PhoneMultiFactorAssertion extends firebase.auth.MultiFactorAssertion {\n    private constructor();\n  }\n\n  /**\n   * The class used to initialize {@link firebase.auth.PhoneMultiFactorAssertion}.\n   */\n  class PhoneMultiFactorGenerator {\n    private constructor();\n    /**\n     * The identifier of the phone second factor: `phone`.\n     */\n    static FACTOR_ID: string;\n    /**\n     * Initializes the {@link firebase.auth.PhoneMultiFactorAssertion} to confirm ownership\n     * of the phone second factor.\n     */\n    static assertion(\n      phoneAuthCredential: firebase.auth.PhoneAuthCredential,\n    ): firebase.auth.PhoneMultiFactorAssertion;\n  }\n\n  /**\n   * A structure containing the information of a second factor entity.\n   */\n  interface MultiFactorInfo {\n    /**\n     * The multi-factor enrollment ID.\n     */\n    uid: string;\n    /**\n     * The user friendly name of the current second factor.\n     */\n    displayName?: string | null;\n    /**\n     * The enrollment date of the second factor formatted as a UTC string.\n     */\n    enrollmentTime: string;\n    /**\n     * The identifier of the second factor.\n     */\n    factorId: string;\n  }\n\n  /**\n   * The subclass of the MultiFactorInfo interface for phone number second factors.\n   * The factorId of this second factor is\n   * {@link firebase.auth.PhoneMultiFactorGenerator.FACTOR_ID}.\n   */\n  interface PhoneMultiFactorInfo extends firebase.auth.MultiFactorInfo {\n    /**\n     * The phone number associated with the current second factor.\n     */\n    phoneNumber: string;\n  }\n\n  /**\n   * The information required to verify the ownership of a phone number. The\n   * information that's required depends on whether you are doing single-factor\n   * sign-in, multi-factor enrollment or multi-factor sign-in.\n   */\n  type PhoneInfoOptions =\n    | firebase.auth.PhoneSingleFactorInfoOptions\n    | firebase.auth.PhoneMultiFactorEnrollInfoOptions\n    | firebase.auth.PhoneMultiFactorSignInInfoOptions;\n  /**\n   * The phone info options for single-factor sign-in. Only phone number is\n   * required.\n   */\n  interface PhoneSingleFactorInfoOptions {\n    phoneNumber: string;\n  }\n\n  /**\n   * The phone info options for multi-factor enrollment. Phone number and\n   * multi-factor session are required.\n   */\n  interface PhoneMultiFactorEnrollInfoOptions {\n    phoneNumber: string;\n    session: firebase.auth.MultiFactorSession;\n  }\n\n  /**\n   * The phone info options for multi-factor sign-in. Either multi-factor hint or\n   * multi-factor UID and multi-factor session are required.\n   */\n  interface PhoneMultiFactorSignInInfoOptions {\n    multiFactorHint?: firebase.auth.MultiFactorInfo;\n    multiFactorUid?: string;\n    session: firebase.auth.MultiFactorSession;\n  }\n\n  /**\n   * The class used to facilitate recovery from\n   * {@link firebase.auth.MultiFactorError} when a user needs to provide a second\n   * factor to sign in.\n   *\n   * @example\n   * ```javascript\n   * firebase.auth().signInWithEmailAndPassword()\n   *     .then(function(result) {\n   *       // User signed in. No 2nd factor challenge is needed.\n   *     })\n   *     .catch(function(error) {\n   *       if (error.code == 'auth/multi-factor-auth-required') {\n   *         var resolver = error.resolver;\n   *         // Show UI to let user select second factor.\n   *         var multiFactorHints = resolver.hints;\n   *       } else {\n   *         // Handle other errors.\n   *       }\n   *     });\n   *\n   * // The enrolled second factors that can be used to complete\n   * // sign-in are returned in the `MultiFactorResolver.hints` list.\n   * // UI needs to be presented to allow the user to select a second factor\n   * // from that list.\n   *\n   * var selectedHint = // ; selected from multiFactorHints\n   * var phoneAuthProvider = new firebase.auth.PhoneAuthProvider();\n   * var phoneInfoOptions = {\n   *   multiFactorHint: selectedHint,\n   *   session: resolver.session\n   * };\n   * phoneAuthProvider.verifyPhoneNumber(\n   *   phoneInfoOptions,\n   *   appVerifier\n   * ).then(function(verificationId) {\n   *   // store verificationID and show UI to let user enter verification code.\n   * });\n   *\n   * // UI to enter verification code and continue.\n   * // Continue button click handler\n   * var phoneAuthCredential =\n   *     firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);\n   * var multiFactorAssertion =\n   *     firebase.auth.PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n   * resolver.resolveSignIn(multiFactorAssertion)\n   *     .then(function(userCredential) {\n   *       // User signed in.\n   *     });\n   * ```\n   */\n  class MultiFactorResolver {\n    private constructor();\n    /**\n     * The Auth instance used to sign in with the first factor.\n     */\n    auth: firebase.auth.Auth;\n    /**\n     * The session identifier for the current sign-in flow, which can be used\n     * to complete the second factor sign-in.\n     */\n    session: firebase.auth.MultiFactorSession;\n    /**\n     * The list of hints for the second factors needed to complete the sign-in\n     * for the current session.\n     */\n    hints: firebase.auth.MultiFactorInfo[];\n    /**\n     * A helper function to help users complete sign in with a second factor\n     * using an {@link firebase.auth.MultiFactorAssertion} confirming the user\n     * successfully completed the second factor challenge.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the verification code is not valid.</dd>\n     * <dt>auth/missing-verification-code</dt>\n     * <dd>Thrown if the verification code is missing.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     ID of the credential is not valid.</dd>\n     * <dt>auth/missing-verification-id</dt>\n     * <dd>Thrown if the verification ID is missing.</dd>\n     * <dt>auth/code-expired</dt>\n     * <dd>Thrown if the verification code has expired.</dd>\n     * <dt>auth/invalid-multi-factor-session</dt>\n     * <dd>Thrown if the request does not contain a valid proof of first factor\n     *     successful sign-in.</dd>\n     * <dt>auth/missing-multi-factor-session</dt>\n     * <dd>Thrown if The request is missing proof of first factor successful\n     *     sign-in.</dd>\n     * </dl>\n     *\n     * @param assertion The multi-factor assertion to resolve sign-in with.\n     * @return The promise that resolves with the user credential object.\n     */\n    resolveSignIn(\n      assertion: firebase.auth.MultiFactorAssertion,\n    ): Promise<firebase.auth.UserCredential>;\n  }\n\n  /**\n   * The multi-factor session object used for enrolling a second factor on a\n   * user or helping sign in an enrolled user with a second factor.\n   */\n  class MultiFactorSession {\n    private constructor();\n  }\n\n  /**\n   * Classes that represents the Phone Auth credentials returned by a\n   * {@link firebase.auth.PhoneAuthProvider}.\n   *\n   */\n  class PhoneAuthCredential extends AuthCredential {\n    private constructor();\n  }\n\n  /**\n   * Phone number auth provider.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * var applicationVerifier = new firebase.auth.RecaptchaVerifier(\n   *     'recaptcha-container');\n   * var provider = new firebase.auth.PhoneAuthProvider();\n   * provider.verifyPhoneNumber('+16505550101', applicationVerifier)\n   *     .then(function(verificationId) {\n   *       var verificationCode = window.prompt('Please enter the verification ' +\n   *           'code that was sent to your mobile device.');\n   *       return firebase.auth.PhoneAuthProvider.credential(verificationId,\n   *           verificationCode);\n   *     })\n   *     .then(function(phoneCredential) {\n   *       return firebase.auth().signInWithCredential(phoneCredential);\n   *     });\n   * ```\n   * @param auth The Firebase Auth instance in which\n   *     sign-ins should occur. Uses the default Auth instance if unspecified.\n   */\n  class PhoneAuthProvider extends PhoneAuthProvider_Instance {\n    static PROVIDER_ID: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     */\n    static PHONE_SIGN_IN_METHOD: string;\n    /**\n     * Creates a phone auth credential, given the verification ID from\n     * {@link firebase.auth.PhoneAuthProvider.verifyPhoneNumber} and the code\n     * that was sent to the user's mobile device.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/missing-verification-code</dt>\n     * <dd>Thrown if the verification code is missing.</dd>\n     * <dt>auth/missing-verification-id</dt>\n     * <dd>Thrown if the verification ID is missing.</dd>\n     * </dl>\n     *\n     * @param verificationId The verification ID returned from\n     *     {@link firebase.auth.PhoneAuthProvider.verifyPhoneNumber}.\n     * @param verificationCode The verification code sent to the user's\n     *     mobile device.\n     * @return The auth provider credential.\n     */\n    static credential(\n      verificationId: string,\n      verificationCode: string,\n    ): firebase.auth.AuthCredential;\n  }\n  /**\n   * @hidden\n   */\n  class PhoneAuthProvider_Instance implements firebase.auth.AuthProvider {\n    constructor(auth?: firebase.auth.Auth | null);\n    providerId: string;\n    /**\n     * Starts a phone number authentication flow by sending a verification code to\n     * the given phone number. Returns an ID that can be passed to\n     * {@link firebase.auth.PhoneAuthProvider.credential} to identify this flow.\n     *\n     * For abuse prevention, this method also requires a\n     * {@link firebase.auth.ApplicationVerifier}. The Firebase Auth SDK includes\n     * a reCAPTCHA-based implementation, {@link firebase.auth.RecaptchaVerifier}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/captcha-check-failed</dt>\n     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if\n     *     this method was called from a non-whitelisted domain.</dd>\n     * <dt>auth/invalid-phone-number</dt>\n     * <dd>Thrown if the phone number has an invalid format.</dd>\n     * <dt>auth/missing-phone-number</dt>\n     * <dd>Thrown if the phone number is missing.</dd>\n     * <dt>auth/quota-exceeded</dt>\n     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>\n     * <dt>auth/user-disabled</dt>\n     * <dd>Thrown if the user corresponding to the given phone number has been\n     *     disabled.</dd>\n     * <dt>auth/maximum-second-factor-count-exceeded</dt>\n     * <dd>Thrown if The maximum allowed number of second factors on a user\n     *     has been exceeded.</dd>\n     * <dt>auth/second-factor-already-in-use</dt>\n     * <dd>Thrown if the second factor is already enrolled on this account.</dd>\n     * <dt>auth/unsupported-first-factor</dt>\n     * <dd>Thrown if the first factor being used to sign in is not supported.</dd>\n     * <dt>auth/unverified-email</dt>\n     * <dd>Thrown if the email of the account is not verified.</dd>\n     * </dl>\n     *\n     * @param phoneInfoOptions The user's {@link firebase.auth.PhoneInfoOptions}.\n     *     The phone number should be in E.164 format (e.g. +16505550101).\n     * @param applicationVerifier\n     * @return A Promise for the verification ID.\n     */\n    verifyPhoneNumber(\n      phoneInfoOptions: firebase.auth.PhoneInfoOptions | string,\n      applicationVerifier: firebase.auth.ApplicationVerifier,\n    ): Promise<string>;\n  }\n\n  /**\n   * An {@link https://www.google.com/recaptcha/ reCAPTCHA}-based application\n   * verifier.\n   *\n   * This class does not work in a Node.js environment.\n   *\n   * @param container The reCAPTCHA container parameter. This\n   *     has different meaning depending on whether the reCAPTCHA is hidden or\n   *     visible. For a visible reCAPTCHA the container must be empty. If a string\n   *     is used, it has to correspond to an element ID. The corresponding element\n   *     must also must be in the DOM at the time of initialization.\n   * @param parameters The optional reCAPTCHA parameters. Check the\n   *     reCAPTCHA docs for a comprehensive list. All parameters are accepted\n   *     except for the sitekey. Firebase Auth backend provisions a reCAPTCHA for\n   *     each project and will configure this upon rendering. For an invisible\n   *     reCAPTCHA, a size key must have the value 'invisible'.\n   * @param app The corresponding Firebase app. If none is\n   *     provided, the default Firebase App instance is used. A Firebase App\n   *     instance must be initialized with an API key, otherwise an error will be\n   *     thrown.\n   */\n  class RecaptchaVerifier extends RecaptchaVerifier_Instance {}\n  /**\n   * @hidden\n   */\n  class RecaptchaVerifier_Instance\n    implements firebase.auth.ApplicationVerifier\n  {\n    constructor(\n      container: any | string,\n      parameters?: Object | null,\n      app?: firebase.app.App | null,\n    );\n    /**\n     * Clears the reCAPTCHA widget from the page and destroys the current instance.\n     */\n    clear(): void;\n    /**\n     * Renders the reCAPTCHA widget on the page.\n     * @return A Promise that resolves with the\n     *     reCAPTCHA widget ID.\n     */\n    render(): Promise<number>;\n    /**\n     * The application verifier type. For a reCAPTCHA verifier, this is 'recaptcha'.\n     */\n    type: string;\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA\n     * token.\n     * @return A Promise for the reCAPTCHA token.\n     */\n    verify(): Promise<string>;\n  }\n\n  /**\n   * Twitter auth provider.\n   *\n   * @example\n   * ```javascript\n   * // Using a redirect.\n   * firebase.auth().getRedirectResult().then(function(result) {\n   *   if (result.credential) {\n   *     // For accessing the Twitter API.\n   *     var token = result.credential.accessToken;\n   *     var secret = result.credential.secret;\n   *   }\n   *   var user = result.user;\n   * });\n   *\n   * // Start a sign in process for an unauthenticated user.\n   * var provider = new firebase.auth.TwitterAuthProvider();\n   * firebase.auth().signInWithRedirect(provider);\n   * ```\n   * @example\n   * ```javascript\n   * // Using a popup.\n   * var provider = new firebase.auth.TwitterAuthProvider();\n   * firebase.auth().signInWithPopup(provider).then(function(result) {\n   *   // For accessing the Twitter API.\n   *   var token = result.credential.accessToken;\n   *   var secret = result.credential.secret;\n   *   // The signed-in user info.\n   *   var user = result.user;\n   * });\n   * ```\n   *\n   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state\n   * changes.\n   */\n  class TwitterAuthProvider extends TwitterAuthProvider_Instance {\n    static PROVIDER_ID: string;\n    /**\n     * This corresponds to the sign-in method identifier as returned in\n     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.\n     *\n     */\n    static TWITTER_SIGN_IN_METHOD: string;\n    /**\n     * @param token Twitter access token.\n     * @param secret Twitter secret.\n     * @return The auth provider credential.\n     */\n    static credential(\n      token: string,\n      secret: string,\n    ): firebase.auth.OAuthCredential;\n  }\n  /**\n   * @hidden\n   */\n  class TwitterAuthProvider_Instance implements firebase.auth.AuthProvider {\n    providerId: string;\n    /**\n     * Sets the OAuth custom parameters to pass in a Twitter OAuth request for popup\n     * and redirect sign-in operations.\n     * Valid parameters include 'lang'.\n     * Reserved required OAuth 1.0 parameters such as 'oauth_consumer_key',\n     * 'oauth_token', 'oauth_signature', etc are not allowed and will be ignored.\n     * @param customOAuthParameters The custom OAuth parameters to pass\n     *     in the OAuth request.\n     * @return The provider instance itself.\n     */\n    setCustomParameters(\n      customOAuthParameters: Object,\n    ): firebase.auth.AuthProvider;\n  }\n\n  /**\n   * A structure containing a User, an AuthCredential, the operationType, and\n   * any additional user information that was returned from the identity provider.\n   * operationType could be 'signIn' for a sign-in operation, 'link' for a linking\n   * operation and 'reauthenticate' for a reauthentication operation.\n   */\n  type UserCredential = {\n    additionalUserInfo?: firebase.auth.AdditionalUserInfo | null;\n    credential: firebase.auth.AuthCredential | null;\n    operationType?: string | null;\n    user: firebase.User | null;\n  };\n\n  /**\n   * Interface representing a user's metadata.\n   */\n  interface UserMetadata {\n    creationTime?: string;\n    lastSignInTime?: string;\n  }\n}\n\n/**\n * The Analytics SDK does not work in a Node.js environment.\n */\ndeclare namespace firebase.analytics {\n  /**\n   * The Firebase Analytics service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.analytics `firebase.analytics()`}.\n   */\n  export interface Analytics {\n    /**\n     * The {@link firebase.app.App app} associated with the `Analytics` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = analytics.app;\n     * ```\n     */\n    app: firebase.app.App;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"add_payment_info\",\n      eventParams?: {\n        coupon?: EventParams[\"coupon\"];\n        currency?: EventParams[\"currency\"];\n        items?: EventParams[\"items\"];\n        payment_type?: EventParams[\"payment_type\"];\n        value?: EventParams[\"value\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"add_shipping_info\",\n      eventParams?: {\n        coupon?: EventParams[\"coupon\"];\n        currency?: EventParams[\"currency\"];\n        items?: EventParams[\"items\"];\n        shipping_tier?: EventParams[\"shipping_tier\"];\n        value?: EventParams[\"value\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"add_to_cart\" | \"add_to_wishlist\" | \"remove_from_cart\",\n      eventParams?: {\n        currency?: EventParams[\"currency\"];\n        value?: EventParams[\"value\"];\n        items?: EventParams[\"items\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"begin_checkout\",\n      eventParams?: {\n        currency?: EventParams[\"currency\"];\n        coupon?: EventParams[\"coupon\"];\n        value?: EventParams[\"value\"];\n        items?: EventParams[\"items\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"checkout_progress\",\n      eventParams?: {\n        currency?: EventParams[\"currency\"];\n        coupon?: EventParams[\"coupon\"];\n        value?: EventParams[\"value\"];\n        items?: EventParams[\"items\"];\n        checkout_step?: EventParams[\"checkout_step\"];\n        checkout_option?: EventParams[\"checkout_option\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * See\n     * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n     * | Measure exceptions}.\n     */\n    logEvent(\n      eventName: \"exception\",\n      eventParams?: {\n        description?: EventParams[\"description\"];\n        fatal?: EventParams[\"fatal\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"generate_lead\",\n      eventParams?: {\n        value?: EventParams[\"value\"];\n        currency?: EventParams[\"currency\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"login\",\n      eventParams?: {\n        method?: EventParams[\"method\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * See\n     * {@link https://developers.google.com/analytics/devguides/collection/ga4/views\n     * | Page views}.\n     */\n    logEvent(\n      eventName: \"page_view\",\n      eventParams?: {\n        page_title?: string;\n        page_location?: string;\n        page_path?: string;\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"purchase\" | \"refund\",\n      eventParams?: {\n        value?: EventParams[\"value\"];\n        currency?: EventParams[\"currency\"];\n        transaction_id: EventParams[\"transaction_id\"];\n        tax?: EventParams[\"tax\"];\n        shipping?: EventParams[\"shipping\"];\n        items?: EventParams[\"items\"];\n        coupon?: EventParams[\"coupon\"];\n        affiliation?: EventParams[\"affiliation\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * See {@link https://firebase.google.com/docs/analytics/screenviews\n     * | Track Screenviews}.\n     */\n    logEvent(\n      eventName: \"screen_view\",\n      eventParams?: {\n        firebase_screen: EventParams[\"firebase_screen\"];\n        firebase_screen_class: EventParams[\"firebase_screen_class\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"search\" | \"view_search_results\",\n      eventParams?: {\n        search_term?: EventParams[\"search_term\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"select_content\",\n      eventParams?: {\n        content_type?: EventParams[\"content_type\"];\n        item_id?: EventParams[\"item_id\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"select_item\",\n      eventParams?: {\n        items?: EventParams[\"items\"];\n        item_list_name?: EventParams[\"item_list_name\"];\n        item_list_id?: EventParams[\"item_list_id\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"select_promotion\" | \"view_promotion\",\n      eventParams?: {\n        items?: EventParams[\"items\"];\n        promotion_id?: EventParams[\"promotion_id\"];\n        promotion_name?: EventParams[\"promotion_name\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"set_checkout_option\",\n      eventParams?: {\n        checkout_step?: EventParams[\"checkout_step\"];\n        checkout_option?: EventParams[\"checkout_option\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"share\",\n      eventParams?: {\n        method?: EventParams[\"method\"];\n        content_type?: EventParams[\"content_type\"];\n        item_id?: EventParams[\"item_id\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"sign_up\",\n      eventParams?: {\n        method?: EventParams[\"method\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"timing_complete\",\n      eventParams?: {\n        name: string;\n        value: number;\n        event_category?: string;\n        event_label?: string;\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"view_cart\" | \"view_item\",\n      eventParams?: {\n        currency?: EventParams[\"currency\"];\n        items?: EventParams[\"items\"];\n        value?: EventParams[\"value\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent(\n      eventName: \"view_item_list\",\n      eventParams?: {\n        items?: EventParams[\"items\"];\n        item_list_name?: EventParams[\"item_list_name\"];\n        item_list_id?: EventParams[\"item_list_id\"];\n        [key: string]: any;\n      },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sends analytics event with given `eventParams`. This method\n     * automatically associates this logged event with this Firebase web\n     * app instance on this device.\n     * List of recommended event parameters can be found in\n     * {@link https://developers.google.com/gtagjs/reference/ga4-events\n     * | the GA4 reference documentation}.\n     */\n    logEvent<T extends string>(\n      eventName: CustomEventName<T>,\n      eventParams?: { [key: string]: any },\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Use gtag 'config' command to set 'screen_name'.\n     *\n     * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n     * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n     */\n    setCurrentScreen(\n      screenName: string,\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Use gtag 'config' command to set 'user_id'.\n     */\n    setUserId(\n      id: string,\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Use gtag 'config' command to set all params specified.\n     */\n    setUserProperties(\n      properties: firebase.analytics.CustomParams,\n      options?: firebase.analytics.AnalyticsCallOptions,\n    ): void;\n\n    /**\n     * Sets whether analytics collection is enabled for this app on this device.\n     * window['ga-disable-analyticsId'] = true;\n     */\n    setAnalyticsCollectionEnabled(enabled: boolean): void;\n  }\n\n  export type CustomEventName<T> = T extends EventNameString ? never : T;\n\n  /**\n   * Additional options that can be passed to Firebase Analytics method\n   * calls such as `logEvent`, `setCurrentScreen`, etc.\n   */\n  export interface AnalyticsCallOptions {\n    /**\n     * If true, this config or event call applies globally to all\n     * analytics properties on the page.\n     */\n    global: boolean;\n  }\n\n  /**\n   * Specifies custom options for your Firebase Analytics instance.\n   * You must set these before initializing `firebase.analytics()`.\n   */\n  export interface SettingsOptions {\n    /** Sets custom name for `gtag` function. */\n    gtagName?: string;\n    /** Sets custom name for `dataLayer` array used by gtag. */\n    dataLayerName?: string;\n  }\n\n  /**\n   * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n   * Intended to be used if `gtag.js` script has been installed on\n   * this page independently of Firebase Analytics, and is using non-default\n   * names for either the `gtag` function or for `dataLayer`.\n   * Must be called before calling `firebase.analytics()` or it won't\n   * have any effect.\n   */\n  export function settings(settings: firebase.analytics.SettingsOptions): void;\n\n  /**\n   * Standard gtag.js control parameters.\n   * For more information, see\n   * {@link https://developers.google.com/gtagjs/reference/parameter\n   * the gtag.js documentation on parameters}.\n   */\n  export interface ControlParams {\n    groups?: string | string[];\n    send_to?: string | string[];\n    event_callback?: () => void;\n    event_timeout?: number;\n  }\n\n  /**\n   * Standard gtag.js event parameters.\n   * For more information, see\n   * {@link https://developers.google.com/gtagjs/reference/parameter\n   * the gtag.js documentation on parameters}.\n   */\n  export interface EventParams {\n    checkout_option?: string;\n    checkout_step?: number;\n    item_id?: string;\n    content_type?: string;\n    coupon?: string;\n    currency?: string;\n    description?: string;\n    fatal?: boolean;\n    items?: Item[];\n    method?: string;\n    number?: string;\n    promotions?: Promotion[];\n    screen_name?: string;\n    /**\n     * Firebase-specific. Use to log a `screen_name` to Firebase Analytics.\n     */\n    firebase_screen?: string;\n    /**\n     * Firebase-specific. Use to log a `screen_class` to Firebase Analytics.\n     */\n    firebase_screen_class?: string;\n    search_term?: string;\n    shipping?: Currency;\n    tax?: Currency;\n    transaction_id?: string;\n    value?: number;\n    event_label?: string;\n    event_category: string;\n    shipping_tier?: string;\n    item_list_id?: string;\n    item_list_name?: string;\n    promotion_id?: string;\n    promotion_name?: string;\n    payment_type?: string;\n    affiliation?: string;\n  }\n\n  /**\n   * Any custom params the user may pass to gtag.js.\n   */\n  export interface CustomParams {\n    [key: string]: any;\n  }\n\n  /**\n   * Type for standard gtag.js event names. `logEvent` also accepts any\n   * custom string and interprets it as a custom event name.\n   */\n  export type EventNameString =\n    | \"add_payment_info\"\n    | \"add_shipping_info\"\n    | \"add_to_cart\"\n    | \"add_to_wishlist\"\n    | \"begin_checkout\"\n    | \"checkout_progress\"\n    | \"exception\"\n    | \"generate_lead\"\n    | \"login\"\n    | \"page_view\"\n    | \"purchase\"\n    | \"refund\"\n    | \"remove_from_cart\"\n    | \"screen_view\"\n    | \"search\"\n    | \"select_content\"\n    | \"select_item\"\n    | \"select_promotion\"\n    | \"set_checkout_option\"\n    | \"share\"\n    | \"sign_up\"\n    | \"timing_complete\"\n    | \"view_cart\"\n    | \"view_item\"\n    | \"view_item_list\"\n    | \"view_promotion\"\n    | \"view_search_results\";\n\n  /**\n   * Enum of standard gtag.js event names provided for convenient\n   * developer usage. `logEvent` will also accept any custom string\n   * and interpret it as a custom event name.\n   */\n  export enum EventName {\n    ADD_PAYMENT_INFO = \"add_payment_info\",\n    ADD_SHIPPING_INFO = \"add_shipping_info\",\n    ADD_TO_CART = \"add_to_cart\",\n    ADD_TO_WISHLIST = \"add_to_wishlist\",\n    BEGIN_CHECKOUT = \"begin_checkout\",\n    /** @deprecated */\n    CHECKOUT_PROGRESS = \"checkout_progress\",\n    EXCEPTION = \"exception\",\n    GENERATE_LEAD = \"generate_lead\",\n    LOGIN = \"login\",\n    PAGE_VIEW = \"page_view\",\n    PURCHASE = \"purchase\",\n    REFUND = \"refund\",\n    REMOVE_FROM_CART = \"remove_from_cart\",\n    SCREEN_VIEW = \"screen_view\",\n    SEARCH = \"search\",\n    SELECT_CONTENT = \"select_content\",\n    SELECT_ITEM = \"select_item\",\n    SELECT_PROMOTION = \"select_promotion\",\n    /** @deprecated */\n    SET_CHECKOUT_OPTION = \"set_checkout_option\",\n    SHARE = \"share\",\n    SIGN_UP = \"sign_up\",\n    TIMING_COMPLETE = \"timing_complete\",\n    VIEW_CART = \"view_cart\",\n    VIEW_ITEM = \"view_item\",\n    VIEW_ITEM_LIST = \"view_item_list\",\n    VIEW_PROMOTION = \"view_promotion\",\n    VIEW_SEARCH_RESULTS = \"view_search_results\",\n  }\n\n  export type Currency = string | number;\n\n  export interface Item {\n    item_id?: string;\n    item_name?: string;\n    item_brand?: string;\n    item_category?: string;\n    item_category2?: string;\n    item_category3?: string;\n    item_category4?: string;\n    item_category5?: string;\n    item_variant?: string;\n    price?: Currency;\n    quantity?: number;\n    index?: number;\n    coupon?: string;\n    item_list_name?: string;\n    item_list_id?: string;\n    discount?: Currency;\n    affiliation?: string;\n    creative_name?: string;\n    creative_slot?: string;\n    promotion_id?: string;\n    promotion_name?: string;\n    location_id?: string;\n    /** @deprecated Use item_brand instead. */\n    brand?: string;\n    /** @deprecated Use item_category instead. */\n    category?: string;\n    /** @deprecated Use item_id instead. */\n    id?: string;\n    /** @deprecated Use item_name instead. */\n    name?: string;\n  }\n\n  /** @deprecated Use Item instead. */\n  export interface Promotion {\n    creative_name?: string;\n    creative_slot?: string;\n    id?: string;\n    name?: string;\n  }\n\n  /**\n   * An async function that returns true if current browser context supports initialization of analytics module\n   * (`firebase.analytics()`).\n   *\n   * Returns false otherwise.\n   *\n   *\n   */\n  function isSupported(): Promise<boolean>;\n}\n\ndeclare namespace firebase.auth.Auth {\n  type Persistence = string;\n  /**\n   * An enumeration of the possible persistence mechanism types.\n   */\n  var Persistence: {\n    /**\n     * Indicates that the state will be persisted even when the browser window is\n     * closed or the activity is destroyed in react-native.\n     */\n    LOCAL: Persistence;\n    /**\n     * Indicates that the state will only be stored in memory and will be cleared\n     * when the window or activity is refreshed.\n     */\n    NONE: Persistence;\n    /**\n     * Indicates that the state will only persist in current session/tab, relevant\n     * to web only, and will be cleared when the tab is closed.\n     */\n    SESSION: Persistence;\n  };\n}\n\ndeclare namespace firebase.User {\n  /**\n   * This is the interface that defines the multi-factor related properties and\n   * operations pertaining to a {@link firebase.User}.\n   */\n  interface MultiFactorUser {\n    /**\n     * Returns a list of the user's enrolled second factors.\n     */\n    enrolledFactors: firebase.auth.MultiFactorInfo[];\n    /**\n     * Enrolls a second factor as identified by the\n     * {@link firebase.auth.MultiFactorAssertion} for the current user.\n     * On resolution, the user tokens are updated to reflect the change in the\n     * JWT payload.\n     * Accepts an additional display name parameter used to identify the second\n     * factor to the end user.\n     * Recent re-authentication is required for this operation to succeed.\n     * On successful enrollment, existing Firebase sessions (refresh tokens) are\n     * revoked. When a new factor is enrolled, an email notification is sent\n     * to the user’s email.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/invalid-verification-code</dt>\n     * <dd>Thrown if the verification code is not valid.</dd>\n     * <dt>auth/missing-verification-code</dt>\n     * <dd>Thrown if the verification code is missing.</dd>\n     * <dt>auth/invalid-verification-id</dt>\n     * <dd>Thrown if the credential is a\n     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification\n     *     ID of the credential is not valid.</dd>\n     * <dt>auth/missing-verification-id</dt>\n     * <dd>Thrown if the verification ID is missing.</dd>\n     * <dt>auth/code-expired</dt>\n     * <dd>Thrown if the verification code has expired.</dd>\n     * <dt>auth/maximum-second-factor-count-exceeded</dt>\n     * <dd>Thrown if The maximum allowed number of second factors on a user\n     *     has been exceeded.</dd>\n     * <dt>auth/second-factor-already-in-use</dt>\n     * <dd>Thrown if the second factor is already enrolled on this account.</dd>\n     * <dt>auth/unsupported-first-factor</dt>\n     * <dd>Thrown if the first factor being used to sign in is not supported.</dd>\n     * <dt>auth/unverified-email</dt>\n     * <dd>Thrown if the email of the account is not verified.</dd>\n     * <dt>auth/requires-recent-login</dt>\n     * <dd>Thrown if the user's last sign-in time does not meet the security\n     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to\n     *     resolve.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * firebase.auth().currentUser.multiFactor.getSession()\n     *     .then(function(multiFactorSession) {\n     *       // Send verification code\n     *     var phoneAuthProvider = new firebase.auth.PhoneAuthProvider();\n     *     var phoneInfoOptions = {\n     *       phoneNumber: phoneNumber,\n     *       session: multiFactorSession\n     *     };\n     *     return phoneAuthProvider.verifyPhoneNumber(\n     *         phoneInfoOptions, appVerifier);\n     *     }).then(function(verificationId) {\n     *       // Store verificationID and show UI to let user enter verification code.\n     *     });\n     *\n     * var phoneAuthCredential =\n     *     firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);\n     * var multiFactorAssertion =\n     *     firebase.auth.PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n     * firebase.auth().currentUser.multiFactor.enroll(multiFactorAssertion)\n     *     .then(function() {\n     *       // Second factor enrolled.\n     *     });\n     * ```\n     *\n     * @param assertion The multi-factor assertion to enroll with.\n     * @param displayName The display name of the second factor.\n     */\n    enroll(\n      assertion: firebase.auth.MultiFactorAssertion,\n      displayName?: string | null,\n    ): Promise<void>;\n    /**\n     * Returns the session identifier for a second factor enrollment operation.\n     * This is used to identify the current user trying to enroll a second factor.\n     * @return The promise that resolves with the\n     * {@link firebase.auth.MultiFactorSession}.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/user-token-expired</dt>\n     * <dd>Thrown if the token of the user is expired.</dd>\n     * </dl>\n     */\n    getSession(): Promise<firebase.auth.MultiFactorSession>;\n    /**\n     * Unenrolls the specified second factor. To specify the factor to remove, pass\n     * a {@link firebase.auth.MultiFactorInfo} object\n     * (retrieved from <code>enrolledFactors()</code>)\n     * or the factor's UID string.\n     * Sessions are not revoked when the account is downgraded. An email\n     * notification is likely to be sent to the user notifying them of the change.\n     * Recent re-authentication is required for this operation to succeed.\n     * When an existing factor is unenrolled, an email notification is sent to the\n     * user’s email.\n     *\n     * <h4>Error Codes</h4>\n     * <dl>\n     * <dt>auth/multi-factor-info-not-found</dt>\n     * <dd>Thrown if the user does not have a second factor matching the\n     *     identifier provided.</dd>\n     * <dt>auth/requires-recent-login</dt>\n     * <dd>Thrown if the user's last sign-in time does not meet the security\n     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to\n     *     resolve.</dd>\n     * </dl>\n     *\n     * @example\n     * ```javascript\n     * var options = firebase.auth().currentUser.multiFactor.enrolledFactors;\n     * // Present user the option to unenroll.\n     * return firebase.auth().currentUser.multiFactor.unenroll(options[i])\n     *   .then(function() {\n     *     // User successfully unenrolled selected factor.\n     *   }).catch(function(error) {\n     *     // Handler error.\n     *   });\n     * ```\n     *\n     * @param option The multi-factor option to unenroll.\n     */\n    unenroll(option: firebase.auth.MultiFactorInfo | string): Promise<void>;\n  }\n}\n\ndeclare namespace firebase.auth.ActionCodeInfo {\n  type Operation = string;\n  /**\n   * An enumeration of the possible email action types.\n   */\n  var Operation: {\n    /**\n     * The email link sign-in action.\n     */\n    EMAIL_SIGNIN: Operation;\n    /**\n     * The password reset action.\n     */\n    PASSWORD_RESET: Operation;\n    /**\n     * The email revocation action.\n     */\n    RECOVER_EMAIL: Operation;\n    /**\n     * The revert second factor addition email action.\n     */\n    REVERT_SECOND_FACTOR_ADDITION: Operation;\n    /**\n     * The verify and update email action.\n     */\n    VERIFY_AND_CHANGE_EMAIL: Operation;\n    /**\n     * The email verification action.\n     */\n    VERIFY_EMAIL: Operation;\n  };\n}\n\ndeclare namespace firebase.database {\n  /**\n   * A `DataSnapshot` contains data from a Database location.\n   *\n   * Any time you read data from the Database, you receive the data as a\n   * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n   * with `on()` or `once()`. You can extract the contents of the snapshot as a\n   * JavaScript object by calling the `val()` method. Alternatively, you can\n   * traverse into the snapshot by calling `child()` to return child snapshots\n   * (which you could then call `val()` on).\n   *\n   * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n   * a Database location. It cannot be modified and will never change (to modify\n   * data, you always call the `set()` method on a `Reference` directly).\n   *\n   */\n  interface DataSnapshot {\n    /**\n     * Gets another `DataSnapshot` for the location at the specified relative path.\n     *\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\n     * another `DataSnapshot` for the location at the specified relative path. The\n     * relative path can either be a simple child name (for example, \"ada\") or a\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n     * whose value is `null`) is returned.\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"name\": {\n     *     \"first\": \"Ada\",\n     *     \"last\": \"Lovelace\"\n     *   }\n     * }\n     *\n     * // Test for the existence of certain keys within a DataSnapshot\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var name = snapshot.child(\"name\").val(); // {first:\"Ada\",last:\"Lovelace\"}\n     *     var firstName = snapshot.child(\"name/first\").val(); // \"Ada\"\n     *     var lastName = snapshot.child(\"name\").child(\"last\").val(); // \"Lovelace\"\n     *     var age = snapshot.child(\"age\").val(); // null\n     *   });\n     * ```\n     *\n     * @param path A relative path to the location of child data.\n     */\n    child(path: string): firebase.database.DataSnapshot;\n    /**\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"name\": {\n     *     \"first\": \"Ada\",\n     *     \"last\": \"Lovelace\"\n     *   }\n     * }\n     *\n     * // Test for the existence of certain keys within a DataSnapshot\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var a = snapshot.exists();  // true\n     *     var b = snapshot.child(\"name\").exists(); // true\n     *     var c = snapshot.child(\"name/first\").exists(); // true\n     *     var d = snapshot.child(\"name/middle\").exists(); // false\n     *   });\n     * ```\n     */\n    exists(): boolean;\n    /**\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @return The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    exportVal(): any;\n    /**\n     * Enumerates the top-level children in the `DataSnapshot`.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the ordering\n     * on the server nor the ordering of `child_added` events. That is where\n     * `forEach()` comes in handy. It guarantees the children of a `DataSnapshot`\n     * will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"users\": {\n     *     \"ada\": {\n     *       \"first\": \"Ada\",\n     *       \"last\": \"Lovelace\"\n     *     },\n     *     \"alan\": {\n     *       \"first\": \"Alan\",\n     *       \"last\": \"Turing\"\n     *     }\n     *   }\n     * }\n     *\n     * // Loop through users in order with the forEach() method. The callback\n     * // provided to forEach() will be called synchronously with a DataSnapshot\n     * // for each child:\n     * var query = firebase.database().ref(\"users\").orderByKey();\n     * query.once(\"value\")\n     *   .then(function(snapshot) {\n     *     snapshot.forEach(function(childSnapshot) {\n     *       // key will be \"ada\" the first time and \"alan\" the second time\n     *       var key = childSnapshot.key;\n     *       // childData will be the actual contents of the child\n     *       var childData = childSnapshot.val();\n     *   });\n     * });\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // You can cancel the enumeration at any point by having your callback\n     * // function return true. For example, the following code sample will only\n     * // fire the callback function one time:\n     * var query = firebase.database().ref(\"users\").orderByKey();\n     * query.once(\"value\")\n     *   .then(function(snapshot) {\n     *     snapshot.forEach(function(childSnapshot) {\n     *       var key = childSnapshot.key; // \"ada\"\n     *\n     *       // Cancel enumeration\n     *       return true;\n     *   });\n     * });\n     * ```\n     *\n     * @param action A function\n     *   that will be called for each child DataSnapshot. The callback can return\n     *   true to cancel further enumeration.\n     * @return true if enumeration was canceled due to your callback\n     *   returning true.\n     */\n    forEach(\n      action: (a: firebase.database.IteratedDataSnapshot) => boolean | void,\n    ): boolean;\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data\n     *  Sorting and filtering data}).\n     */\n    getPriority(): string | number | null;\n    /**\n     * Returns true if the specified child path has (non-null) data.\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"name\": {\n     *     \"first\": \"Ada\",\n     *     \"last\": \"Lovelace\"\n     *   }\n     * }\n     *\n     * // Determine which child keys in DataSnapshot have data.\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var hasName = snapshot.hasChild(\"name\"); // true\n     *     var hasAge = snapshot.hasChild(\"age\"); // false\n     *   });\n     * ```\n     *\n     * @param path A relative path to the location of a potential child.\n     * @return `true` if data exists at the specified child path; else\n     *  `false`.\n     */\n    hasChild(path: string): boolean;\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"name\": {\n     *     \"first\": \"Ada\",\n     *     \"last\": \"Lovelace\"\n     *   }\n     * }\n     *\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var a = snapshot.hasChildren(); // true\n     *     var b = snapshot.child(\"name\").hasChildren(); // true\n     *     var c = snapshot.child(\"name/first\").hasChildren(); // false\n     *   });\n     * ```\n     *\n     * @return true if this snapshot has any children; else false.\n     */\n    hasChildren(): boolean;\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return `null`.\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"name\": {\n     *     \"first\": \"Ada\",\n     *     \"last\": \"Lovelace\"\n     *   }\n     * }\n     *\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var key = snapshot.key; // \"ada\"\n     *     var childKey = snapshot.child(\"name/last\").key; // \"last\"\n     *   });\n     * ```\n     *\n     * @example\n     * ```javascript\n     * var rootRef = firebase.database().ref();\n     * rootRef.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var key = snapshot.key; // null\n     *     var childKey = snapshot.child(\"users/ada\").key; // \"ada\"\n     *   });\n     * ```\n     */\n    key: string | null;\n    /**\n     * Returns the number of child properties of this `DataSnapshot`.\n     *\n     * @example\n     * ```javascript\n     * // Assume we have the following data in the Database:\n     * {\n     *   \"name\": {\n     *     \"first\": \"Ada\",\n     *     \"last\": \"Lovelace\"\n     *   }\n     * }\n     *\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.once(\"value\")\n     *   .then(function(snapshot) {\n     *     var a = snapshot.numChildren(); // 1 (\"name\")\n     *     var b = snapshot.child(\"name\").numChildren(); // 2 (\"first\", \"last\")\n     *     var c = snapshot.child(\"name/first\").numChildren(); // 0\n     *   });\n     * ```\n     */\n    numChildren(): number;\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may also\n     * return null, indicating that the `DataSnapshot` is empty (contains no data).\n     *\n     * @example\n     * ```javascript\n     * // Write and then read back a string from the Database.\n     * ref.set(\"hello\")\n     *   .then(function() {\n     *     return ref.once(\"value\");\n     *   })\n     *   .then(function(snapshot) {\n     *     var data = snapshot.val(); // data === \"hello\"\n     *   });\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // Write and then read back a JavaScript object from the Database.\n     * ref.set({ name: \"Ada\", age: 36 })\n     *   .then(function() {\n     *    return ref.once(\"value\");\n     *   })\n     *   .then(function(snapshot) {\n     *     var data = snapshot.val();\n     *     // data is { \"name\": \"Ada\", \"age\": 36 }\n     *     // data.name === \"Ada\"\n     *     // data.age === 36\n     *   });\n     * ```\n     *\n     * @return The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    val(): any;\n    /**\n     * The `Reference` for the location that generated this `DataSnapshot`.\n     */\n    ref: firebase.database.Reference;\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON(): Object | null;\n  }\n\n  interface IteratedDataSnapshot extends DataSnapshot {\n    key: string; // key of the location of this snapshot.\n  }\n\n  /**\n   * The Firebase Database service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.database `firebase.database()`}.\n   *\n   * See\n   * {@link\n   *   https://firebase.google.com/docs/database/web/start/\n   *   Installation &amp; Setup in JavaScript}\n   * for a full guide on how to use the Firebase Database service.\n   */\n  interface Database {\n    /**\n     * The {@link firebase.app.App app} associated with the `Database` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = database.app;\n     * ```\n     */\n    app: firebase.app.App;\n    /**\n     * Additional methods for debugging and special cases.\n     *\n     */\n    INTERNAL: {\n      /**\n       * Force the use of WebSockets instead of long polling.\n       */\n      forceWebSockets: () => void;\n      /**\n       * Force the use of long polling instead of WebSockets. This will be ignored if the WebSocket protocol is used in `databaseURL`.\n       */\n      forceLongPolling: () => void;\n    };\n    /**\n     * Modify this instance to communicate with the Realtime Database emulator.\n     *\n     * <p>Note: This method must be called before performing any other operation.\n     *\n     * @param host the emulator host (ex: localhost)\n     * @param port the emulator port (ex: 8080)\n     * @param options.mockUserToken the mock auth token to use for unit testing Security Rules\n     */\n    useEmulator(\n      host: string,\n      port: number,\n      options?: {\n        mockUserToken?: EmulatorMockTokenOptions | string;\n      },\n    ): void;\n    /**\n     * Disconnects from the server (all Database operations will be completed\n     * offline).\n     *\n     * The client automatically maintains a persistent connection to the Database\n     * server, which will remain active indefinitely and reconnect when\n     * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n     * to control the client connection in cases where a persistent connection is\n     * undesirable.\n     *\n     * While offline, the client will no longer receive data updates from the\n     * Database. However, all Database operations performed locally will continue to\n     * immediately fire events, allowing your application to continue behaving\n     * normally. Additionally, each operation performed locally will automatically\n     * be queued and retried upon reconnection to the Database server.\n     *\n     * To reconnect to the Database and begin receiving remote events, see\n     * `goOnline()`.\n     *\n     * @example\n     * ```javascript\n     * firebase.database().goOffline();\n     * ```\n     */\n    goOffline(): any;\n    /**\n     * Reconnects to the server and synchronizes the offline Database state\n     * with the server state.\n     *\n     * This method should be used after disabling the active connection with\n     * `goOffline()`. Once reconnected, the client will transmit the proper data\n     * and fire the appropriate events so that your client \"catches up\"\n     * automatically.\n     *\n     * @example\n     * ```javascript\n     * firebase.database().goOnline();\n     * ```\n     */\n    goOnline(): any;\n    /**\n     * Returns a `Reference` representing the location in the Database\n     * corresponding to the provided path. If no path is provided, the `Reference`\n     * will point to the root of the Database.\n     *\n     * @example\n     * ```javascript\n     * // Get a reference to the root of the Database\n     * var rootRef = firebase.database().ref();\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // Get a reference to the /users/ada node\n     * var adaRef = firebase.database().ref(\"users/ada\");\n     * // The above is shorthand for the following operations:\n     * //var rootRef = firebase.database().ref();\n     * //var adaRef = rootRef.child(\"users/ada\");\n     * ```\n     *\n     * @param path Optional path representing the location the returned\n     *   `Reference` will point. If not provided, the returned `Reference` will\n     *   point to the root of the Database.\n     * @return If a path is provided, a `Reference`\n     *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n     *   root of the Database.\n     */\n    ref(path?: string): firebase.database.Reference;\n    /**\n     * Returns a `Reference` representing the location in the Database\n     * corresponding to the provided Firebase URL.\n     *\n     * An exception is thrown if the URL is not a valid Firebase Database URL or it\n     * has a different domain than the current `Database` instance.\n     *\n     * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n     * and are not applied to the returned `Reference`.\n     *\n     * @example\n     * ```javascript\n     * // Get a reference to the root of the Database\n     * var rootRef = firebase.database().ref(\"https://<DATABASE_NAME>.firebaseio.com\");\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // Get a reference to the /users/ada node\n     * var adaRef = firebase.database().ref(\"https://<DATABASE_NAME>.firebaseio.com/users/ada\");\n     * ```\n     *\n     * @param url The Firebase URL at which the returned `Reference` will\n     *   point.\n     * @return A `Reference` pointing to the provided\n     *   Firebase URL.\n     */\n    refFromURL(url: string): firebase.database.Reference;\n  }\n\n  /**\n   * The `onDisconnect` class allows you to write or clear data when your client\n   * disconnects from the Database server. These updates occur whether your\n   * client disconnects cleanly or not, so you can rely on them to clean up data\n   * even if a connection is dropped or a client crashes.\n   *\n   * The `onDisconnect` class is most commonly used to manage presence in\n   * applications where it is useful to detect how many clients are connected and\n   * when other clients disconnect. See\n   * {@link\n   *   https://firebase.google.com/docs/database/web/offline-capabilities\n   *   Enabling Offline Capabilities in JavaScript} for more information.\n   *\n   * To avoid problems when a connection is dropped before the requests can be\n   * transferred to the Database server, these functions should be called before\n   * writing any data.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time you reconnect.\n   */\n  interface OnDisconnect {\n    /**\n     * Cancels all previously queued `onDisconnect()` set or update events for this\n     * location and all children.\n     *\n     * If a write has been queued for this location via a `set()` or `update()` at a\n     * parent location, the write at this location will be canceled, though writes\n     * to sibling locations will still occur.\n     *\n     * @example\n     * ```javascript\n     * var ref = firebase.database().ref(\"onlineState\");\n     * ref.onDisconnect().set(false);\n     * // ... sometime later\n     * ref.onDisconnect().cancel();\n     * ```\n     *\n     * @param onComplete An optional callback function that will\n     *   be called when synchronization to the server has completed. The callback\n     *   will be passed a single parameter: null for success, or an Error object\n     *   indicating a failure.\n     * @return Resolves when synchronization to the server\n     *   is complete.\n     */\n    cancel(onComplete?: (a: Error | null) => any): Promise<any>;\n    /**\n     * Ensures the data at this location is deleted when the client is disconnected\n     * (due to closing the browser, navigating to a new page, or network issues).\n     *\n     * @param onComplete An optional callback function that will\n     *   be called when synchronization to the server has completed. The callback\n     *   will be passed a single parameter: null for success, or an Error object\n     *   indicating a failure.\n     * @return Resolves when synchronization to the server\n     *   is complete.\n     */\n    remove(onComplete?: (a: Error | null) => any): Promise<any>;\n    /**\n     * Ensures the data at this location is set to the specified value when the\n     * client is disconnected (due to closing the browser, navigating to a new page,\n     * or network issues).\n     *\n     * `set()` is especially useful for implementing \"presence\" systems, where a\n     * value should be changed or cleared when a user disconnects so that they\n     * appear \"offline\" to other users. See\n     * {@link\n     *   https://firebase.google.com/docs/database/web/offline-capabilities\n     *   Enabling Offline Capabilities in JavaScript} for more information.\n     *\n     * Note that `onDisconnect` operations are only triggered once. If you want an\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\n     * the `onDisconnect` operations each time.\n     *\n     * @example\n     * ```javascript\n     * var ref = firebase.database().ref(\"users/ada/status\");\n     * ref.onDisconnect().set(\"I disconnected!\");\n     * ```\n     *\n     * @param value The value to be written to this location on\n     *   disconnect (can be an object, array, string, number, boolean, or null).\n     * @param onComplete An optional callback function that\n     *   will be called when synchronization to the Database server has completed.\n     *   The callback will be passed a single parameter: null for success, or an\n     *   `Error` object indicating a failure.\n     * @return Resolves when synchronization to the\n     *   Database is complete.\n     */\n    set(value: any, onComplete?: (a: Error | null) => any): Promise<any>;\n    /**\n     * Ensures the data at this location is set to the specified value and priority\n     * when the client is disconnected (due to closing the browser, navigating to a\n     * new page, or network issues).\n     */\n    setWithPriority(\n      value: any,\n      priority: number | string | null,\n      onComplete?: (a: Error | null) => any,\n    ): Promise<any>;\n    /**\n     * Writes multiple values at this location when the client is disconnected (due\n     * to closing the browser, navigating to a new page, or network issues).\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\n     * from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * See more examples using the connected version of\n     * {@link firebase.database.Reference.update `update()`}.\n     *\n     * @example\n     * ```javascript\n     * var ref = firebase.database().ref(\"users/ada\");\n     * ref.update({\n     *    onlineState: true,\n     *    status: \"I'm online.\"\n     * });\n     * ref.onDisconnect().update({\n     *   onlineState: false,\n     *   status: \"I'm offline.\"\n     * });\n     * ```\n     *\n     * @param values Object containing multiple values.\n     * @param onComplete An optional callback function that will\n     *   be called when synchronization to the server has completed. The\n     *   callback will be passed a single parameter: null for success, or an Error\n     *   object indicating a failure.\n     * @return Resolves when synchronization to the\n     *   Database is complete.\n     */\n    update(values: Object, onComplete?: (a: Error | null) => any): Promise<any>;\n  }\n\n  type EventType =\n    | \"value\"\n    | \"child_added\"\n    | \"child_changed\"\n    | \"child_moved\"\n    | \"child_removed\";\n\n  /**\n   * A `Query` sorts and filters the data at a Database location so only a subset\n   * of the child data is included. This can be used to order a collection of\n   * data by some attribute (for example, height of dinosaurs) as well as to\n   * restrict a large list of items (for example, chat messages) down to a number\n   * suitable for synchronizing to the client. Queries are created by chaining\n   * together one or more of the filter methods defined here.\n   *\n   * Just as with a `Reference`, you can receive data from a `Query` by using the\n   * `on()` method. You will only receive events and `DataSnapshot`s for the\n   * subset of the data that matches your query.\n   *\n   * Read our documentation on\n   * {@link\n   *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data\n   *  Sorting and filtering data} for more information.\n   */\n  interface Query {\n    /**\n     * Creates a `Query` with the specified ending point.\n     *\n     * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n     * allows you to choose arbitrary starting and ending points for your queries.\n     *\n     * The ending point is inclusive, so children with exactly the specified value\n     * will be included in the query. The optional key argument can be used to\n     * further limit the range of the query. If it is specified, then children that\n     * have exactly the specified value must also have a key name less than or equal\n     * to the specified key.\n     *\n     * You can read more about `endAt()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data\n     *  Filtering data}.\n     *\n     * @example\n     * ```javascript\n     * // Find all dinosaurs whose names come before Pterodactyl lexicographically.\n     * // Include Pterodactyl in the result.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByKey().endAt(\"pterodactyl\").on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key);\n     * });\n     * ```\n     *\n     * @param value The value to end at. The argument\n     *   type depends on which `orderBy*()` function was used in this query.\n     *   Specify a value that matches the `orderBy*()` type. When used in\n     *   combination with `orderByKey()`, the value must be a string.\n     * @param key The child key to end at, among the children with the\n     *   previously specified priority. This argument is only allowed if ordering by\n     *   child, value, or priority.\n     */\n    endAt(\n      value: number | string | boolean | null,\n      key?: string,\n    ): firebase.database.Query;\n    /**\n     * Creates a `Query` with the specified ending point (exclusive).\n     *\n     * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n     * allows you to choose arbitrary starting and ending points for your queries.\n     *\n     * The ending point is exclusive. If only a value is provided, children\n     * with a value less than the specified value will be included in the query.\n     * If a key is specified, then children must have a value less than or equal\n     * to the specified value and a a key name less than the specified key.\n     *\n     * @example\n     * ```javascript\n     * // Find all dinosaurs whose names come before Pterodactyl lexicographically.\n     * // Do not include Pterodactyl in the result.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByKey().endBefore(\"pterodactyl\").on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key);\n     * });\n     *\n     * @param value The value to end before. The argument\n     *   type depends on which `orderBy*()` function was used in this query.\n     *   Specify a value that matches the `orderBy*()` type. When used in\n     *   combination with `orderByKey()`, the value must be a string.\n     * @param key The child key to end before, among the children with the\n     *   previously specified priority. This argument is only allowed if ordering by\n     *   child, value, or priority.\n     */\n    endBefore(\n      value: number | string | boolean | null,\n      key?: string,\n    ): firebase.database.Query;\n    /**\n     * Creates a `Query` that includes children that match the specified value.\n     *\n     * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n     * allows you to choose arbitrary starting and ending points for your queries.\n     *\n     * The optional key argument can be used to further limit the range of the\n     * query. If it is specified, then children that have exactly the specified\n     * value must also have exactly the specified key as their key name. This can be\n     * used to filter result sets with many matches for the same value.\n     *\n     * You can read more about `equalTo()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data\n     *  Filtering data}.\n     *\n     * @example\n     * ```javascript\n     * // Find all dinosaurs whose height is exactly 25 meters.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByChild(\"height\").equalTo(25).on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key);\n     * });\n     * ```\n     *\n     * @param value The value to match for. The\n     *   argument type depends on which `orderBy*()` function was used in this\n     *   query. Specify a value that matches the `orderBy*()` type. When used in\n     *   combination with `orderByKey()`, the value must be a string.\n     * @param key The child key to start at, among the children with the\n     *   previously specified priority. This argument is only allowed if ordering by\n     *   child, value, or priority.\n     */\n    equalTo(\n      value: number | string | boolean | null,\n      key?: string,\n    ): firebase.database.Query;\n    /**\n     * Returns whether or not the current and provided queries represent the same\n     * location, have the same query parameters, and are from the same instance of\n     * `firebase.app.App`.\n     *\n     * Two `Reference` objects are equivalent if they represent the same location\n     * and are from the same instance of `firebase.app.App`.\n     *\n     * Two `Query` objects are equivalent if they represent the same location, have\n     * the same query parameters, and are from the same instance of\n     * `firebase.app.App`. Equivalent queries share the same sort order, limits, and\n     * starting and ending points.\n     *\n     * @example\n     * ```javascript\n     * var rootRef = firebase.database.ref();\n     * var usersRef = rootRef.child(\"users\");\n     *\n     * usersRef.isEqual(rootRef);  // false\n     * usersRef.isEqual(rootRef.child(\"users\"));  // true\n     * usersRef.parent.isEqual(rootRef);  // true\n     * ```\n     *\n     * @example\n     * ```javascript\n     * var rootRef = firebase.database.ref();\n     * var usersRef = rootRef.child(\"users\");\n     * var usersQuery = usersRef.limitToLast(10);\n     *\n     * usersQuery.isEqual(usersRef);  // false\n     * usersQuery.isEqual(usersRef.limitToLast(10));  // true\n     * usersQuery.isEqual(rootRef.limitToLast(10));  // false\n     * usersQuery.isEqual(usersRef.orderByKey().limitToLast(10));  // false\n     * ```\n     *\n     * @param other The query to compare against.\n     * @return Whether or not the current and provided queries are\n     *   equivalent.\n     */\n    isEqual(other: firebase.database.Query | null): boolean;\n    /**\n     * Generates a new `Query` limited to the first specific number of children.\n     *\n     * The `limitToFirst()` method is used to set a maximum number of children to be\n     * synced for a given callback. If we set a limit of 100, we will initially only\n     * receive up to 100 `child_added` events. If we have fewer than 100 messages\n     * stored in our Database, a `child_added` event will fire for each message.\n     * However, if we have over 100 messages, we will only receive a `child_added`\n     * event for the first 100 ordered messages. As items change, we will receive\n     * `child_removed` events for each item that drops out of the active list so\n     * that the total number stays at 100.\n     *\n     * You can read more about `limitToFirst()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data\n     *  Filtering data}.\n     *\n     * @example\n     * ```javascript\n     * // Find the two shortest dinosaurs.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByChild(\"height\").limitToFirst(2).on(\"child_added\", function(snapshot) {\n     *   // This will be called exactly two times (unless there are less than two\n     *   // dinosaurs in the Database).\n     *\n     *   // It will also get fired again if one of the first two dinosaurs is\n     *   // removed from the data set, as a new dinosaur will now be the second\n     *   // shortest.\n     *   console.log(snapshot.key);\n     * });\n     * ```\n     *\n     * @param limit The maximum number of nodes to include in this query.\n     */\n    limitToFirst(limit: number): firebase.database.Query;\n    /**\n     * Generates a new `Query` object limited to the last specific number of\n     * children.\n     *\n     * The `limitToLast()` method is used to set a maximum number of children to be\n     * synced for a given callback. If we set a limit of 100, we will initially only\n     * receive up to 100 `child_added` events. If we have fewer than 100 messages\n     * stored in our Database, a `child_added` event will fire for each message.\n     * However, if we have over 100 messages, we will only receive a `child_added`\n     * event for the last 100 ordered messages. As items change, we will receive\n     * `child_removed` events for each item that drops out of the active list so\n     * that the total number stays at 100.\n     *\n     * You can read more about `limitToLast()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data\n     *  Filtering data}.\n     *\n     * @example\n     * ```javascript\n     * // Find the two heaviest dinosaurs.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByChild(\"weight\").limitToLast(2).on(\"child_added\", function(snapshot) {\n     *   // This callback will be triggered exactly two times, unless there are\n     *   // fewer than two dinosaurs stored in the Database. It will also get fired\n     *   // for every new, heavier dinosaur that gets added to the data set.\n     *   console.log(snapshot.key);\n     * });\n     * ```\n     *\n     * @param limit The maximum number of nodes to include in this query.\n     */\n    limitToLast(limit: number): firebase.database.Query;\n    /**\n     * Detaches a callback previously attached with `on()`.\n     *\n     * Detach a callback previously attached with `on()`. Note that if `on()` was\n     * called multiple times with the same eventType and callback, the callback\n     * will be called multiple times for each event, and `off()` must be called\n     * multiple times to remove the callback. Calling `off()` on a parent listener\n     * will not automatically remove listeners registered on child nodes, `off()`\n     * must also be called on any child listeners to remove the callback.\n     *\n     * If a callback is not specified, all callbacks for the specified eventType\n     * will be removed. Similarly, if no eventType is specified, all callbacks\n     * for the `Reference` will be removed.\n     *\n     * @example\n     * ```javascript\n     * var onValueChange = function(dataSnapshot) {  ... };\n     * ref.on('value', onValueChange);\n     * ref.child('meta-data').on('child_added', onChildAdded);\n     * // Sometime later...\n     * ref.off('value', onValueChange);\n     *\n     * // You must also call off() for any child listeners on ref\n     * // to cancel those callbacks\n     * ref.child('meta-data').off('child_added', onValueAdded);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // Or you can save a line of code by using an inline function\n     * // and on()'s return value.\n     * var onValueChange = ref.on('value', function(dataSnapshot) { ... });\n     * // Sometime later...\n     * ref.off('value', onValueChange);\n     * ```\n     *\n     * @param eventType One of the following strings: \"value\",\n     *   \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\" If\n     *   omitted, all callbacks for the `Reference` will be removed.\n     * @param callback The callback function that was passed to `on()` or\n     *   `undefined` to remove all callbacks.\n     * @param context The context that was passed to `on()`.\n     */\n    off(\n      eventType?: EventType,\n      callback?: (a: firebase.database.DataSnapshot, b?: string | null) => any,\n      context?: Object | null,\n    ): void;\n\n    /**\n     * Gets the most up-to-date result for this query.\n     *\n     * @return A promise which resolves to the resulting DataSnapshot if\n     * a value is available, or rejects if the client is unable to return\n     * a value (e.g., if the server is unreachable and there is nothing\n     * cached).\n     */\n    get(): Promise<DataSnapshot>;\n\n    /**\n     * Listens for data changes at a particular location.\n     *\n     * This is the primary way to read data from a Database. Your callback\n     * will be triggered for the initial data and again whenever the data changes.\n     * Use `off( )` to stop receiving updates. See\n     * {@link https://firebase.google.com/docs/database/web/retrieve-data\n     *   Retrieve Data on the Web}\n     * for more details.\n     *\n     * <h4>value event</h4>\n     *\n     * This event will trigger once with the initial data stored at this location,\n     * and then trigger again each time the data changes. The `DataSnapshot` passed\n     * to the callback will be for the location at which `on()` was called. It\n     * won't trigger until the entire contents has been synchronized. If the\n     * location has no data, it will be triggered with an empty `DataSnapshot`\n     * (`val()` will return `null`).\n     *\n     * <h4>child_added event</h4>\n     *\n     * This event will be triggered once for each initial child at this location,\n     * and it will be triggered again every time a new child is added. The\n     * `DataSnapshot` passed into the callback will reflect the data for the\n     * relevant child. For ordering purposes, it is passed a second argument which\n     * is a string containing the key of the previous sibling child by sort order,\n     * or `null` if it is the first child.\n     *\n     * <h4>child_removed event</h4>\n     *\n     * This event will be triggered once every time a child is removed. The\n     * `DataSnapshot` passed into the callback will be the old data for the child\n     * that was removed. A child will get removed when either:\n     *\n     * - a client explicitly calls `remove()` on that child or one of its ancestors\n     * - a client calls `set(null)` on that child or one of its ancestors\n     * - that child has all of its children removed\n     * - there is a query in effect which now filters out the child (because it's\n     *   sort order changed or the max limit was hit)\n     *\n     * <h4>child_changed event</h4>\n     *\n     * This event will be triggered when the data stored in a child (or any of its\n     * descendants) changes. Note that a single `child_changed` event may represent\n     * multiple changes to the child. The `DataSnapshot` passed to the callback will\n     * contain the new child contents. For ordering purposes, the callback is also\n     * passed a second argument which is a string containing the key of the previous\n     * sibling child by sort order, or `null` if it is the first child.\n     *\n     * <h4>child_moved event</h4>\n     *\n     * This event will be triggered when a child's sort order changes such that its\n     * position relative to its siblings changes. The `DataSnapshot` passed to the\n     * callback will be for the data of the child that has moved. It is also passed\n     * a second argument which is a string containing the key of the previous\n     * sibling child by sort order, or `null` if it is the first child.\n     *\n     * @example **Handle a new value:**\n     * ```javascript\n     * ref.on('value', function(dataSnapshot) {\n     *   ...\n     * });\n     * ```\n     *\n     * @example **Handle a new child:**\n     * ```javascript\n     * ref.on('child_added', function(childSnapshot, prevChildKey) {\n     *   ...\n     * });\n     * ```\n     *\n     * @example **Handle child removal:**\n     * ```javascript\n     * ref.on('child_removed', function(oldChildSnapshot) {\n     *   ...\n     * });\n     * ```\n     *\n     * @example **Handle child data changes:**\n     * ```javascript\n     * ref.on('child_changed', function(childSnapshot, prevChildKey) {\n     *   ...\n     * });\n     * ```\n     *\n     * @example **Handle child ordering changes:**\n     * ```javascript\n     * ref.on('child_moved', function(childSnapshot, prevChildKey) {\n     *   ...\n     * });\n     * ```\n     *\n     * @param eventType One of the following strings: \"value\",\n     *   \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\"\n     * @param callback A\n     *   callback that fires when the specified event occurs. The callback will be\n     *   passed a DataSnapshot. For ordering purposes, \"child_added\",\n     *   \"child_changed\", and \"child_moved\" will also be passed a string containing\n     *   the key of the previous child, by sort order, or `null` if it is the\n     *   first child.\n     * @param cancelCallbackOrContext An optional\n     *   callback that will be notified if your event subscription is ever canceled\n     *   because your client does not have permission to read this data (or it had\n     *   permission but has now lost it). This callback will be passed an `Error`\n     *   object indicating why the failure occurred.\n     * @param context If provided, this object will be used as `this`\n     *   when calling your callback(s).\n     * @return The provided\n     *   callback function is returned unmodified. This is just for convenience if\n     *   you want to pass an inline function to `on()` but store the callback\n     *   function for later passing to `off()`.\n     */\n    on(\n      eventType: EventType,\n      callback: (a: firebase.database.DataSnapshot, b?: string | null) => any,\n      cancelCallbackOrContext?: ((a: Error) => any) | Object | null,\n      context?: Object | null,\n    ): (a: firebase.database.DataSnapshot | null, b?: string | null) => any;\n\n    /**\n     * Listens for exactly one event of the specified event type, and then stops\n     * listening.\n     *\n     * This is equivalent to calling {@link firebase.database.Query.on `on()`}, and\n     * then calling {@link firebase.database.Query.off `off()`} inside the callback\n     * function. See {@link firebase.database.Query.on `on()`} for details on the\n     * event types.\n     *\n     * @example\n     * ```javascript\n     * // Basic usage of .once() to read the data located at ref.\n     * ref.once('value')\n     *   .then(function(dataSnapshot) {\n     *     // handle read data.\n     *   });\n     * ```\n     *\n     * @param eventType One of the following strings: \"value\",\n     *   \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\"\n     * @param successCallback A\n     *   callback that fires when the specified event occurs. The callback will be\n     *   passed a DataSnapshot. For ordering purposes, \"child_added\",\n     *   \"child_changed\", and \"child_moved\" will also be passed a string containing\n     *   the key of the previous child by sort order, or `null` if it is the\n     *   first child.\n     * @param failureCallbackOrContext An optional\n     *   callback that will be notified if your client does not have permission to\n     *   read the data. This callback will be passed an `Error` object indicating\n     *   why the failure occurred.\n     * @param context If provided, this object will be used as `this`\n     *   when calling your callback(s).\n     */\n    once(\n      eventType: EventType,\n      successCallback?: (\n        a: firebase.database.DataSnapshot,\n        b?: string | null,\n      ) => any,\n      failureCallbackOrContext?: ((a: Error) => void) | Object | null,\n      context?: Object | null,\n    ): Promise<firebase.database.DataSnapshot>;\n    /**\n     * Generates a new `Query` object ordered by the specified child key.\n     *\n     * Queries can only order by one key at a time. Calling `orderByChild()`\n     * multiple times on the same query is an error.\n     *\n     * Firebase queries allow you to order your data by any child key on the fly.\n     * However, if you know in advance what your indexes will be, you can define\n     * them via the .indexOn rule in your Security Rules for better performance. See\n     * the {@link https://firebase.google.com/docs/database/security/indexing-data\n     * .indexOn} rule for more information.\n     *\n     * You can read more about `orderByChild()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data\n     *  Sort data}.\n     *\n     * @example\n     * ```javascript\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByChild(\"height\").on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key + \" was \" + snapshot.val().height + \" m tall\");\n     * });\n     * ```\n     */\n    orderByChild(path: string): firebase.database.Query;\n    /**\n     * Generates a new `Query` object ordered by key.\n     *\n     * Sorts the results of a query by their (ascending) key values.\n     *\n     * You can read more about `orderByKey()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data\n     *  Sort data}.\n     *\n     * @example\n     * ```javascript\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByKey().on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key);\n     * });\n     * ```\n     */\n    orderByKey(): firebase.database.Query;\n    /**\n     * Generates a new `Query` object ordered by priority.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data\n     *  Sort data} for alternatives to priority.\n     */\n    orderByPriority(): firebase.database.Query;\n    /**\n     * Generates a new `Query` object ordered by value.\n     *\n     * If the children of a query are all scalar values (string, number, or\n     * boolean), you can order the results by their (ascending) values.\n     *\n     * You can read more about `orderByValue()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data\n     *  Sort data}.\n     *\n     * @example\n     * ```javascript\n     * var scoresRef = firebase.database().ref(\"scores\");\n     * scoresRef.orderByValue().limitToLast(3).on(\"value\", function(snapshot) {\n     *   snapshot.forEach(function(data) {\n     *     console.log(\"The \" + data.key + \" score is \" + data.val());\n     *   });\n     * });\n     * ```\n     */\n    orderByValue(): firebase.database.Query;\n    /**\n     * Returns a `Reference` to the `Query`'s location.\n     */\n    ref: firebase.database.Reference;\n    /**\n     * Creates a `Query` with the specified starting point.\n     *\n     * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n     * allows you to choose arbitrary starting and ending points for your queries.\n     *\n     * The starting point is inclusive, so children with exactly the specified value\n     * will be included in the query. The optional key argument can be used to\n     * further limit the range of the query. If it is specified, then children that\n     * have exactly the specified value must also have a key name greater than or\n     * equal to the specified key.\n     *\n     * You can read more about `startAt()` in\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data\n     *  Filtering data}.\n     *\n     * @example\n     * ```javascript\n     * // Find all dinosaurs that are at least three meters tall.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByChild(\"height\").startAt(3).on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key)\n     * });\n     * ```\n     *\n     * @param value The value to start at. The argument\n     *   type depends on which `orderBy*()` function was used in this query.\n     *   Specify a value that matches the `orderBy*()` type. When used in\n     *   combination with `orderByKey()`, the value must be a string.\n     * @param key The child key to start at. This argument is only allowed\n     *   if ordering by child, value, or priority.\n     */\n    startAt(\n      value: number | string | boolean | null,\n      key?: string,\n    ): firebase.database.Query;\n    /**\n     * Creates a `Query` with the specified starting point (exclusive).\n     *\n     * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n     * allows you to choose arbitrary starting and ending points for your queries.\n     *\n     * The starting point is exclusive. If only a value is provided, children\n     * with a value greater than the specified value will be included in the query.\n     * If a key is specified, then children must have a value greater than or equal\n     * to the specified value and a a key name greater than the specified key.\n     *\n     * @example\n     * ```javascript\n     * // Find all dinosaurs that are more than three meters tall.\n     * var ref = firebase.database().ref(\"dinosaurs\");\n     * ref.orderByChild(\"height\").startAfter(3).on(\"child_added\", function(snapshot) {\n     *   console.log(snapshot.key)\n     * });\n     * ```\n     *\n     * @param value The value to start after. The argument\n     *   type depends on which `orderBy*()` function was used in this query.\n     *   Specify a value that matches the `orderBy*()` type. When used in\n     *   combination with `orderByKey()`, the value must be a string.\n     * @param key The child key to start after. This argument is only allowed\n     *   if ordering by child, value, or priority.\n     */\n    startAfter(\n      value: number | string | boolean | null,\n      key?: string,\n    ): firebase.database.Query;\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @return A JSON-serializable representation of this object.\n     */\n    toJSON(): Object;\n    /**\n     * Gets the absolute URL for this location.\n     *\n     * The `toString()` method returns a URL that is ready to be put into a browser,\n     * curl command, or a `firebase.database().refFromURL()` call. Since all of\n     * those expect the URL to be url-encoded, `toString()` returns an encoded URL.\n     *\n     * Append '.json' to the returned URL when typed into a browser to download\n     * JSON-formatted data. If the location is secured (that is, not publicly\n     * readable), you will get a permission-denied error.\n     *\n     * @example\n     * ```javascript\n     * // Calling toString() on a root Firebase reference returns the URL where its\n     * // data is stored within the Database:\n     * var rootRef = firebase.database().ref();\n     * var rootUrl = rootRef.toString();\n     * // rootUrl === \"https://sample-app.firebaseio.com/\".\n     *\n     * // Calling toString() at a deeper Firebase reference returns the URL of that\n     * // deep path within the Database:\n     * var adaRef = rootRef.child('users/ada');\n     * var adaURL = adaRef.toString();\n     * // adaURL === \"https://sample-app.firebaseio.com/users/ada\".\n     * ```\n     *\n     * @return The absolute URL for this location.\n     */\n    toString(): string;\n  }\n\n  /**\n   * A `Reference` represents a specific location in your Database and can be used\n   * for reading or writing data to that Database location.\n   *\n   * You can reference the root or child location in your Database by calling\n   * `firebase.database().ref()` or `firebase.database().ref(\"child/path\")`.\n   *\n   * Writing is done with the `set()` method and reading can be done with the\n   * `on()` method. See\n   * {@link\n   *   https://firebase.google.com/docs/database/web/read-and-write\n   *   Read and Write Data on the Web}\n   */\n  interface Reference extends firebase.database.Query {\n    /**\n     * Gets a `Reference` for the location at the specified relative path.\n     *\n     * The relative path can either be a simple child name (for example, \"ada\") or\n     * a deeper slash-separated path (for example, \"ada/name/first\").\n     *\n     * @example\n     * ```javascript\n     * var usersRef = firebase.database().ref('users');\n     * var adaRef = usersRef.child('ada');\n     * var adaFirstNameRef = adaRef.child('name/first');\n     * var path = adaFirstNameRef.toString();\n     * // path is now 'https://sample-app.firebaseio.com/users/ada/name/first'\n     * ```\n     *\n     * @param path A relative path from this location to the desired child\n     *   location.\n     * @return The specified child location.\n     */\n    child(path: string): firebase.database.Reference;\n    /**\n     * The last part of the `Reference`'s path.\n     *\n     * For example, `\"ada\"` is the key for\n     * `https://<DATABASE_NAME>.firebaseio.com/users/ada`.\n     *\n     * The key of a root `Reference` is `null`.\n     *\n     * @example\n     * ```javascript\n     * // The key of a root reference is null\n     * var rootRef = firebase.database().ref();\n     * var key = rootRef.key;  // key === null\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // The key of any non-root reference is the last token in the path\n     * var adaRef = firebase.database().ref(\"users/ada\");\n     * var key = adaRef.key;  // key === \"ada\"\n     * key = adaRef.child(\"name/last\").key;  // key === \"last\"\n     * ```\n     */\n    key: string | null;\n    /**\n     * Returns an `OnDisconnect` object - see\n     * {@link\n     *   https://firebase.google.com/docs/database/web/offline-capabilities\n     *   Enabling Offline Capabilities in JavaScript} for more information on how\n     * to use it.\n     */\n    onDisconnect(): firebase.database.OnDisconnect;\n    /**\n     * The parent location of a `Reference`.\n     *\n     * The parent of a root `Reference` is `null`.\n     *\n     * @example\n     * ```javascript\n     * // The parent of a root reference is null\n     * var rootRef = firebase.database().ref();\n     * parent = rootRef.parent;  // parent === null\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // The parent of any non-root reference is the parent location\n     * var usersRef = firebase.database().ref(\"users\");\n     * var adaRef = firebase.database().ref(\"users/ada\");\n     * // usersRef and adaRef.parent represent the same location\n     * ```\n     */\n    parent: firebase.database.Reference | null;\n    /**\n     * Generates a new child location using a unique key and returns its\n     * `Reference`.\n     *\n     * This is the most common pattern for adding data to a collection of items.\n     *\n     * If you provide a value to `push()`, the value is written to the\n     * generated location. If you don't pass a value, nothing is written to the\n     * database and the child remains empty (but you can use the `Reference`\n     * elsewhere).\n     *\n     * The unique keys generated by `push()` are ordered by the current time, so the\n     * resulting list of items is chronologically sorted. The keys are also\n     * designed to be unguessable (they contain 72 random bits of entropy).\n     *\n     *\n     * See\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data\n     *  Append to a list of data}\n     * </br>See\n     * {@link\n     *  https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\n     *  The 2^120 Ways to Ensure Unique Identifiers}\n     *\n     * @example\n     * ```javascript\n     * var messageListRef = firebase.database().ref('message_list');\n     * var newMessageRef = messageListRef.push();\n     * newMessageRef.set({\n     *   'user_id': 'ada',\n     *   'text': 'The Analytical Engine weaves algebraical patterns just as the Jacquard loom weaves flowers and leaves.'\n     * });\n     * // We've appended a new message to the message_list location.\n     * var path = newMessageRef.toString();\n     * // path will be something like\n     * // 'https://sample-app.firebaseio.com/message_list/-IKo28nwJLH0Nc5XeFmj'\n     * ```\n     *\n     * @param value Optional value to be written at the generated location.\n     * @param onComplete Callback called when write to server is\n     *   complete.\n     * @return Combined `Promise` and `Reference`; resolves when write is complete, but can be\n     *   used immediately as the `Reference` to the child location.\n     */\n    push(\n      value?: any,\n      onComplete?: (a: Error | null) => any,\n    ): firebase.database.ThenableReference;\n    /**\n     * Removes the data at this Database location.\n     *\n     * Any data at child locations will also be deleted.\n     *\n     * The effect of the remove will be visible immediately and the corresponding\n     * event 'value' will be triggered. Synchronization of the remove to the\n     * Firebase servers will also be started, and the returned Promise will resolve\n     * when complete. If provided, the onComplete callback will be called\n     * asynchronously after synchronization has finished.\n     *\n     * @example\n     * ```javascript\n     * var adaRef = firebase.database().ref('users/ada');\n     * adaRef.remove()\n     *   .then(function() {\n     *     console.log(\"Remove succeeded.\")\n     *   })\n     *   .catch(function(error) {\n     *     console.log(\"Remove failed: \" + error.message)\n     *   });\n     * ```\n     *\n     * @param onComplete Callback called when write to server is\n     *   complete.\n     * @return Resolves when remove on server is complete.\n     */\n    remove(onComplete?: (a: Error | null) => void): Promise<void>;\n    /**\n     * The root `Reference` of the Database.\n     *\n     * @example\n     * ```javascript\n     * // The root of a root reference is itself\n     * var rootRef = firebase.database().ref();\n     * // rootRef and rootRef.root represent the same location\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // The root of any non-root reference is the root location\n     * var adaRef = firebase.database().ref(\"users/ada\");\n     * // rootRef and adaRef.root represent the same location\n     * ```\n     */\n    root: firebase.database.Reference;\n    /**\n     * Writes data to this Database location.\n     *\n     * This will overwrite any data at this location and all child locations.\n     *\n     * The effect of the write will be visible immediately, and the corresponding\n     * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n     * the data to the Firebase servers will also be started, and the returned\n     * Promise will resolve when complete. If provided, the `onComplete` callback\n     * will be called asynchronously after synchronization has finished.\n     *\n     * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n     * all data at this location and all child locations will be deleted.\n     *\n     * `set()` will remove any priority stored at this location, so if priority is\n     * meant to be preserved, you need to use `setWithPriority()` instead.\n     *\n     * Note that modifying data with `set()` will cancel any pending transactions\n     * at that location, so extreme care should be taken if mixing `set()` and\n     * `transaction()` to modify the same data.\n     *\n     * A single `set()` will generate a single \"value\" event at the location where\n     * the `set()` was performed.\n     *\n     * @example\n     * ```javascript\n     * var adaNameRef = firebase.database().ref('users/ada/name');\n     * adaNameRef.child('first').set('Ada');\n     * adaNameRef.child('last').set('Lovelace');\n     * // We've written 'Ada' to the Database location storing Ada's first name,\n     * // and 'Lovelace' to the location storing her last name.\n     * ```\n     *\n     * @example\n     * ```javascript\n     * adaNameRef.set({ first: 'Ada', last: 'Lovelace' });\n     * // Exact same effect as the previous example, except we've written\n     * // Ada's first and last name simultaneously.\n     * ```\n     *\n     * @example\n     * ```javascript\n     * adaNameRef.set({ first: 'Ada', last: 'Lovelace' })\n     *   .then(function() {\n     *     console.log('Synchronization succeeded');\n     *   })\n     *   .catch(function(error) {\n     *     console.log('Synchronization failed');\n     *   });\n     * // Same as the previous example, except we will also log a message\n     * // when the data has finished synchronizing.\n     * ```\n     *\n     * @param value The value to be written (string, number, boolean, object,\n     *   array, or null).\n     * @param onComplete Callback called when write to server is\n     *   complete.\n     * @return Resolves when write to server is complete.\n     */\n    set(value: any, onComplete?: (a: Error | null) => void): Promise<void>;\n    /**\n     * Sets a priority for the data at this Database location.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data\n     *  Sorting and filtering data}).\n     */\n    setPriority(\n      priority: string | number | null,\n      onComplete: (a: Error | null) => void,\n    ): Promise<void>;\n    /**\n     * Writes data the Database location. Like `set()` but also specifies the\n     * priority for that data.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link\n     *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data\n     *  Sorting and filtering data}).\n     */\n    setWithPriority(\n      newVal: any,\n      newPriority: string | number | null,\n      onComplete?: (a: Error | null) => void,\n    ): Promise<void>;\n    /**\n     * Atomically modifies the data at this location.\n     *\n     * Atomically modify the data at this location. Unlike a normal `set()`, which\n     * just overwrites the data regardless of its previous value, `transaction()` is\n     * used to modify the existing value to a new value, ensuring there are no\n     * conflicts with other clients writing to the same location at the same time.\n     *\n     * To accomplish this, you pass `transaction()` an update function which is used\n     * to transform the current value into a new value. If another client writes to\n     * the location before your new value is successfully written, your update\n     * function will be called again with the new current value, and the write will\n     * be retried. This will happen repeatedly until your write succeeds without\n     * conflict or you abort the transaction by not returning a value from your\n     * update function.\n     *\n     * Note: Modifying data with `set()` will cancel any pending transactions at\n     * that location, so extreme care should be taken if mixing `set()` and\n     * `transaction()` to update the same data.\n     *\n     * Note: When using transactions with Security and Firebase Rules in place, be\n     * aware that a client needs `.read` access in addition to `.write` access in\n     * order to perform a transaction. This is because the client-side nature of\n     * transactions requires the client to read the data in order to transactionally\n     * update it.\n     *\n     * @example\n     * ```javascript\n     * // Increment Ada's rank by 1.\n     * var adaRankRef = firebase.database().ref('users/ada/rank');\n     * adaRankRef.transaction(function(currentRank) {\n     *   // If users/ada/rank has never been set, currentRank will be `null`.\n     *   return currentRank + 1;\n     * });\n     * ```\n     *\n     * @example\n     * ```javascript\n     * // Try to create a user for ada, but only if the user id 'ada' isn't\n     * // already taken\n     * var adaRef = firebase.database().ref('users/ada');\n     * adaRef.transaction(function(currentData) {\n     *   if (currentData === null) {\n     *     return { name: { first: 'Ada', last: 'Lovelace' } };\n     *   } else {\n     *     console.log('User ada already exists.');\n     *     return; // Abort the transaction.\n     *   }\n     * }, function(error, committed, snapshot) {\n     *   if (error) {\n     *     console.log('Transaction failed abnormally!', error);\n     *   } else if (!committed) {\n     *     console.log('We aborted the transaction (because ada already exists).');\n     *   } else {\n     *     console.log('User ada added!');\n     *   }\n     *   console.log(\"Ada's data: \", snapshot.val());\n     * });\n     * ```\n     *\n     * @param transactionUpdate A developer-supplied function which\n     *   will be passed the current data stored at this location (as a JavaScript\n     *   object). The function should return the new value it would like written (as\n     *   a JavaScript object). If `undefined` is returned (i.e. you return with no\n     *   arguments) the transaction will be aborted and the data at this location\n     *   will not be modified.\n     * @param onComplete A callback\n     *   function that will be called when the transaction completes. The callback\n     *   is passed three arguments: a possibly-null `Error`, a `boolean` indicating\n     *   whether the transaction was committed, and a `DataSnapshot` indicating the\n     *   final result. If the transaction failed abnormally, the first argument will\n     *   be an `Error` object indicating the failure cause. If the transaction\n     *   finished normally, but no data was committed because no data was returned\n     *   from `transactionUpdate`, then second argument will be false. If the\n     *   transaction completed and committed data to Firebase, the second argument\n     *   will be true. Regardless, the third argument will be a `DataSnapshot`\n     *   containing the resulting data in this location.\n     * @param applyLocally By default, events are raised each time the\n     *   transaction update function runs. So if it is run multiple times, you may\n     *   see intermediate states. You can set this to false to suppress these\n     *   intermediate states and instead wait until the transaction has completed\n     *   before events are raised.\n     * @return Returns a Promise that can optionally be used instead of the onComplete\n     *   callback to handle success and failure.\n     */\n    transaction(\n      transactionUpdate: (a: any) => any,\n      onComplete?: (\n        a: Error | null,\n        b: boolean,\n        c: firebase.database.DataSnapshot | null,\n      ) => void,\n      applyLocally?: boolean,\n    ): Promise<TransactionResult>;\n    /**\n     * Writes multiple values to the Database at once.\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example,\n     * \"name/first\") from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * The effect of the write will be visible immediately, and the corresponding\n     * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n     * the data to the Firebase servers will also be started, and the returned\n     * Promise will resolve when complete. If provided, the `onComplete` callback\n     * will be called asynchronously after synchronization has finished.\n     *\n     * A single `update()` will generate a single \"value\" event at the location\n     * where the `update()` was performed, regardless of how many children were\n     * modified.\n     *\n     * Note that modifying data with `update()` will cancel any pending\n     * transactions at that location, so extreme care should be taken if mixing\n     * `update()` and `transaction()` to modify the same data.\n     *\n     * Passing `null` to `update()` will remove the data at this location.\n     *\n     * See\n     * {@link\n     *  https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html\n     *  Introducing multi-location updates and more}.\n     *\n     * @example\n     * ```javascript\n     * var adaNameRef = firebase.database().ref('users/ada/name');\n     * // Modify the 'first' and 'last' properties, but leave other data at\n     * // adaNameRef unchanged.\n     * adaNameRef.update({ first: 'Ada', last: 'Lovelace' });\n     * ```\n     *\n     * @param values Object containing multiple values.\n     * @param onComplete Callback called when write to server is\n     *   complete.\n     * @return Resolves when update on server is complete.\n     */\n    update(\n      values: Object,\n      onComplete?: (a: Error | null) => void,\n    ): Promise<void>;\n  }\n\n  interface TransactionResult {\n    /**\n     * Whether the transaction was successfully committed.\n     */\n    committed: boolean;\n    /**\n     * The resulting data snapshot.\n     */\n    snapshot: DataSnapshot;\n  }\n\n  interface ThenableReference\n    extends firebase.database.Reference,\n      Pick<Promise<Reference>, \"then\" | \"catch\"> {\n    key: string;\n    parent: Reference;\n  }\n\n  /**\n   * Logs debugging information to the console.\n   *\n   * @example\n   * ```javascript\n   * // Enable logging\n   * firebase.database.enableLogging(true);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Disable logging\n   * firebase.database.enableLogging(false);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Enable logging across page refreshes\n   * firebase.database.enableLogging(true, true);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Provide custom logger which prefixes log statements with \"[FIREBASE]\"\n   * firebase.database.enableLogging(function(message) {\n   *   console.log(\"[FIREBASE]\", message);\n   * });\n   * ```\n   *\n   * @param logger Enables logging if `true`;\n   *   disables logging if `false`. You can also provide a custom logger function\n   *   to control how things get logged.\n   * @param persistent Remembers the logging state between page\n   *   refreshes if `true`.\n   */\n  function enableLogging(\n    logger?: boolean | ((a: string) => any),\n    persistent?: boolean,\n  ): any;\n\n  export type EmulatorMockTokenOptions = firebase.EmulatorMockTokenOptions;\n}\n\ndeclare namespace firebase.database.ServerValue {\n  /**\n   * A placeholder value for auto-populating the current timestamp (time\n   * since the Unix epoch, in milliseconds) as determined by the Firebase\n   * servers.\n   *\n   * @example\n   * ```javascript\n   * var sessionsRef = firebase.database().ref(\"sessions\");\n   * sessionsRef.push({\n   *   startedAt: firebase.database.ServerValue.TIMESTAMP\n   * });\n   * ```\n   */\n  var TIMESTAMP: Object;\n\n  /**\n   * Returns a placeholder value that can be used to atomically increment the\n   * current database value by the provided delta.\n   *\n   * @param delta the amount to modify the current value atomically.\n   * @return a placeholder value for modifying data atomically server-side.\n   */\n  function increment(delta: number): Object;\n}\n\n/**\n * The Messaging SDK does not work in a Node.js environment.\n */\ndeclare namespace firebase.messaging {\n  /**\n   * The Firebase Messaging service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.messaging `firebase.messaging()`}.\n   *\n   * See {@link https://firebase.google.com/docs/cloud-messaging/js/client\n   * Set Up a JavaScript Firebase Cloud Messaging Client App} for a full guide on how to use the\n   * Firebase Messaging service.\n   *\n   */\n  interface Messaging {\n    /**\n     * Deletes the registration token associated with this messaging instance and unsubscribes the\n     * messaging instance from the push subscription.\n     *\n     * @return The promise resolves when the token has been successfully deleted.\n     */\n    deleteToken(): Promise<boolean>;\n\n    /**\n     * Subscribes the messaging instance to push notifications. Returns an FCM registration token\n     * that can be used to send push messages to that messaging instance.\n     *\n     * If a notification permission isn't already granted, this method asks the user for permission.\n     * The returned promise rejects if the user does not allow the app to show notifications.\n     *\n     * @param options.vapidKey The public server key provided to push services. It is used to\n     * authenticate the push subscribers to receive push messages only from sending servers that\n     * hold the corresponding private key. If it is not provided, a default VAPID key is used. Note\n     * that some push services (Chrome Push Service) require a non-default VAPID key. Therefore, it\n     * is recommended to generate and import a VAPID key for your project with\n     * {@link https://firebase.google.com/docs/cloud-messaging/js/client#configure_web_credentials_with_fcm Configure Web Credentials with FCM}.\n     * See\n     * {@link https://developers.google.com/web/fundamentals/push-notifications/web-push-protocol The Web Push Protocol}\n     * for details on web push services.}\n     *\n     * @param options.serviceWorkerRegistration The service worker registration for receiving push\n     * messaging. If the registration is not provided explicitly, you need to have a\n     * `firebase-messaging-sw.js` at your root location. See\n     * {@link https://firebase.google.com/docs/cloud-messaging/js/client#access_the_registration_token | Access the registration token}\n     * for more details.\n     *\n     * @return The promise resolves with an FCM registration token.\n     *\n     */\n    getToken(options?: {\n      vapidKey?: string;\n      serviceWorkerRegistration?: ServiceWorkerRegistration;\n    }): Promise<string>;\n\n    /**\n     * When a push message is received and the user is currently on a page for your origin, the\n     * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n     * the push message.\n     *\n     * @param\n     *     nextOrObserver This function, or observer object with `next` defined,\n     *     is called when a message is received and the user is currently viewing your page.\n     * @return To stop listening for messages execute this returned function.\n     */\n    onMessage(\n      nextOrObserver: firebase.NextFn<any> | firebase.Observer<any>,\n    ): firebase.Unsubscribe;\n\n    /**\n     * Called when a message is received while the app is in the background. An app is considered to\n     * be in the background if no active window is displayed.\n     *\n     * @param\n     *     nextOrObserver This function, or observer object with `next` defined,\n     *     is called when a message is received and the app is currently in the background.\n     *\n     * @return To stop listening for messages execute this returned function\n     */\n    onBackgroundMessage(\n      nextOrObserver:\n        | firebase.NextFn<MessagePayload>\n        | firebase.Observer<MessagePayload>,\n    ): firebase.Unsubscribe;\n  }\n\n  /**\n   * Message payload that contains the notification payload that is represented with\n   * {@link firebase.messaging.NotificationPayload} and the data payload that contains an arbitrary\n   * number of key-value pairs sent by developers through the\n   * {@link https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#notification Send API}\n   */\n  export interface MessagePayload {\n    /**\n     * See {@link firebase.messaging.NotificationPayload}.\n     */\n    notification?: NotificationPayload;\n\n    /**\n     * Arbitrary key/value pairs.\n     */\n    data?: { [key: string]: string };\n\n    /**\n     * See {@link firebase.messaging.FcmOptions}.\n     */\n    fcmOptions?: FcmOptions;\n\n    /**\n     * The sender of this message.\n     */\n    from: string;\n\n    /**\n     * The collapse key of this message. See\n     * {@link https://firebase.google.com/docs/cloud-messaging/concept-options#collapsible_and_non-collapsible_messages\n     * Collapsible and non-collapsible messages}.\n     */\n    collapseKey: string;\n  }\n\n  /**\n   * Options for features provided by the FCM SDK for Web. See\n   * {@link https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions\n   * WebpushFcmOptions}.\n   */\n  export interface FcmOptions {\n    /**\n     * The link to open when the user clicks on the notification. For all URL values, HTTPS is\n     * required. For example, by setting this value to your app's URL, a notification click event\n     * will put your app in focus for the user.\n     */\n    link?: string;\n\n    /**\n     * Label associated with the message's analytics data. See\n     * {@link https://firebase.google.com/docs/cloud-messaging/understand-delivery#adding-analytics-labels-to-messages\n     * Adding analytics labels}.\n     */\n    analyticsLabel?: string;\n  }\n\n  /**\n   * Parameters that define how a push notification is displayed to users.\n   */\n  export interface NotificationPayload {\n    /**\n     * The title of a notification.\n     */\n    title?: string;\n\n    /**\n     * The body of a notification.\n     */\n    body?: string;\n\n    /**\n     * The URL of the image that is shown with the notification. See\n     * {@link https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#notification\n     * `notification.image`} for supported image format.\n     */\n    image?: string;\n  }\n\n  function isSupported(): boolean;\n}\n\ndeclare namespace firebase.storage {\n  /**\n   * The full set of object metadata, including read-only properties.\n   */\n  interface FullMetadata extends firebase.storage.UploadMetadata {\n    /**\n     * The bucket this object is contained in.\n     */\n    bucket: string;\n    /**\n     * The full path of this object.\n     */\n    fullPath: string;\n    /**\n     * The object's generation.\n     * @see {@link https://cloud.google.com/storage/docs/generations-preconditions}\n     */\n    generation: string;\n    /**\n     * The object's metageneration.\n     * @see {@link https://cloud.google.com/storage/docs/generations-preconditions}\n     */\n    metageneration: string;\n    /**\n     * The short name of this object, which is the last component of the full path.\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n     */\n    name: string;\n    /**\n     * The size of this object, in bytes.\n     */\n    size: number;\n    /**\n     * A date string representing when this object was created.\n     */\n    timeCreated: string;\n    /**\n     * A date string representing when this object was last updated.\n     */\n    updated: string;\n  }\n\n  /**\n   * Represents a reference to a Google Cloud Storage object. Developers can\n   * upload, download, and delete objects, as well as get/set object metadata.\n   */\n  interface Reference {\n    /**\n     * The name of the bucket containing this reference's object.\n     */\n    bucket: string;\n    /**\n     * Returns a reference to a relative path from this reference.\n     * @param path The relative path from this reference.\n     *     Leading, trailing, and consecutive slashes are removed.\n     * @return The reference to the given path.\n     */\n    child(path: string): firebase.storage.Reference;\n    /**\n     * Deletes the object at this reference's location.\n     * @return A Promise that resolves if the deletion\n     *     succeeded and rejects if it failed, including if the object didn't exist.\n     */\n    delete(): Promise<void>;\n    /**\n     * The full path of this object.\n     */\n    fullPath: string;\n    /**\n     * Fetches a long lived download URL for this object.\n     * @return A Promise that resolves with the download\n     *     URL or rejects if the fetch failed, including if the object did not\n     *     exist.\n     */\n    getDownloadURL(): Promise<string>;\n    /**\n     * Fetches metadata for the object at this location, if one exists.\n     * @return A Promise that\n     *     resolves with the metadata, or rejects if the fetch failed, including if\n     *     the object did not exist.\n     */\n    getMetadata(): Promise<FullMetadata>;\n    /**\n     * The short name of this object, which is the last component of the full path.\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n     */\n    name: string;\n    /**\n     * A reference pointing to the parent location of this reference, or null if\n     * this reference is the root.\n     */\n    parent: firebase.storage.Reference | null;\n    /**\n     * Uploads data to this reference's location.\n     * @param data The data to upload.\n     * @param metadata Metadata for the newly\n     *     uploaded object.\n     * @return An object that can be used to monitor\n     *     and manage the upload.\n     */\n    put(\n      data: Blob | Uint8Array | ArrayBuffer,\n      metadata?: firebase.storage.UploadMetadata,\n    ): firebase.storage.UploadTask;\n    /**\n     * Uploads string data to this reference's location.\n     * @param data The string to upload.\n     * @param format The format of the string to\n     *     upload.\n     * @param metadata Metadata for the newly\n     *     uploaded object.\n     * @throws If the format is not an allowed format, or if the given string\n     *     doesn't conform to the specified format.\n     */\n    putString(\n      data: string,\n      format?: firebase.storage.StringFormat,\n      metadata?: firebase.storage.UploadMetadata,\n    ): firebase.storage.UploadTask;\n    /**\n     * A reference to the root of this reference's bucket.\n     */\n    root: firebase.storage.Reference;\n    /**\n     * The storage service associated with this reference.\n     */\n    storage: firebase.storage.Storage;\n    /**\n     * Returns a gs:// URL for this object in the form\n     *   `gs://<bucket>/<path>/<to>/<object>`\n     * @return The gs:// URL.\n     */\n    toString(): string;\n    /**\n     * Updates the metadata for the object at this location, if one exists.\n     * @param metadata The new metadata.\n     *     Setting a property to 'null' removes it on the server, while leaving\n     *     a property as 'undefined' has no effect.\n     * @return A Promise that\n     *     resolves with the full updated metadata or rejects if the updated failed,\n     *     including if the object did not exist.\n     */\n    updateMetadata(\n      metadata: firebase.storage.SettableMetadata,\n    ): Promise<FullMetadata>;\n    /**\n     * List all items (files) and prefixes (folders) under this storage reference.\n     *\n     * This is a helper method for calling `list()` repeatedly until there are\n     * no more results. The default pagination size is 1000.\n     *\n     * Note: The results may not be consistent if objects are changed while this\n     * operation is running.\n     *\n     * Warning: `listAll` may potentially consume too many resources if there are\n     * too many results.\n     *\n     * @return A Promise that resolves with all the items and prefixes under\n     *      the current storage reference. `prefixes` contains references to\n     *      sub-directories and `items` contains references to objects in this\n     *      folder. `nextPageToken` is never returned.\n     */\n    listAll(): Promise<ListResult>;\n    /**\n     * List items (files) and prefixes (folders) under this storage reference.\n     *\n     * List API is only available for Firebase Rules Version 2.\n     *\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n     * delimited folder structure.\n     * Refer to GCS's List API if you want to learn more.\n     *\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n     * support objects whose paths end with \"/\" or contain two consecutive\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n     * `list()` may fail if there are too many unsupported objects in the bucket.\n     *\n     * @param options See `ListOptions` for details.\n     * @return A Promise that resolves with the items and prefixes.\n     *      `prefixes` contains references to sub-folders and `items`\n     *      contains references to objects in this folder. `nextPageToken`\n     *      can be used to get the rest of the results.\n     */\n    list(options?: ListOptions): Promise<ListResult>;\n  }\n\n  /**\n   * Result returned by list().\n   */\n  interface ListResult {\n    /**\n     * References to prefixes (sub-folders). You can call list() on them to\n     * get its contents.\n     *\n     * Folders are implicit based on '/' in the object paths.\n     * For example, if a bucket has two objects '/a/b/1' and '/a/b/2', list('/a')\n     * will return '/a/b' as a prefix.\n     */\n    prefixes: Reference[];\n    /**\n     * Objects in this directory.\n     * You can call getMetadata() and getDownloadUrl() on them.\n     */\n    items: Reference[];\n    /**\n     * If set, there might be more results for this list. Use this token to resume the list.\n     */\n    nextPageToken: string | null;\n  }\n\n  /**\n   * The options `list()` accepts.\n   */\n  interface ListOptions {\n    /**\n     * If set, limits the total number of `prefixes` and `items` to return.\n     * The default and maximum maxResults is 1000.\n     */\n    maxResults?: number | null;\n    /**\n     * The `nextPageToken` from a previous call to `list()`. If provided,\n     * listing is resumed from the previous position.\n     */\n    pageToken?: string | null;\n  }\n\n  /**\n   * Object metadata that can be set at any time.\n   */\n  interface SettableMetadata {\n    /**\n     * Served as the 'Cache-Control' header on object download.\n     */\n    cacheControl?: string | null;\n    contentDisposition?: string | null;\n    /**\n     * Served as the 'Content-Encoding' header on object download.\n     */\n    contentEncoding?: string | null;\n    /**\n     * Served as the 'Content-Language' header on object download.\n     */\n    contentLanguage?: string | null;\n    /**\n     * Served as the 'Content-Type' header on object download.\n     */\n    contentType?: string | null;\n    /**\n     * Additional user-defined custom metadata.\n     */\n    customMetadata?: {\n      [/* warning: coerced from ? */ key: string]: string;\n    } | null;\n  }\n\n  /**\n   * The Firebase Storage service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.storage `firebase.storage()`}.\n   *\n   * See\n   * {@link\n   *   https://firebase.google.com/docs/storage/web/start/\n   *   Get Started on Web}\n   * for a full guide on how to use the Firebase Storage service.\n   */\n  interface Storage {\n    /**\n     * The {@link firebase.app.App app} associated with the `Storage` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = storage.app;\n     * ```\n     */\n    app: firebase.app.App;\n    /**\n     * The maximum time to retry operations other than uploads or downloads in\n     * milliseconds.\n     */\n    maxOperationRetryTime: number;\n    /**\n     * The maximum time to retry uploads in milliseconds.\n     */\n    maxUploadRetryTime: number;\n    /**\n     * Returns a reference for the given path in the default bucket.\n     * @param path A relative path to initialize the reference with,\n     *     for example `path/to/image.jpg`. If not passed, the returned reference\n     *     points to the bucket root.\n     * @return A reference for the given path.\n     */\n    ref(path?: string): firebase.storage.Reference;\n    /**\n     * Returns a reference for the given absolute URL.\n     * @param url A URL in the form: <br />\n     *     1) a gs:// URL, for example `gs://bucket/files/image.png` <br />\n     *     2) a download URL taken from object metadata. <br />\n     * @return A reference for the given URL.\n     */\n    refFromURL(url: string): firebase.storage.Reference;\n    /**\n     * @param time The new maximum operation retry time in milliseconds.\n     * @see {@link firebase.storage.Storage.maxOperationRetryTime}\n     */\n    setMaxOperationRetryTime(time: number): any;\n    /**\n     * @param time The new maximum upload retry time in milliseconds.\n     * @see {@link firebase.storage.Storage.maxUploadRetryTime}\n     */\n    setMaxUploadRetryTime(time: number): any;\n    /**\n     * Modify this `Storage` instance to communicate with the Cloud Storage emulator.\n     *\n     * @param host - The emulator host (ex: localhost)\n     * @param port - The emulator port (ex: 5001)\n     * @param options.mockUserToken the mock auth token to use for unit testing Security Rules\n     */\n    useEmulator(\n      host: string,\n      port: number,\n      options?: {\n        mockUserToken?: EmulatorMockTokenOptions | string;\n      },\n    ): void;\n  }\n\n  /**\n   * @enum {string}\n   * An enumeration of the possible string formats for upload.\n   */\n  type StringFormat = string;\n  var StringFormat: {\n    /**\n     * Indicates the string should be interpreted as base64-encoded data.\n     * Padding characters (trailing '='s) are optional.\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n     * ad 69 8e fb e1 3a b7 bf eb 97\n     */\n    BASE64: StringFormat;\n    /**\n     * Indicates the string should be interpreted as base64url-encoded data.\n     * Padding characters (trailing '='s) are optional.\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n     * ad 69 8e fb e1 3a b7 bf eb 97\n     */\n    BASE64URL: StringFormat;\n    /**\n     * Indicates the string is a data URL, such as one obtained from\n     * canvas.toDataURL().\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\n     * becomes the byte sequence\n     * 69 a6 9a\n     * (the content-type \"application/octet-stream\" is also applied, but can\n     * be overridden in the metadata object).\n     */\n    DATA_URL: StringFormat;\n    /**\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n     * sequence.\n     * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n     */\n    RAW: StringFormat;\n  };\n\n  /**\n   * An event that is triggered on a task.\n   * @enum {string}\n   * @see {@link firebase.storage.UploadTask.on}\n   */\n  type TaskEvent = string;\n  var TaskEvent: {\n    /**\n     * For this event,\n     * <ul>\n     *   <li>The `next` function is triggered on progress updates and when the\n     *       task is paused/resumed with a\n     *       {@link firebase.storage.UploadTaskSnapshot} as the first\n     *       argument.</li>\n     *   <li>The `error` function is triggered if the upload is canceled or fails\n     *       for another reason.</li>\n     *   <li>The `complete` function is triggered if the upload completes\n     *       successfully.</li>\n     * </ul>\n     */\n    STATE_CHANGED: TaskEvent;\n  };\n\n  /**\n   * Represents the current state of a running upload.\n   * @enum {string}\n   */\n  type TaskState = string;\n  var TaskState: {\n    CANCELED: TaskState;\n    ERROR: TaskState;\n    PAUSED: TaskState;\n    RUNNING: TaskState;\n    SUCCESS: TaskState;\n  };\n\n  /**\n   * Object metadata that can be set at upload.\n   */\n  interface UploadMetadata extends firebase.storage.SettableMetadata {\n    /**\n     * A Base64-encoded MD5 hash of the object being uploaded.\n     */\n    md5Hash?: string | null;\n  }\n\n  /**\n   * Error codes that can be attached to `StorageError` objects.\n   */\n  export enum StorageErrorCode {\n    UNKNOWN = \"unknown\",\n    OBJECT_NOT_FOUND = \"object-not-found\",\n    BUCKET_NOT_FOUND = \"bucket-not-found\",\n    PROJECT_NOT_FOUND = \"project-not-found\",\n    QUOTA_EXCEEDED = \"quota-exceeded\",\n    UNAUTHENTICATED = \"unauthenticated\",\n    UNAUTHORIZED = \"unauthorized\",\n    UNAUTHORIZED_APP = \"unauthorized-app\",\n    RETRY_LIMIT_EXCEEDED = \"retry-limit-exceeded\",\n    INVALID_CHECKSUM = \"invalid-checksum\",\n    CANCELED = \"canceled\",\n    INVALID_EVENT_NAME = \"invalid-event-name\",\n    INVALID_URL = \"invalid-url\",\n    INVALID_DEFAULT_BUCKET = \"invalid-default-bucket\",\n    NO_DEFAULT_BUCKET = \"no-default-bucket\",\n    CANNOT_SLICE_BLOB = \"cannot-slice-blob\",\n    SERVER_FILE_WRONG_SIZE = \"server-file-wrong-size\",\n    NO_DOWNLOAD_URL = \"no-download-url\",\n    INVALID_ARGUMENT = \"invalid-argument\",\n    INVALID_ARGUMENT_COUNT = \"invalid-argument-count\",\n    APP_DELETED = \"app-deleted\",\n    INVALID_ROOT_OPERATION = \"invalid-root-operation\",\n    INVALID_FORMAT = \"invalid-format\",\n    INTERNAL_ERROR = \"internal-error\",\n    UNSUPPORTED_ENVIRONMENT = \"unsupported-environment\",\n  }\n\n  interface StorageObserver<T> {\n    next?: NextFn<T> | null;\n    error?: (error: FirebaseStorageError) => void | null;\n    complete?: CompleteFn | null;\n  }\n\n  /**\n   * Represents the process of uploading an object. Allows you to monitor and\n   * manage the upload.\n   */\n  interface UploadTask {\n    /**\n     * Cancels a running task. Has no effect on a complete or failed task.\n     * @return True if the cancel had an effect.\n     */\n    cancel(): boolean;\n    /**\n     * Equivalent to calling `then(null, onRejected)`.\n     */\n    catch(onRejected: (error: FirebaseStorageError) => any): Promise<any>;\n    /**\n     * Listens for events on this task.\n     *\n     * Events have three callback functions (referred to as `next`, `error`, and\n     * `complete`).\n     *\n     * If only the event is passed, a function that can be used to register the\n     * callbacks is returned. Otherwise, the callbacks are passed after the event.\n     *\n     * Callbacks can be passed either as three separate arguments <em>or</em> as the\n     * `next`, `error`, and `complete` properties of an object. Any of the three\n     * callbacks is optional, as long as at least one is specified. In addition,\n     * when you add your callbacks, you get a function back. You can call this\n     * function to unregister the associated callbacks.\n     *\n     * @example **Pass callbacks separately or in an object.**\n     * ```javascript\n     * var next = function(snapshot) {};\n     * var error = function(error) {};\n     * var complete = function() {};\n     *\n     * // The first example.\n     * uploadTask.on(\n     *     firebase.storage.TaskEvent.STATE_CHANGED,\n     *     next,\n     *     error,\n     *     complete);\n     *\n     * // This is equivalent to the first example.\n     * uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n     *   'next': next,\n     *   'error': error,\n     *   'complete': complete\n     * });\n     *\n     * // This is equivalent to the first example.\n     * var subscribe = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);\n     * subscribe(next, error, complete);\n     *\n     * // This is equivalent to the first example.\n     * var subscribe = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);\n     * subscribe({\n     *   'next': next,\n     *   'error': error,\n     *   'complete': complete\n     * });\n     * ```\n     *\n     * @example **Any callback is optional.**\n     * ```javascript\n     * // Just listening for completion, this is legal.\n     * uploadTask.on(\n     *     firebase.storage.TaskEvent.STATE_CHANGED,\n     *     null,\n     *     null,\n     *     function() {\n     *       console.log('upload complete!');\n     *     });\n     *\n     * // Just listening for progress/state changes, this is legal.\n     * uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function(snapshot) {\n     *   var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n     *   console.log(percent + \"% done\");\n     * });\n     *\n     * // This is also legal.\n     * uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n     *   'complete': function() {\n     *     console.log('upload complete!');\n     *   }\n     * });\n     * ```\n     *\n     * @example **Use the returned function to remove callbacks.**\n     * ```javascript\n     * var unsubscribe = uploadTask.on(\n     *     firebase.storage.TaskEvent.STATE_CHANGED,\n     *     function(snapshot) {\n     *       var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n     *       console.log(percent + \"% done\");\n     *       // Stop after receiving one update.\n     *       unsubscribe();\n     *     });\n     *\n     * // This code is equivalent to the above.\n     * var handle = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);\n     * unsubscribe = handle(function(snapshot) {\n     *   var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n     *   console.log(percent + \"% done\");\n     *   // Stop after receiving one update.\n     *   unsubscribe();\n     * });\n     * ```\n     *\n     * @param event The event to listen for.\n     * @param nextOrObserver\n     *     The `next` function, which gets called for each item in\n     *     the event stream, or an observer object with some or all of these three\n     *     properties (`next`, `error`, `complete`).\n     * @param error A function that gets called with a `FirebaseStorageError`\n     *     if the event stream ends due to an error.\n     * @param complete A function that gets called if the\n     *     event stream ends normally.\n     * @return\n     *     If only the event argument is passed, returns a function you can use to\n     *     add callbacks (see the examples above). If more than just the event\n     *     argument is passed, returns a function you can call to unregister the\n     *     callbacks.\n     */\n    on(\n      event: firebase.storage.TaskEvent,\n      nextOrObserver?:\n        | StorageObserver<UploadTaskSnapshot>\n        | null\n        | ((snapshot: UploadTaskSnapshot) => any),\n      error?: ((error: FirebaseStorageError) => any) | null,\n      complete?: firebase.Unsubscribe | null,\n    ): Function;\n    /**\n     * Pauses a running task. Has no effect on a paused or failed task.\n     * @return True if the pause had an effect.\n     */\n    pause(): boolean;\n    /**\n     * Resumes a paused task. Has no effect on a running or failed task.\n     * @return True if the resume had an effect.\n     */\n    resume(): boolean;\n    /**\n     * A snapshot of the current task state.\n     */\n    snapshot: firebase.storage.UploadTaskSnapshot;\n    /**\n     * This object behaves like a Promise, and resolves with its snapshot data when\n     * the upload completes.\n     * @param onFulfilled\n     *     The fulfillment callback. Promise chaining works as normal.\n     * @param onRejected The rejection callback.\n     */\n    then(\n      onFulfilled?:\n        | ((snapshot: firebase.storage.UploadTaskSnapshot) => any)\n        | null,\n      onRejected?: ((error: FirebaseStorageError) => any) | null,\n    ): Promise<any>;\n  }\n\n  /**\n   * Holds data about the current state of the upload task.\n   */\n  interface UploadTaskSnapshot {\n    /**\n     * The number of bytes that have been successfully uploaded so far.\n     */\n    bytesTransferred: number;\n    /**\n     * Before the upload completes, contains the metadata sent to the server.\n     * After the upload completes, contains the metadata sent back from the server.\n     */\n    metadata: firebase.storage.FullMetadata;\n    /**\n     * The reference that spawned this snapshot's upload task.\n     */\n    ref: firebase.storage.Reference;\n    /**\n     * The current state of the task.\n     */\n    state: firebase.storage.TaskState;\n    /**\n     * The task of which this is a snapshot.\n     */\n    task: firebase.storage.UploadTask;\n    /**\n     * The total number of bytes to be uploaded.\n     */\n    totalBytes: number;\n  }\n\n  /**\n   * An error returned by the Firebase Storage SDK.\n   */\n  export interface FirebaseStorageError extends FirebaseError {\n    /**\n     * Stores custom error data unique to the `StorageError`.\n     */\n    customData: {\n      serverResponse: string | null;\n    };\n\n    get status(): number;\n    set status(status: number);\n    /**\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n     */\n    _codeEquals(code: StorageErrorCode): boolean;\n    /**\n     * Optional response message that was added by the server.\n     */\n    get serverResponse(): null | string;\n    set serverResponse(serverResponse: string | null);\n  }\n}\n\ndeclare namespace firebase.firestore {\n  /**\n   * Document data (for use with `DocumentReference.set()`) consists of fields\n   * mapped to values.\n   */\n  export type DocumentData = { [field: string]: any };\n\n  /**\n   * Update data (for use with `DocumentReference.update()`) consists of field\n   * paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that contain dots\n   * reference nested fields within the document.\n   */\n  export type UpdateData = { [fieldPath: string]: any };\n\n  /**\n   * Constant used to indicate the LRU garbage collection should be disabled.\n   * Set this value as the `cacheSizeBytes` on the settings passed to the\n   * `Firestore` instance.\n   */\n  export const CACHE_SIZE_UNLIMITED: number;\n\n  /**\n   * Specifies custom configurations for your Cloud Firestore instance.\n   * You must set these before invoking any other methods.\n   */\n  export interface Settings {\n    /** The hostname to connect to. */\n    host?: string;\n    /** Whether to use SSL when connecting. */\n    ssl?: boolean;\n\n    /**\n     * An approximate cache size threshold for the on-disk data. If the cache grows beyond this\n     * size, Firestore will start removing data that hasn't been recently used. The size is not a\n     * guarantee that the cache will stay below that size, only that if the cache exceeds the given\n     * size, cleanup will be attempted.\n     *\n     * The default value is 40 MB. The threshold must be set to at least 1 MB, and can be set to\n     * CACHE_SIZE_UNLIMITED to disable garbage collection.\n     */\n    cacheSizeBytes?: number;\n\n    /**\n     * Forces the SDK’s underlying network transport (WebChannel) to use\n     * long-polling. Each response from the backend will be closed immediately\n     * after the backend sends data (by default responses are kept open in\n     * case the backend has more data to send). This avoids incompatibility\n     * issues with certain proxies, antivirus software, etc. that incorrectly\n     * buffer traffic indefinitely. Use of this option will cause some\n     * performance degradation though.\n     *\n     * This setting cannot be used with `experimentalAutoDetectLongPolling` and\n     * may be removed in a future release. If you find yourself using it to\n     * work around a specific network reliability issue, please tell us about\n     * it in https://github.com/firebase/firebase-js-sdk/issues/1674.\n     *\n     * This setting does not work in a Node.js environment.\n     */\n    experimentalForceLongPolling?: boolean;\n\n    /**\n     * Configures the SDK's underlying transport (WebChannel) to automatically detect if\n     * long-polling should be used. This is very similar to `experimentalForceLongPolling`,\n     * but only uses long-polling if required.\n     *\n     * This setting will likely be enabled by default in future releases and cannot be\n     * combined with `experimentalForceLongPolling`.\n     *\n     * This setting does not work in a Node.js environment.\n     */\n    experimentalAutoDetectLongPolling?: boolean;\n\n    /**\n     * Whether to skip nested properties that are set to `undefined` during\n     * object serialization. If set to `true`, these properties are skipped\n     * and not written to Firestore. If set to `false` or omitted, the SDK\n     * throws an exception when it encounters properties of type `undefined`.\n     */\n    ignoreUndefinedProperties?: boolean;\n\n    /**\n     * Whether to merge the provided settings with the existing settings. If\n     * set to `true`, the settings are merged with existing settings. If\n     * set to `false` or left unset, the settings replace the existing\n     * settings.\n     */\n    merge?: boolean;\n  }\n\n  /**\n   * Settings that can be passed to Firestore.enablePersistence() to configure\n   * Firestore persistence.\n   */\n  export interface PersistenceSettings {\n    /**\n     * Whether to synchronize the in-memory state of multiple tabs. Setting this\n     * to `true` in all open tabs enables shared access to local persistence,\n     * shared execution of queries and latency-compensated local document updates\n     * across all connected instances.\n     *\n     * To enable this mode, `synchronizeTabs:true` needs to be set globally in all\n     * active tabs. If omitted or set to 'false', `enablePersistence()` will fail\n     * in all but the first tab.\n     */\n    synchronizeTabs?: boolean;\n\n    /**\n     * Whether to force enable persistence for the client. This cannot be used\n     * with `synchronizeTabs:true` and is primarily intended for use with Web\n     * Workers. Setting this to `true` will enable persistence, but cause other\n     * tabs using persistence to fail.\n     *\n     * This setting may be removed in a future release. If you find yourself\n     * using it for a specific use case or run into any issues, please tell us\n     * about it in\n     * https://github.com/firebase/firebase-js-sdk/issues/983.\n     */\n    experimentalForceOwningTab?: boolean;\n  }\n\n  export type LogLevel = \"debug\" | \"error\" | \"silent\";\n\n  /**\n   * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n   *\n   * @param logLevel\n   *   The verbosity you set for activity and error logging. Can be any of\n   *   the following values:\n   *\n   *   <ul>\n   *     <li><code>debug</code> for the most verbose logging level, primarily for\n   *     debugging.</li>\n   *     <li><code>error</code> to log errors only.</li>\n   *     <li><code>silent</code> to turn off logging.</li>\n   *   </ul>\n   */\n  export function setLogLevel(logLevel: LogLevel): void;\n\n  /**\n   * Converter used by `withConverter()` to transform user objects of type T\n   * into Firestore data.\n   *\n   * Using the converter allows you to specify generic type arguments when\n   * storing and retrieving objects from Firestore.\n   *\n   * @example\n   * ```typescript\n   * class Post {\n   *   constructor(readonly title: string, readonly author: string) {}\n   *\n   *   toString(): string {\n   *     return this.title + ', by ' + this.author;\n   *   }\n   * }\n   *\n   * const postConverter = {\n   *   toFirestore(post: Post): firebase.firestore.DocumentData {\n   *     return {title: post.title, author: post.author};\n   *   },\n   *   fromFirestore(\n   *     snapshot: firebase.firestore.QueryDocumentSnapshot,\n   *     options: firebase.firestore.SnapshotOptions\n   *   ): Post {\n   *     const data = snapshot.data(options)!;\n   *     return new Post(data.title, data.author);\n   *   }\n   * };\n   *\n   * const postSnap = await firebase.firestore()\n   *   .collection('posts')\n   *   .withConverter(postConverter)\n   *   .doc().get();\n   * const post = postSnap.data();\n   * if (post !== undefined) {\n   *   post.title; // string\n   *   post.toString(); // Should be defined\n   *   post.someNonExistentProperty; // TS error\n   * }\n   * ```\n   */\n  export interface FirestoreDataConverter<T> {\n    /**\n     * Called by the Firestore SDK to convert a custom model object of type T\n     * into a plain JavaScript object (suitable for writing directly to the\n     * Firestore database). To use `set()` with `merge` and `mergeFields`,\n     * `toFirestore()` must be defined with `Partial<T>`.\n     */\n    toFirestore(modelObject: T): DocumentData;\n    toFirestore(modelObject: Partial<T>, options: SetOptions): DocumentData;\n\n    /**\n     * Called by the Firestore SDK to convert Firestore data into an object of\n     * type T. You can access your data by calling: `snapshot.data(options)`.\n     *\n     * @param snapshot A QueryDocumentSnapshot containing your data and metadata.\n     * @param options The SnapshotOptions from the initial call to `data()`.\n     */\n    fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): T;\n  }\n\n  /**\n   * The Cloud Firestore service interface.\n   *\n   * Do not call this constructor directly. Instead, use\n   * {@link firebase.firestore `firebase.firestore()`}.\n   */\n  export class Firestore {\n    private constructor();\n    /**\n     * Specifies custom settings to be used to configure the `Firestore`\n     * instance. Must be set before invoking any other methods.\n     *\n     * @param settings The settings to use.\n     */\n    settings(settings: Settings): void;\n\n    /**\n     * Modify this instance to communicate with the Cloud Firestore emulator.\n     *\n     * <p>Note: this must be called before this instance has been used to do any operations.\n     *\n     * @param host the emulator host (ex: localhost).\n     * @param port the emulator port (ex: 9000).\n     * @param options.mockUserToken - the mock auth token to use for unit\n     * testing Security Rules.\n     */\n    useEmulator(\n      host: string,\n      port: number,\n      options?: {\n        mockUserToken?: EmulatorMockTokenOptions | string;\n      },\n    ): void;\n\n    /**\n     * Attempts to enable persistent storage, if possible.\n     *\n     * Must be called before any other methods (other than settings() and\n     * clearPersistence()).\n     *\n     * If this fails, enablePersistence() will reject the promise it returns.\n     * Note that even after this failure, the firestore instance will remain\n     * usable, however offline persistence will be disabled.\n     *\n     * There are several reasons why this can fail, which can be identified by\n     * the `code` on the error.\n     *\n     *   * failed-precondition: The app is already open in another browser tab.\n     *   * unimplemented: The browser is incompatible with the offline\n     *     persistence implementation.\n     *\n     * @param settings Optional settings object to configure persistence.\n     * @return A promise that represents successfully enabling persistent\n     * storage.\n     */\n    enablePersistence(settings?: PersistenceSettings): Promise<void>;\n\n    /**\n     * Gets a `CollectionReference` instance that refers to the collection at\n     * the specified path.\n     *\n     * @param collectionPath A slash-separated path to a collection.\n     * @return The `CollectionReference` instance.\n     */\n    collection(collectionPath: string): CollectionReference<DocumentData>;\n\n    /**\n     * Gets a `DocumentReference` instance that refers to the document at the\n     * specified path.\n     *\n     * @param documentPath A slash-separated path to a document.\n     * @return The `DocumentReference` instance.\n     */\n    doc(documentPath: string): DocumentReference<DocumentData>;\n\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param collectionId Identifies the collections to query over. Every\n     * collection or subcollection with this ID as the last segment of its path\n     * will be included. Cannot contain a slash.\n     * @return The created Query.\n     */\n    collectionGroup(collectionId: string): Query<DocumentData>;\n\n    /**\n     * Executes the given `updateFunction` and then attempts to commit the changes\n     * applied within the transaction. If any document read within the transaction\n     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n     * commit after 5 attempts, the transaction fails.\n     *\n     * The maximum number of writes allowed in a single transaction is 500, but\n     * note that each usage of `FieldValue.serverTimestamp()`,\n     * `FieldValue.arrayUnion()`, `FieldValue.arrayRemove()`, or\n     * `FieldValue.increment()` inside a transaction counts as an additional write.\n     *\n     * @param updateFunction\n     *   The function to execute within the transaction context.\n     *\n     * @return\n     *   If the transaction completed successfully or was explicitly aborted\n     *   (the `updateFunction` returned a failed promise),\n     *   the promise returned by the updateFunction is returned here. Else, if the\n     *   transaction failed, a rejected promise with the corresponding failure\n     *   error will be returned.\n     */\n    runTransaction<T>(\n      updateFunction: (transaction: Transaction) => Promise<T>,\n    ): Promise<T>;\n\n    /**\n     * Creates a write batch, used for performing multiple writes as a single\n     * atomic operation. The maximum number of writes allowed in a single WriteBatch\n     * is 500, but note that each usage of `FieldValue.serverTimestamp()`,\n     * `FieldValue.arrayUnion()`, `FieldValue.arrayRemove()`, or\n     * `FieldValue.increment()` inside a WriteBatch counts as an additional write.\n     *\n     * @return\n     *   A `WriteBatch` that can be used to atomically execute multiple writes.\n     */\n    batch(): WriteBatch;\n\n    /**\n     * The {@link firebase.app.App app} associated with this `Firestore` service\n     * instance.\n     */\n    app: firebase.app.App;\n\n    /**\n     * Clears the persistent storage. This includes pending writes and cached\n     * documents.\n     *\n     * Must be called while the firestore instance is not started (after the app\n     * is shutdown or when the app is first initialized). On startup, this\n     * method must be called before other methods (other than settings()). If\n     * the firestore instance is still running, the promise will be rejected\n     * with the error code of `failed-precondition`.\n     *\n     * Note: clearPersistence() is primarily intended to help write reliable\n     * tests that use Cloud Firestore. It uses an efficient mechanism for\n     * dropping existing data but does not attempt to securely overwrite or\n     * otherwise make cached data unrecoverable. For applications that are\n     * sensitive to the disclosure of cached data in between user sessions, we\n     * strongly recommend not enabling persistence at all.\n     *\n     * @return A promise that is resolved when the persistent storage is\n     * cleared. Otherwise, the promise is rejected with an error.\n     */\n    clearPersistence(): Promise<void>;\n\n    /**\n     * Re-enables use of the network for this Firestore instance after a prior\n     * call to {@link firebase.firestore.Firestore.disableNetwork\n     * `disableNetwork()`}.\n     *\n     * @return A promise that is resolved once the network has been\n     *   enabled.\n     */\n    enableNetwork(): Promise<void>;\n\n    /**\n     * Disables network usage for this instance. It can be re-enabled via\n     * {@link firebase.firestore.Firestore.enableNetwork `enableNetwork()`}. While\n     * the network is disabled, any snapshot listeners or get() calls will return\n     * results from cache, and any write operations will be queued until the network\n     * is restored.\n     *\n     * @return A promise that is resolved once the network has been\n     *   disabled.\n     */\n    disableNetwork(): Promise<void>;\n\n    /**\n     * Waits until all currently pending writes for the active user have been acknowledged by the\n     * backend.\n     *\n     * The returned Promise resolves immediately if there are no outstanding writes. Otherwise, the\n     * Promise waits for all previously issued writes (including those written in a previous app\n     * session), but it does not wait for writes that were added after the method is called. If you\n     * want to wait for additional writes, call `waitForPendingWrites()` again.\n     *\n     * Any outstanding `waitForPendingWrites()` Promises are rejected during user changes.\n     *\n     * @return A Promise which resolves when all currently pending writes have been\n     * acknowledged by the backend.\n     */\n    waitForPendingWrites(): Promise<void>;\n\n    /**\n     * Attaches a listener for a snapshots-in-sync event. The snapshots-in-sync\n     * event indicates that all listeners affected by a given change have fired,\n     * even if a single server-generated change affects multiple listeners.\n     *\n     * NOTE: The snapshots-in-sync event only indicates that listeners are in sync\n     * with each other, but does not relate to whether those snapshots are in sync\n     * with the server. Use SnapshotMetadata in the individual listeners to\n     * determine if a snapshot is from the cache or the server.\n     *\n     * @param observer A single object containing `next` and `error` callbacks.\n     * @return An unsubscribe function that can be called to cancel the snapshot\n     * listener.\n     */\n    onSnapshotsInSync(observer: {\n      next?: (value: void) => void;\n      error?: (error: FirestoreError) => void;\n      complete?: () => void;\n    }): () => void;\n\n    /**\n     * Attaches a listener for a snapshots-in-sync event. The snapshots-in-sync\n     * event indicates that all listeners affected by a given change have fired,\n     * even if a single server-generated change affects multiple listeners.\n     *\n     * NOTE: The snapshots-in-sync event only indicates that listeners are in sync\n     * with each other, but does not relate to whether those snapshots are in sync\n     * with the server. Use SnapshotMetadata in the individual listeners to\n     * determine if a snapshot is from the cache or the server.\n     *\n     * @param onSync A callback to be called every time all snapshot listeners are\n     * in sync with each other.\n     * @return An unsubscribe function that can be called to cancel the snapshot\n     * listener.\n     */\n    onSnapshotsInSync(onSync: () => void): () => void;\n\n    /**\n     * Terminates this Firestore instance.\n     *\n     * After calling `terminate()` only the `clearPersistence()` method may be used. Any other method\n     * will throw a `FirestoreError`.\n     *\n     * To restart after termination, create a new instance of FirebaseFirestore with\n     * `firebase.firestore()`.\n     *\n     * Termination does not cancel any pending writes, and any promises that are awaiting a response\n     * from the server will not be resolved. If you have persistence enabled, the next time you\n     * start this instance, it will resume sending these writes to the server.\n     *\n     * Note: Under normal circumstances, calling `terminate()` is not required. This\n     * method is useful only when you want to force this instance to release all of its resources or\n     * in combination with `clearPersistence()` to ensure that all local state is destroyed\n     * between test runs.\n     *\n     * @return A promise that is resolved when the instance has been successfully terminated.\n     */\n    terminate(): Promise<void>;\n\n    /**\n     * Loads a Firestore bundle into the local cache.\n     *\n     * @param bundleData\n     *   An object representing the bundle to be loaded. Valid objects are `ArrayBuffer`,\n     *   `ReadableStream<Uint8Array>` or `string`.\n     *\n     * @return\n     *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion\n     *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.\n     */\n    loadBundle(\n      bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string,\n    ): LoadBundleTask;\n\n    /**\n     * Reads a Firestore `Query` from local cache, identified by the given name.\n     *\n     * The named queries are packaged  into bundles on the server side (along\n     * with resulting documents), and loaded to local cache using `loadBundle`. Once in local\n     * cache, use this method to extract a `Query` by name.\n     */\n    namedQuery(name: string): Promise<Query<DocumentData> | null>;\n\n    /**\n     * @hidden\n     */\n    INTERNAL: { delete: () => Promise<void> };\n  }\n\n  /**\n   * Represents the task of loading a Firestore bundle. It provides progress of bundle\n   * loading, as well as task completion and error events.\n   *\n   * The API is compatible with `Promise<LoadBundleTaskProgress>`.\n   */\n  export interface LoadBundleTask extends PromiseLike<LoadBundleTaskProgress> {\n    /**\n     * Registers functions to listen to bundle loading progress events.\n     * @param next\n     *   Called when there is a progress update from bundle loading. Typically `next` calls occur\n     *   each time a Firestore document is loaded from the bundle.\n     * @param error\n     *   Called when an error occurs during bundle loading. The task aborts after reporting the\n     *   error, and there should be no more updates after this.\n     * @param complete\n     *   Called when the loading task is complete.\n     */\n    onProgress(\n      next?: (progress: LoadBundleTaskProgress) => any,\n      error?: (error: Error) => any,\n      complete?: () => void,\n    ): void;\n\n    /**\n     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.\n     *\n     * @param onFulfilled\n     *   Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.\n     *   The update will always have its `taskState` set to `\"Success\"`.\n     * @param onRejected\n     *   Called when an error occurs during bundle loading.\n     */\n    then<T, R>(\n      onFulfilled?: (a: LoadBundleTaskProgress) => T | PromiseLike<T>,\n      onRejected?: (a: Error) => R | PromiseLike<R>,\n    ): Promise<T | R>;\n\n    /**\n     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.\n     *\n     * @param onRejected\n     *   Called when an error occurs during bundle loading.\n     */\n    catch<R>(\n      onRejected: (a: Error) => R | PromiseLike<R>,\n    ): Promise<R | LoadBundleTaskProgress>;\n  }\n\n  /**\n   * Represents a progress update or a final state from loading bundles.\n   */\n  export interface LoadBundleTaskProgress {\n    /** How many documents have been loaded. */\n    documentsLoaded: number;\n    /** How many documents are in the bundle being loaded. */\n    totalDocuments: number;\n    /** How many bytes have been loaded. */\n    bytesLoaded: number;\n    /** How many bytes are in the bundle being loaded. */\n    totalBytes: number;\n    /** Current task state. */\n    taskState: TaskState;\n  }\n\n  /**\n   * Represents the state of bundle loading tasks.\n   *\n   * Both 'Error' and 'Success' are sinking state: task will abort or complete and there will\n   * be no more updates after they are reported.\n   */\n  export type TaskState = \"Error\" | \"Running\" | \"Success\";\n\n  /**\n   * An immutable object representing a geo point in Firestore. The geo point\n   * is represented as latitude/longitude pair.\n   *\n   * Latitude values are in the range of [-90, 90].\n   * Longitude values are in the range of [-180, 180].\n   */\n  export class GeoPoint {\n    /**\n     * Creates a new immutable GeoPoint object with the provided latitude and\n     * longitude values.\n     * @param latitude The latitude as number between -90 and 90.\n     * @param longitude The longitude as number between -180 and 180.\n     */\n    constructor(latitude: number, longitude: number);\n\n    /**\n     * The latitude of this GeoPoint instance.\n     */\n    readonly latitude: number;\n    /**\n     * The longitude of this GeoPoint instance.\n     */\n    readonly longitude: number;\n\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other The `GeoPoint` to compare against.\n     * @return true if this `GeoPoint` is equal to the provided one.\n     */\n    isEqual(other: GeoPoint): boolean;\n  }\n\n  /**\n   * A Timestamp represents a point in time independent of any time zone or\n   * calendar, represented as seconds and fractions of seconds at nanosecond\n   * resolution in UTC Epoch time.\n   *\n   * It is encoded using the Proleptic Gregorian\n   * Calendar which extends the Gregorian calendar backwards to year one. It is\n   * encoded assuming all minutes are 60 seconds long, i.e. leap seconds are\n   * \"smeared\" so that no leap second table is needed for interpretation. Range is\n   * from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\n   *\n   * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto\n   */\n  export class Timestamp {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(seconds: number, nanoseconds: number);\n\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @return a new timestamp representing the current date.\n     */\n    static now(): Timestamp;\n\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date The date to initialize the `Timestamp` from.\n     * @return A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */\n    static fromDate(date: Date): Timestamp;\n\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @return A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */\n    static fromMillis(milliseconds: number): Timestamp;\n\n    readonly seconds: number;\n    readonly nanoseconds: number;\n\n    /**\n     * Convert a Timestamp to a JavaScript `Date` object. This conversion causes\n     * a loss of precision since `Date` objects only support millisecond precision.\n     *\n     * @return JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */\n    toDate(): Date;\n\n    /**\n     * Convert a timestamp to a numeric timestamp (in milliseconds since epoch).\n     * This operation causes a loss of precision.\n     *\n     * @return The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    toMillis(): number;\n\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other The `Timestamp` to compare against.\n     * @return true if this `Timestamp` is equal to the provided one.\n     */\n    isEqual(other: Timestamp): boolean;\n\n    /**\n     * Converts this object to a primitive string, which allows Timestamp objects to be compared\n     * using the `>`, `<=`, `>=` and `>` operators.\n     */\n    valueOf(): string;\n  }\n\n  /**\n   * An immutable object representing an array of bytes.\n   */\n  export class Blob {\n    private constructor();\n\n    /**\n     * Creates a new Blob from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64\n     *   The Base64 string used to create the Blob object.\n     */\n    static fromBase64String(base64: string): Blob;\n\n    /**\n     * Creates a new Blob from the given Uint8Array.\n     *\n     * @param array\n     *   The Uint8Array used to create the Blob object.\n     */\n    static fromUint8Array(array: Uint8Array): Blob;\n\n    /**\n     * Returns the bytes of a Blob as a Base64-encoded string.\n     *\n     * @return\n     *   The Base64-encoded string created from the Blob object.\n     */\n    public toBase64(): string;\n\n    /**\n     * Returns the bytes of a Blob in a new Uint8Array.\n     *\n     * @return\n     *   The Uint8Array created from the Blob object.\n     */\n    public toUint8Array(): Uint8Array;\n\n    /**\n     * Returns true if this `Blob` is equal to the provided one.\n     *\n     * @param other The `Blob` to compare against.\n     * @return true if this `Blob` is equal to the provided one.\n     */\n    isEqual(other: Blob): boolean;\n  }\n\n  /**\n   * A reference to a transaction.\n   * The `Transaction` object passed to a transaction's updateFunction provides\n   * the methods to read and write data within the transaction context. See\n   * `Firestore.runTransaction()`.\n   */\n  export class Transaction {\n    private constructor();\n\n    /**\n     * Reads the document referenced by the provided `DocumentReference.`\n     *\n     * @param documentRef A reference to the document to be read.\n     * @return A DocumentSnapshot for the read data.\n     */\n    get<T>(documentRef: DocumentReference<T>): Promise<DocumentSnapshot<T>>;\n\n    /**\n     * Writes to the document referred to by the provided `DocumentReference`.\n     * If the document does not exist yet, it will be created. If you pass\n     * `SetOptions`, the provided data can be merged into the existing document.\n     *\n     * @param documentRef A reference to the document to be set.\n     * @param data An object of the fields and values for the document.\n     * @param options An object to configure the set behavior.\n     * @return This `Transaction` instance. Used for chaining method calls.\n     */\n    set<T>(\n      documentRef: DocumentReference<T>,\n      data: Partial<T>,\n      options: SetOptions,\n    ): Transaction;\n\n    /**\n     * Writes to the document referred to by the provided `DocumentReference`.\n     * If the document does not exist yet, it will be created. If you pass\n     * `SetOptions`, the provided data can be merged into the existing document.\n     *\n     * @param documentRef A reference to the document to be set.\n     * @param data An object of the fields and values for the document.\n     * @return This `Transaction` instance. Used for chaining method calls.\n     */\n    set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n\n    /**\n     * Updates fields in the document referred to by the provided\n     * `DocumentReference`. The update will fail if applied to a document that\n     * does not exist.\n     *\n     * @param documentRef A reference to the document to be updated.\n     * @param data An object containing the fields and values with which to\n     * update the document. Fields can contain dots to reference nested fields\n     * within the document.\n     * @return This `Transaction` instance. Used for chaining method calls.\n     */\n    update(documentRef: DocumentReference<any>, data: UpdateData): Transaction;\n\n    /**\n     * Updates fields in the document referred to by the provided\n     * `DocumentReference`. The update will fail if applied to a document that\n     * does not exist.\n     *\n     * Nested fields can be updated by providing dot-separated field path\n     * strings or by providing FieldPath objects.\n     *\n     * @param documentRef A reference to the document to be updated.\n     * @param field The first field to update.\n     * @param value The first value.\n     * @param moreFieldsAndValues Additional key/value pairs.\n     * @return A Promise resolved once the data has been successfully written\n     * to the backend (Note that it won't resolve while you're offline).\n     */\n    update(\n      documentRef: DocumentReference<any>,\n      field: string | FieldPath,\n      value: any,\n      ...moreFieldsAndValues: any[]\n    ): Transaction;\n\n    /**\n     * Deletes the document referred to by the provided `DocumentReference`.\n     *\n     * @param documentRef A reference to the document to be deleted.\n     * @return This `Transaction` instance. Used for chaining method calls.\n     */\n    delete(documentRef: DocumentReference<any>): Transaction;\n  }\n\n  /**\n   * A write batch, used to perform multiple writes as a single atomic unit.\n   *\n   * A `WriteBatch` object can be acquired by calling `Firestore.batch()`. It\n   * provides methods for adding writes to the write batch. None of the\n   * writes will be committed (or visible locally) until `WriteBatch.commit()`\n   * is called.\n   *\n   * Unlike transactions, write batches are persisted offline and therefore are\n   * preferable when you don't need to condition your writes on read data.\n   */\n  export class WriteBatch {\n    private constructor();\n\n    /**\n     * Writes to the document referred to by the provided `DocumentReference`.\n     * If the document does not exist yet, it will be created. If you pass\n     * `SetOptions`, the provided data can be merged into the existing document.\n     *\n     * @param documentRef A reference to the document to be set.\n     * @param data An object of the fields and values for the document.\n     * @param options An object to configure the set behavior.\n     * @return This `WriteBatch` instance. Used for chaining method calls.\n     */\n    set<T>(\n      documentRef: DocumentReference<T>,\n      data: Partial<T>,\n      options: SetOptions,\n    ): WriteBatch;\n\n    /**\n     * Writes to the document referred to by the provided `DocumentReference`.\n     * If the document does not exist yet, it will be created. If you pass\n     * `SetOptions`, the provided data can be merged into the existing document.\n     *\n     * @param documentRef A reference to the document to be set.\n     * @param data An object of the fields and values for the document.\n     * @return This `WriteBatch` instance. Used for chaining method calls.\n     */\n    set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n\n    /**\n     * Updates fields in the document referred to by the provided\n     * `DocumentReference`. The update will fail if applied to a document that\n     * does not exist.\n     *\n     * @param documentRef A reference to the document to be updated.\n     * @param data An object containing the fields and values with which to\n     * update the document. Fields can contain dots to reference nested fields\n     * within the document.\n     * @return This `WriteBatch` instance. Used for chaining method calls.\n     */\n    update(documentRef: DocumentReference<any>, data: UpdateData): WriteBatch;\n\n    /**\n     * Updates fields in the document referred to by this `DocumentReference`.\n     * The update will fail if applied to a document that does not exist.\n     *\n     * Nested fields can be update by providing dot-separated field path strings\n     * or by providing FieldPath objects.\n     *\n     * @param documentRef A reference to the document to be updated.\n     * @param field The first field to update.\n     * @param value The first value.\n     * @param moreFieldsAndValues Additional key value pairs.\n     * @return A Promise resolved once the data has been successfully written\n     * to the backend (Note that it won't resolve while you're offline).\n     */\n    update(\n      documentRef: DocumentReference<any>,\n      field: string | FieldPath,\n      value: any,\n      ...moreFieldsAndValues: any[]\n    ): WriteBatch;\n\n    /**\n     * Deletes the document referred to by the provided `DocumentReference`.\n     *\n     * @param documentRef A reference to the document to be deleted.\n     * @return This `WriteBatch` instance. Used for chaining method calls.\n     */\n    delete(documentRef: DocumentReference<any>): WriteBatch;\n\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * @return A Promise resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit. Note that it won't\n     * resolve while you're offline.\n     */\n    commit(): Promise<void>;\n  }\n\n  /**\n   * An options object that can be passed to `DocumentReference.onSnapshot()`,\n   * `Query.onSnapshot()` and `QuerySnapshot.docChanges()` to control which\n   * types of changes to include in the result set.\n   */\n  export interface SnapshotListenOptions {\n    /**\n     * Include a change even if only the metadata of the query or of a document\n     * changed. Default is false.\n     */\n    readonly includeMetadataChanges?: boolean;\n  }\n\n  /**\n   * An options object that configures the behavior of `set()` calls in\n   * {@link firebase.firestore.DocumentReference.set DocumentReference}, {@link\n   * firebase.firestore.WriteBatch.set WriteBatch} and {@link\n   * firebase.firestore.Transaction.set Transaction}. These calls can be\n   * configured to perform granular merges instead of overwriting the target\n   * documents in their entirety by providing a `SetOptions` with `merge: true`.\n   */\n  export interface SetOptions {\n    /**\n     * Changes the behavior of a set() call to only replace the values specified\n     * in its data argument. Fields omitted from the set() call remain\n     * untouched.\n     */\n    readonly merge?: boolean;\n\n    /**\n     * Changes the behavior of set() calls to only replace the specified field\n     * paths. Any field path that is not specified is ignored and remains\n     * untouched.\n     */\n    readonly mergeFields?: (string | FieldPath)[];\n  }\n\n  /**\n   * An options object that configures the behavior of `get()` calls on\n   * `DocumentReference` and `Query`. By providing a `GetOptions` object, these\n   * methods can be configured to fetch results only from the server, only from\n   * the local cache or attempt to fetch results from the server and fall back to\n   * the cache (which is the default).\n   */\n  export interface GetOptions {\n    /**\n     * Describes whether we should get from server or cache.\n     *\n     * Setting to `default` (or not setting at all), causes Firestore to try to\n     * retrieve an up-to-date (server-retrieved) snapshot, but fall back to\n     * returning cached data if the server can't be reached.\n     *\n     * Setting to `server` causes Firestore to avoid the cache, generating an\n     * error if the server cannot be reached. Note that the cache will still be\n     * updated if the server request succeeds. Also note that latency-compensation\n     * still takes effect, so any pending write operations will be visible in the\n     * returned data (merged into the server-provided data).\n     *\n     * Setting to `cache` causes Firestore to immediately return a value from the\n     * cache, ignoring the server completely (implying that the returned value\n     * may be stale with respect to the value on the server.) If there is no data\n     * in the cache to satisfy the `get()` call, `DocumentReference.get()` will\n     * return an error and `QuerySnapshot.get()` will return an empty\n     * `QuerySnapshot` with no documents.\n     */\n    readonly source?: \"default\" | \"server\" | \"cache\";\n  }\n\n  /**\n   * A `DocumentReference` refers to a document location in a Firestore database\n   * and can be used to write, read, or listen to the location. The document at\n   * the referenced location may or may not exist. A `DocumentReference` can\n   * also be used to create a `CollectionReference` to a subcollection.\n   */\n  export class DocumentReference<T = DocumentData> {\n    private constructor();\n\n    /**\n     * The document's identifier within its collection.\n     */\n    readonly id: string;\n\n    /**\n     * The {@link firebase.firestore.Firestore} the document is in.\n     * This is useful for performing transactions, for example.\n     */\n    readonly firestore: Firestore;\n\n    /**\n     * The Collection this `DocumentReference` belongs to.\n     */\n    readonly parent: CollectionReference<T>;\n\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */\n    readonly path: string;\n\n    /**\n     * Gets a `CollectionReference` instance that refers to the collection at\n     * the specified path.\n     *\n     * @param collectionPath A slash-separated path to a collection.\n     * @return The `CollectionReference` instance.\n     */\n    collection(collectionPath: string): CollectionReference<DocumentData>;\n\n    /**\n     * Returns true if this `DocumentReference` is equal to the provided one.\n     *\n     * @param other The `DocumentReference` to compare against.\n     * @return true if this `DocumentReference` is equal to the provided one.\n     */\n    isEqual(other: DocumentReference<T>): boolean;\n\n    /**\n     * Writes to the document referred to by this `DocumentReference`. If the\n     * document does not yet exist, it will be created. If you pass\n     * `SetOptions`, the provided data can be merged into an existing document.\n     *\n     * @param data A map of the fields and values for the document.\n     * @param options An object to configure the set behavior.\n     * @return A Promise resolved once the data has been successfully written\n     * to the backend (Note that it won't resolve while you're offline).\n     */\n    set(data: Partial<T>, options: SetOptions): Promise<void>;\n\n    /**\n     * Writes to the document referred to by this `DocumentReference`. If the\n     * document does not yet exist, it will be created. If you pass\n     * `SetOptions`, the provided data can be merged into an existing document.\n     *\n     * @param data A map of the fields and values for the document.\n     * @return A Promise resolved once the data has been successfully written\n     * to the backend (Note that it won't resolve while you're offline).\n     */\n    set(data: T): Promise<void>;\n\n    /**\n     * Updates fields in the document referred to by this `DocumentReference`.\n     * The update will fail if applied to a document that does not exist.\n     *\n     * @param data An object containing the fields and values with which to\n     * update the document. Fields can contain dots to reference nested fields\n     * within the document.\n     * @return A Promise resolved once the data has been successfully written\n     * to the backend (Note that it won't resolve while you're offline).\n     */\n    update(data: UpdateData): Promise<void>;\n\n    /**\n     * Updates fields in the document referred to by this `DocumentReference`.\n     * The update will fail if applied to a document that does not exist.\n     *\n     * Nested fields can be updated by providing dot-separated field path\n     * strings or by providing FieldPath objects.\n     *\n     * @param field The first field to update.\n     * @param value The first value.\n     * @param moreFieldsAndValues Additional key value pairs.\n     * @return A Promise resolved once the data has been successfully written\n     * to the backend (Note that it won't resolve while you're offline).\n     */\n    update(\n      field: string | FieldPath,\n      value: any,\n      ...moreFieldsAndValues: any[]\n    ): Promise<void>;\n\n    /**\n     * Deletes the document referred to by this `DocumentReference`.\n     *\n     * @return A Promise resolved once the document has been successfully\n     * deleted from the backend (Note that it won't resolve while you're\n     * offline).\n     */\n    delete(): Promise<void>;\n\n    /**\n     * Reads the document referred to by this `DocumentReference`.\n     *\n     * Note: By default, get() attempts to provide up-to-date data when possible\n     * by waiting for data from the server, but it may return cached data or fail\n     * if you are offline and the server cannot be reached. This behavior can be\n     * altered via the `GetOptions` parameter.\n     *\n     * @param options An object to configure the get behavior.\n     * @return A Promise resolved with a DocumentSnapshot containing the\n     * current document contents.\n     */\n    get(options?: GetOptions): Promise<DocumentSnapshot<T>>;\n\n    /**\n     * Attaches a listener for DocumentSnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param observer A single object containing `next` and `error` callbacks.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(observer: {\n      next?: (snapshot: DocumentSnapshot<T>) => void;\n      error?: (error: FirestoreError) => void;\n      complete?: () => void;\n    }): () => void;\n    /**\n     * Attaches a listener for DocumentSnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param options Options controlling the listen behavior.\n     * @param observer A single object containing `next` and `error` callbacks.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(\n      options: SnapshotListenOptions,\n      observer: {\n        next?: (snapshot: DocumentSnapshot<T>) => void;\n        error?: (error: FirestoreError) => void;\n        complete?: () => void;\n      },\n    ): () => void;\n    /**\n     * Attaches a listener for DocumentSnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param onNext A callback to be called every time a new `DocumentSnapshot`\n     * is available.\n     * @param onError A callback to be called if the listen fails or is\n     * cancelled. No further callbacks will occur.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(\n      onNext: (snapshot: DocumentSnapshot<T>) => void,\n      onError?: (error: FirestoreError) => void,\n      onCompletion?: () => void,\n    ): () => void;\n    /**\n     * Attaches a listener for DocumentSnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param options Options controlling the listen behavior.\n     * @param onNext A callback to be called every time a new `DocumentSnapshot`\n     * is available.\n     * @param onError A callback to be called if the listen fails or is\n     * cancelled. No further callbacks will occur.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(\n      options: SnapshotListenOptions,\n      onNext: (snapshot: DocumentSnapshot<T>) => void,\n      onError?: (error: FirestoreError) => void,\n      onCompletion?: () => void,\n    ): () => void;\n\n    /**\n     * Applies a custom data converter to this DocumentReference, allowing you\n     * to use your own custom model objects with Firestore. When you call\n     * set(), get(), etc. on the returned DocumentReference instance, the\n     * provided converter will convert between Firestore data and your custom\n     * type U.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @param converter Converts objects to and from Firestore. Passing in\n     * `null` removes the current converter.\n     * @return A DocumentReference<U> that uses the provided converter.\n     */\n    withConverter(converter: null): DocumentReference<DocumentData>;\n    /**\n     * Applies a custom data converter to this DocumentReference, allowing you\n     * to use your own custom model objects with Firestore. When you call\n     * set(), get(), etc. on the returned DocumentReference instance, the\n     * provided converter will convert between Firestore data and your custom\n     * type U.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @param converter Converts objects to and from Firestore. Passing in\n     * `null` removes the current converter.\n     * @return A DocumentReference<U> that uses the provided converter.\n     */\n    withConverter<U>(\n      converter: FirestoreDataConverter<U>,\n    ): DocumentReference<U>;\n  }\n\n  /**\n   * Options that configure how data is retrieved from a `DocumentSnapshot`\n   * (e.g. the desired behavior for server timestamps that have not yet been set\n   * to their final value).\n   */\n  export interface SnapshotOptions {\n    /**\n     * If set, controls the return value for server timestamps that have not yet\n     * been set to their final value.\n     *\n     * By specifying 'estimate', pending server timestamps return an estimate\n     * based on the local clock. This estimate will differ from the final value\n     * and cause these values to change once the server result becomes available.\n     *\n     * By specifying 'previous', pending timestamps will be ignored and return\n     * their previous value instead.\n     *\n     * If omitted or set to 'none', `null` will be returned by default until the\n     * server value becomes available.\n     */\n    readonly serverTimestamps?: \"estimate\" | \"previous\" | \"none\";\n  }\n\n  /**\n   * Metadata about a snapshot, describing the state of the snapshot.\n   */\n  export interface SnapshotMetadata {\n    /**\n     * True if the snapshot contains the result of local writes (e.g. set() or\n     * update() calls) that have not yet been committed to the backend.\n     * If your listener has opted into metadata updates (via\n     * `SnapshotListenOptions`) you will receive another\n     * snapshot with `hasPendingWrites` equal to false once the writes have been\n     * committed to the backend.\n     */\n    readonly hasPendingWrites: boolean;\n\n    /**\n     * True if the snapshot was created from cached data rather than guaranteed\n     * up-to-date server data. If your listener has opted into metadata updates\n     * (via `SnapshotListenOptions`)\n     * you will receive another snapshot with `fromCache` set to false once\n     * the client has received up-to-date data from the backend.\n     */\n    readonly fromCache: boolean;\n\n    /**\n     * Returns true if this `SnapshotMetadata` is equal to the provided one.\n     *\n     * @param other The `SnapshotMetadata` to compare against.\n     * @return true if this `SnapshotMetadata` is equal to the provided one.\n     */\n    isEqual(other: SnapshotMetadata): boolean;\n  }\n\n  /**\n   * A `DocumentSnapshot` contains data read from a document in your Firestore\n   * database. The data can be extracted with `.data()` or `.get(<field>)` to\n   * get a specific field.\n   *\n   * For a `DocumentSnapshot` that points to a non-existing document, any data\n   * access will return 'undefined'. You can use the `exists` property to\n   * explicitly verify a document's existence.\n   */\n  export class DocumentSnapshot<T = DocumentData> {\n    protected constructor();\n\n    /**\n     * Property of the `DocumentSnapshot` that signals whether or not the data\n     * exists. True if the document exists.\n     */\n    readonly exists: boolean;\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */\n    readonly ref: DocumentReference<T>;\n    /**\n     * Property of the `DocumentSnapshot` that provides the document's ID.\n     */\n    readonly id: string;\n    /**\n     *  Metadata about the `DocumentSnapshot`, including information about its\n     *  source and local modifications.\n     */\n    readonly metadata: SnapshotMetadata;\n\n    /**\n     * Retrieves all fields in the document as an Object. Returns 'undefined' if\n     * the document doesn't exist.\n     *\n     * By default, `FieldValue.serverTimestamp()` values that have not yet been\n     * set to their final value will be returned as `null`. You can override\n     * this by passing an options object.\n     *\n     * @param options An options object to configure how data is retrieved from\n     * the snapshot (e.g. the desired behavior for server timestamps that have\n     * not yet been set to their final value).\n     * @return An Object containing all fields in the document or 'undefined' if\n     * the document doesn't exist.\n     */\n    data(options?: SnapshotOptions): T | undefined;\n\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to\n     * its final value will be returned as `null`. You can override this by\n     * passing an options object.\n     *\n     * @param fieldPath The path (e.g. 'foo' or 'foo.bar') to a specific field.\n     * @param options An options object to configure how the field is retrieved\n     * from the snapshot (e.g. the desired behavior for server timestamps that have\n     * not yet been set to their final value).\n     * @return The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    get(fieldPath: string | FieldPath, options?: SnapshotOptions): any;\n\n    /**\n     * Returns true if this `DocumentSnapshot` is equal to the provided one.\n     *\n     * @param other The `DocumentSnapshot` to compare against.\n     * @return true if this `DocumentSnapshot` is equal to the provided one.\n     */\n    isEqual(other: DocumentSnapshot<T>): boolean;\n  }\n\n  /**\n   * A `QueryDocumentSnapshot` contains data read from a document in your\n   * Firestore database as part of a query. The document is guaranteed to exist\n   * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n   * specific field.\n   *\n   * A `QueryDocumentSnapshot` offers the same API surface as a\n   * `DocumentSnapshot`. Since query results contain only existing documents, the\n   * `exists` property will always be true and `data()` will never return\n   * 'undefined'.\n   */\n  export class QueryDocumentSnapshot<\n    T = DocumentData,\n  > extends DocumentSnapshot<T> {\n    private constructor();\n\n    /**\n     * Retrieves all fields in the document as an Object.\n     *\n     * By default, `FieldValue.serverTimestamp()` values that have not yet been\n     * set to their final value will be returned as `null`. You can override\n     * this by passing an options object.\n     *\n     * @override\n     * @param options An options object to configure how data is retrieved from\n     * the snapshot (e.g. the desired behavior for server timestamps that have\n     * not yet been set to their final value).\n     * @return An Object containing all fields in the document.\n     */\n    data(options?: SnapshotOptions): T;\n  }\n\n  /**\n   * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n   * (descending or ascending).\n   */\n  export type OrderByDirection = \"desc\" | \"asc\";\n\n  /**\n   * Filter conditions in a `Query.where()` clause are specified using the\n   * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in',\n   * 'array-contains-any', and 'not-in'.\n   */\n  export type WhereFilterOp =\n    | \"<\"\n    | \"<=\"\n    | \"==\"\n    | \"!=\"\n    | \">=\"\n    | \">\"\n    | \"array-contains\"\n    | \"in\"\n    | \"array-contains-any\"\n    | \"not-in\";\n\n  /**\n   * A `Query` refers to a Query which you can read or listen to. You can also\n   * construct refined `Query` objects by adding filters and ordering.\n   */\n  export class Query<T = DocumentData> {\n    protected constructor();\n\n    /**\n     * The `Firestore` for the Firestore database (useful for performing\n     * transactions, etc.).\n     */\n    readonly firestore: Firestore;\n\n    /**\n     * Creates and returns a new Query with the additional filter that documents\n     * must contain the specified field and the value should satisfy the\n     * relation constraint provided.\n     *\n     * @param fieldPath The path to compare\n     * @param opStr The operation string (e.g \"<\", \"<=\", \"==\", \">\", \">=\").\n     * @param value The value for comparison\n     * @return The created Query.\n     */\n    where(\n      fieldPath: string | FieldPath,\n      opStr: WhereFilterOp,\n      value: any,\n    ): Query<T>;\n\n    /**\n     * Creates and returns a new Query that's additionally sorted by the\n     * specified field, optionally in descending order instead of ascending.\n     *\n     * @param fieldPath The field to sort by.\n     * @param directionStr Optional direction to sort by (`asc` or `desc`). If\n     * not specified, order will be ascending.\n     * @return The created Query.\n     */\n    orderBy(\n      fieldPath: string | FieldPath,\n      directionStr?: OrderByDirection,\n    ): Query<T>;\n\n    /**\n     * Creates and returns a new Query that only returns the first matching\n     * documents.\n     *\n     * @param limit The maximum number of items to return.\n     * @return The created Query.\n     */\n    limit(limit: number): Query<T>;\n\n    /**\n     * Creates and returns a new Query that only returns the last matching\n     * documents.\n     *\n     * You must specify at least one `orderBy` clause for `limitToLast` queries,\n     * otherwise an exception will be thrown during execution.\n     *\n     * @param limit The maximum number of items to return.\n     * @return The created Query.\n     */\n    limitToLast(limit: number): Query<T>;\n\n    /**\n     * Creates and returns a new Query that starts at the provided document\n     * (inclusive). The starting position is relative to the order of the query.\n     * The document must contain all of the fields provided in the `orderBy` of\n     * this query.\n     *\n     * @param snapshot The snapshot of the document to start at.\n     * @return The created Query.\n     */\n    startAt(snapshot: DocumentSnapshot<any>): Query<T>;\n\n    /**\n     * Creates and returns a new Query that starts at the provided fields\n     * relative to the order of the query. The order of the field values\n     * must match the order of the order by clauses of the query.\n     *\n     * @param fieldValues The field values to start this query at, in order\n     * of the query's order by.\n     * @return The created Query.\n     */\n    startAt(...fieldValues: any[]): Query<T>;\n\n    /**\n     * Creates and returns a new Query that starts after the provided document\n     * (exclusive). The starting position is relative to the order of the query.\n     * The document must contain all of the fields provided in the orderBy of\n     * this query.\n     *\n     * @param snapshot The snapshot of the document to start after.\n     * @return The created Query.\n     */\n    startAfter(snapshot: DocumentSnapshot<any>): Query<T>;\n\n    /**\n     * Creates and returns a new Query that starts after the provided fields\n     * relative to the order of the query. The order of the field values\n     * must match the order of the order by clauses of the query.\n     *\n     * @param fieldValues The field values to start this query after, in order\n     * of the query's order by.\n     * @return The created Query.\n     */\n    startAfter(...fieldValues: any[]): Query<T>;\n\n    /**\n     * Creates and returns a new Query that ends before the provided document\n     * (exclusive). The end position is relative to the order of the query. The\n     * document must contain all of the fields provided in the orderBy of this\n     * query.\n     *\n     * @param snapshot The snapshot of the document to end before.\n     * @return The created Query.\n     */\n    endBefore(snapshot: DocumentSnapshot<any>): Query<T>;\n\n    /**\n     * Creates and returns a new Query that ends before the provided fields\n     * relative to the order of the query. The order of the field values\n     * must match the order of the order by clauses of the query.\n     *\n     * @param fieldValues The field values to end this query before, in order\n     * of the query's order by.\n     * @return The created Query.\n     */\n    endBefore(...fieldValues: any[]): Query<T>;\n\n    /**\n     * Creates and returns a new Query that ends at the provided document\n     * (inclusive). The end position is relative to the order of the query. The\n     * document must contain all of the fields provided in the orderBy of this\n     * query.\n     *\n     * @param snapshot The snapshot of the document to end at.\n     * @return The created Query.\n     */\n    endAt(snapshot: DocumentSnapshot<any>): Query<T>;\n\n    /**\n     * Creates and returns a new Query that ends at the provided fields\n     * relative to the order of the query. The order of the field values\n     * must match the order of the order by clauses of the query.\n     *\n     * @param fieldValues The field values to end this query at, in order\n     * of the query's order by.\n     * @return The created Query.\n     */\n    endAt(...fieldValues: any[]): Query<T>;\n\n    /**\n     * Returns true if this `Query` is equal to the provided one.\n     *\n     * @param other The `Query` to compare against.\n     * @return true if this `Query` is equal to the provided one.\n     */\n    isEqual(other: Query<T>): boolean;\n\n    /**\n     * Executes the query and returns the results as a `QuerySnapshot`.\n     *\n     * Note: By default, get() attempts to provide up-to-date data when possible\n     * by waiting for data from the server, but it may return cached data or fail\n     * if you are offline and the server cannot be reached. This behavior can be\n     * altered via the `GetOptions` parameter.\n     *\n     * @param options An object to configure the get behavior.\n     * @return A Promise that will be resolved with the results of the Query.\n     */\n    get(options?: GetOptions): Promise<QuerySnapshot<T>>;\n\n    /**\n     * Attaches a listener for QuerySnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks. The listener can be cancelled by\n     * calling the function that is returned when `onSnapshot` is called.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param observer A single object containing `next` and `error` callbacks.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(observer: {\n      next?: (snapshot: QuerySnapshot<T>) => void;\n      error?: (error: FirestoreError) => void;\n      complete?: () => void;\n    }): () => void;\n    /**\n     * Attaches a listener for QuerySnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks. The listener can be cancelled by\n     * calling the function that is returned when `onSnapshot` is called.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param options Options controlling the listen behavior.\n     * @param observer A single object containing `next` and `error` callbacks.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(\n      options: SnapshotListenOptions,\n      observer: {\n        next?: (snapshot: QuerySnapshot<T>) => void;\n        error?: (error: FirestoreError) => void;\n        complete?: () => void;\n      },\n    ): () => void;\n    /**\n     * Attaches a listener for QuerySnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks. The listener can be cancelled by\n     * calling the function that is returned when `onSnapshot` is called.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param onNext A callback to be called every time a new `QuerySnapshot`\n     * is available.\n     * @param onError A callback to be called if the listen fails or is\n     * cancelled. No further callbacks will occur.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(\n      onNext: (snapshot: QuerySnapshot<T>) => void,\n      onError?: (error: FirestoreError) => void,\n      onCompletion?: () => void,\n    ): () => void;\n    /**\n     * Attaches a listener for QuerySnapshot events. You may either pass\n     * individual `onNext` and `onError` callbacks or pass a single observer\n     * object with `next` and `error` callbacks. The listener can be cancelled by\n     * calling the function that is returned when `onSnapshot` is called.\n     *\n     * NOTE: Although an `onCompletion` callback can be provided, it will\n     * never be called because the snapshot stream is never-ending.\n     *\n     * @param options Options controlling the listen behavior.\n     * @param onNext A callback to be called every time a new `QuerySnapshot`\n     * is available.\n     * @param onError A callback to be called if the listen fails or is\n     * cancelled. No further callbacks will occur.\n     * @return An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     */\n    onSnapshot(\n      options: SnapshotListenOptions,\n      onNext: (snapshot: QuerySnapshot<T>) => void,\n      onError?: (error: FirestoreError) => void,\n      onCompletion?: () => void,\n    ): () => void;\n\n    /**\n     * Applies a custom data converter to this Query, allowing you to use your\n     * own custom model objects with Firestore. When you call get() on the\n     * returned Query, the provided converter will convert between Firestore\n     * data and your custom type U.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @param converter Converts objects to and from Firestore. Passing in\n     * `null` removes the current converter.\n     * @return A Query<U> that uses the provided converter.\n     */\n    withConverter(converter: null): Query<DocumentData>;\n    /**\n     * Applies a custom data converter to this Query, allowing you to use your\n     * own custom model objects with Firestore. When you call get() on the\n     * returned Query, the provided converter will convert between Firestore\n     * data and your custom type U.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @param converter Converts objects to and from Firestore. Passing in\n     * `null` removes the current converter.\n     * @return A Query<U> that uses the provided converter.\n     */\n    withConverter<U>(converter: FirestoreDataConverter<U>): Query<U>;\n  }\n\n  /**\n   * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n   * representing the results of a query. The documents can be accessed as an\n   * array via the `docs` property or enumerated using the `forEach` method. The\n   * number of documents can be determined via the `empty` and `size`\n   * properties.\n   */\n  export class QuerySnapshot<T = DocumentData> {\n    private constructor();\n\n    /**\n     * The query on which you called `get` or `onSnapshot` in order to get this\n     * `QuerySnapshot`.\n     */\n    readonly query: Query<T>;\n    /**\n     * Metadata about this snapshot, concerning its source and if it has local\n     * modifications.\n     */\n    readonly metadata: SnapshotMetadata;\n\n    /** An array of all the documents in the `QuerySnapshot`. */\n    readonly docs: Array<QueryDocumentSnapshot<T>>;\n\n    /** The number of documents in the `QuerySnapshot`. */\n    readonly size: number;\n\n    /** True if there are no documents in the `QuerySnapshot`. */\n    readonly empty: boolean;\n\n    /**\n     * Returns an array of the documents changes since the last snapshot. If this\n     * is the first snapshot, all documents will be in the list as added changes.\n     *\n     * @param options `SnapshotListenOptions` that control whether metadata-only\n     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger\n     * snapshot events.\n     */\n    docChanges(options?: SnapshotListenOptions): Array<DocumentChange<T>>;\n\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg The `this` binding for the callback.\n     */\n    forEach(\n      callback: (result: QueryDocumentSnapshot<T>) => void,\n      thisArg?: any,\n    ): void;\n\n    /**\n     * Returns true if this `QuerySnapshot` is equal to the provided one.\n     *\n     * @param other The `QuerySnapshot` to compare against.\n     * @return true if this `QuerySnapshot` is equal to the provided one.\n     */\n    isEqual(other: QuerySnapshot<T>): boolean;\n  }\n\n  /**\n   * The type of a `DocumentChange` may be 'added', 'removed', or 'modified'.\n   */\n  export type DocumentChangeType = \"added\" | \"removed\" | \"modified\";\n\n  /**\n   * A `DocumentChange` represents a change to the documents matching a query.\n   * It contains the document affected and the type of change that occurred.\n   */\n  export interface DocumentChange<T = DocumentData> {\n    /** The type of change ('added', 'modified', or 'removed'). */\n    readonly type: DocumentChangeType;\n\n    /** The document affected by this change. */\n    readonly doc: QueryDocumentSnapshot<T>;\n\n    /**\n     * The index of the changed document in the result set immediately prior to\n     * this `DocumentChange` (i.e. supposing that all prior `DocumentChange` objects\n     * have been applied). Is -1 for 'added' events.\n     */\n    readonly oldIndex: number;\n\n    /**\n     * The index of the changed document in the result set immediately after\n     * this `DocumentChange` (i.e. supposing that all prior `DocumentChange`\n     * objects and the current `DocumentChange` object have been applied).\n     * Is -1 for 'removed' events.\n     */\n    readonly newIndex: number;\n  }\n\n  /**\n   * A `CollectionReference` object can be used for adding documents, getting\n   * document references, and querying for documents (using the methods\n   * inherited from `Query`).\n   */\n  export class CollectionReference<T = DocumentData> extends Query<T> {\n    private constructor();\n\n    /** The collection's identifier. */\n    readonly id: string;\n\n    /**\n     * A reference to the containing `DocumentReference` if this is a subcollection.\n     * If this isn't a subcollection, the reference is null.\n     */\n    readonly parent: DocumentReference<DocumentData> | null;\n\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */\n    readonly path: string;\n\n    /**\n     * Get a `DocumentReference` for the document within the collection at the\n     * specified path. If no path is specified, an automatically-generated\n     * unique ID will be used for the returned DocumentReference.\n     *\n     * @param documentPath A slash-separated path to a document.\n     * @return The `DocumentReference` instance.\n     */\n    doc(documentPath?: string): DocumentReference<T>;\n\n    /**\n     * Add a new document to this collection with the specified data, assigning\n     * it a document ID automatically.\n     *\n     * @param data An Object containing the data for the new document.\n     * @return A Promise resolved with a `DocumentReference` pointing to the\n     * newly created document after it has been written to the backend.\n     */\n    add(data: T): Promise<DocumentReference<T>>;\n\n    /**\n     * Returns true if this `CollectionReference` is equal to the provided one.\n     *\n     * @param other The `CollectionReference` to compare against.\n     * @return true if this `CollectionReference` is equal to the provided one.\n     */\n    isEqual(other: CollectionReference<T>): boolean;\n\n    /**\n     * Applies a custom data converter to this CollectionReference, allowing you\n     * to use your own custom model objects with Firestore. When you call add()\n     * on the returned CollectionReference instance, the provided converter will\n     * convert between Firestore data and your custom type U.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @param converter Converts objects to and from Firestore. Passing in\n     * `null` removes the current converter.\n     * @return A CollectionReference<U> that uses the provided converter.\n     */\n    withConverter(converter: null): CollectionReference<DocumentData>;\n    /**\n     * Applies a custom data converter to this CollectionReference, allowing you\n     * to use your own custom model objects with Firestore. When you call add()\n     * on the returned CollectionReference instance, the provided converter will\n     * convert between Firestore data and your custom type U.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @param converter Converts objects to and from Firestore. Passing in\n     * `null` removes the current converter.\n     * @return A CollectionReference<U> that uses the provided converter.\n     */\n    withConverter<U>(\n      converter: FirestoreDataConverter<U>,\n    ): CollectionReference<U>;\n  }\n\n  /**\n   * Sentinel values that can be used when writing document fields with `set()`\n   * or `update()`.\n   */\n  export class FieldValue {\n    private constructor();\n\n    /**\n     * Returns a sentinel used with `set()` or `update()` to include a\n     * server-generated timestamp in the written data.\n     */\n    static serverTimestamp(): FieldValue;\n\n    /**\n     * Returns a sentinel for use with `update()` to mark a field for deletion.\n     */\n    static delete(): FieldValue;\n\n    /**\n     * Returns a special value that can be used with `set()` or `update()` that tells\n     * the server to union the given elements with any array value that already\n     * exists on the server. Each specified element that doesn't already exist in\n     * the array will be added to the end. If the field being modified is not\n     * already an array it will be overwritten with an array containing exactly\n     * the specified elements.\n     *\n     * @param elements The elements to union into the array.\n     * @return The FieldValue sentinel for use in a call to `set()` or `update()`.\n     */\n    static arrayUnion(...elements: any[]): FieldValue;\n\n    /**\n     * Returns a special value that can be used with `set()` or `update()` that tells\n     * the server to remove the given elements from any array value that already\n     * exists on the server. All instances of each element specified will be\n     * removed from the array. If the field being modified is not already an\n     * array it will be overwritten with an empty array.\n     *\n     * @param elements The elements to remove from the array.\n     * @return The FieldValue sentinel for use in a call to `set()` or `update()`.\n     */\n    static arrayRemove(...elements: any[]): FieldValue;\n\n    /**\n     * Returns a special value that can be used with `set()` or `update()` that tells\n     * the server to increment the field's current value by the given value.\n     *\n     * If either the operand or the current field value uses floating point precision,\n     * all arithmetic follows IEEE 754 semantics. If both values are integers,\n     * values outside of JavaScript's safe number range (`Number.MIN_SAFE_INTEGER` to\n     * `Number.MAX_SAFE_INTEGER`) are also subject to precision loss. Furthermore,\n     * once processed by the Firestore backend, all integer operations are capped\n     * between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type `number`, or if the field does not\n     * yet exist, the transformation sets the field to the given value.\n     *\n     * @param n The value to increment by.\n     * @return The FieldValue sentinel for use in a call to `set()` or `update()`.\n     */\n    static increment(n: number): FieldValue;\n\n    /**\n     * Returns true if this `FieldValue` is equal to the provided one.\n     *\n     * @param other The `FieldValue` to compare against.\n     * @return true if this `FieldValue` is equal to the provided one.\n     */\n    isEqual(other: FieldValue): boolean;\n  }\n\n  /**\n   * A FieldPath refers to a field in a document. The path may consist of a\n   * single field name (referring to a top-level field in the document), or a\n   * list of field names (referring to a nested field in the document).\n   *\n   * Create a FieldPath by providing field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   */\n  export class FieldPath {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    constructor(...fieldNames: string[]);\n\n    /**\n     * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n     * It can be used in queries to sort or filter by the document ID.\n     */\n    static documentId(): FieldPath;\n\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other The `FieldPath` to compare against.\n     * @return true if this `FieldPath` is equal to the provided one.\n     */\n    isEqual(other: FieldPath): boolean;\n  }\n\n  /**\n   * The set of Firestore status codes. The codes are the same at the ones\n   * exposed by gRPC here:\n   * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n   *\n   * Possible values:\n   * - 'cancelled': The operation was cancelled (typically by the caller).\n   * - 'unknown': Unknown error or an error from a different error domain.\n   * - 'invalid-argument': Client specified an invalid argument. Note that this\n   *   differs from 'failed-precondition'. 'invalid-argument' indicates\n   *   arguments that are problematic regardless of the state of the system\n   *   (e.g. an invalid field name).\n   * - 'deadline-exceeded': Deadline expired before operation could complete.\n   *   For operations that change the state of the system, this error may be\n   *   returned even if the operation has completed successfully. For example,\n   *   a successful response from a server could have been delayed long enough\n   *   for the deadline to expire.\n   * - 'not-found': Some requested document was not found.\n   * - 'already-exists': Some document that we attempted to create already\n   *   exists.\n   * - 'permission-denied': The caller does not have permission to execute the\n   *   specified operation.\n   * - 'resource-exhausted': Some resource has been exhausted, perhaps a\n   *   per-user quota, or perhaps the entire file system is out of space.\n   * - 'failed-precondition': Operation was rejected because the system is not\n   *   in a state required for the operation's execution.\n   * - 'aborted': The operation was aborted, typically due to a concurrency\n   *   issue like transaction aborts, etc.\n   * - 'out-of-range': Operation was attempted past the valid range.\n   * - 'unimplemented': Operation is not implemented or not supported/enabled.\n   * - 'internal': Internal errors. Means some invariants expected by\n   *   underlying system has been broken. If you see one of these errors,\n   *   something is very broken.\n   * - 'unavailable': The service is currently unavailable. This is most likely\n   *   a transient condition and may be corrected by retrying with a backoff.\n   * - 'data-loss': Unrecoverable data loss or corruption.\n   * - 'unauthenticated': The request does not have valid authentication\n   *   credentials for the operation.\n   */\n  export type FirestoreErrorCode =\n    | \"cancelled\"\n    | \"unknown\"\n    | \"invalid-argument\"\n    | \"deadline-exceeded\"\n    | \"not-found\"\n    | \"already-exists\"\n    | \"permission-denied\"\n    | \"resource-exhausted\"\n    | \"failed-precondition\"\n    | \"aborted\"\n    | \"out-of-range\"\n    | \"unimplemented\"\n    | \"internal\"\n    | \"unavailable\"\n    | \"data-loss\"\n    | \"unauthenticated\";\n\n  /** An error returned by a Firestore operation. */\n  // TODO(b/63008957): FirestoreError should extend firebase.FirebaseError\n  export interface FirestoreError {\n    code: FirestoreErrorCode;\n    message: string;\n    name: string;\n    stack?: string;\n  }\n\n  export type EmulatorMockTokenOptions = firebase.EmulatorMockTokenOptions;\n}\n\ndeclare var firebase: firebase;\n"
}