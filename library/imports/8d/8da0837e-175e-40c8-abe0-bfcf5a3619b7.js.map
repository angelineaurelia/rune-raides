{"version":3,"sources":["assets\\scripts\\ai\\LavaSlimeAI.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\nimport Player from \"../Player\";\r\n\r\nenum SlimeState {\r\n    Idle,\r\n    Walk,\r\n    Run,\r\n    Attack\r\n}\r\n\r\n@ccclass\r\nexport default class LavaSlimeAI extends cc.Component {\r\n    @property({ tooltip: \"Slime walk speed in pixels per second\" })\r\n    walkSpeed: number = 100;\r\n\r\n    @property({ tooltip: \"Slime run speed in pixels per second\" })\r\n    runSpeed: number = 200;\r\n\r\n    @property({ tooltip: \"How long the slime stays idle before walking (seconds)\" })\r\n    idleTime: number = 5;\r\n\r\n    @property({ tooltip: \"How long the slime walks in one direction (seconds)\" })\r\n    walkTime: number = 5;\r\n\r\n    @property({ tooltip: \"Patrol radius from start point (pixels)\" })\r\n    patrolRadius: number = 200;\r\n\r\n    @property({ tooltip: \"Detection circle radius (pixels)\" })\r\n    detectionRadius: number = 150;\r\n\r\n    @property({ tooltip: \"Attack circle radius (pixels)\" })\r\n    attackRadius: number = 50;\r\n\r\n    @property({ tooltip: \"Time to wait before performing attack (seconds)\" })\r\n    timeBeforeAttack: number = 1;\r\n\r\n    @property({ tooltip: \"Damage dealt by the attack\" })\r\n    attackDamage: number = 20;\r\n\r\n    @property({ tooltip: \"Maximum health of the slime\" })\r\n    maxHealth: number = 40;\r\n\r\n    @property({ tooltip: \"Current health of the slime\" })\r\n    health: number = 40;\r\n\r\n    @property(cc.Node)\r\n    private lifebar: cc.Node = null;\r\n\r\n    @property({ tooltip: \"Vertical offset of health bar above slime (pixels)\" })\r\n    private barOffsetY: number = 50;\r\n\r\n    public player: cc.Node = null;\r\n    private slimeState = SlimeState.Idle;\r\n    private timer = 0;\r\n    private direction = cc.v2(0, 0);\r\n    private patrolCenter = cc.v2(0, 0);\r\n\r\n    private boundaryNode!: cc.Node;\r\n    private detectionNode!: cc.Node;\r\n    private detectionGfx!: cc.Graphics;\r\n    private attackNode!: cc.Node;\r\n    private attackGfx!: cc.Graphics;\r\n\r\n    private anim!: cc.Animation;\r\n    private currentRunClip = \"\";\r\n    private currentAttackClip = \"\";\r\n\r\n    private isDead: boolean = false;\r\n    private isDeathAnimPlaying: boolean = false;\r\n\r\n    onLoad() {\r\n        cc.director.getCollisionManager().enabled = true;\r\n    }\r\n\r\n    start() {\r\n        this.player = cc.find(\"Canvas/MapManager/Actors/Player\") as cc.Node;\r\n        if (!this.player) cc.error(\"Player node not found\");\r\n\r\n        this.anim = this.getComponent(cc.Animation)!;\r\n        this.patrolCenter = this.node.getPosition().clone();\r\n\r\n        // Draw patrol boundary\r\n        this.boundaryNode = new cc.Node(\"PatrolBoundary\");\r\n        this.boundaryNode.parent = this.node.parent!;\r\n        this.boundaryNode.setPosition(this.patrolCenter);\r\n        const patrolGfx = this.boundaryNode.addComponent(cc.Graphics);\r\n        patrolGfx.lineWidth = 2;\r\n        patrolGfx.strokeColor = cc.color(0, 255, 0);\r\n        patrolGfx.circle(0, 0, this.patrolRadius);\r\n        patrolGfx.stroke();\r\n\r\n        // Detection area\r\n        this.detectionNode = new cc.Node(\"DetectionArea\");\r\n        this.detectionNode.parent = this.node;\r\n        this.detectionNode.setPosition(0, 0);\r\n        this.detectionGfx = this.detectionNode.addComponent(cc.Graphics);\r\n        this.detectionGfx.lineWidth = 2;\r\n\r\n        // Attack area\r\n        this.attackNode = new cc.Node(\"AttackArea\");\r\n        this.attackNode.parent = this.node;\r\n        this.attackNode.setPosition(0, 0);\r\n        this.attackGfx = this.attackNode.addComponent(cc.Graphics);\r\n        this.attackGfx.lineWidth = 2;\r\n\r\n        // Health bar setup\r\n        if (this.lifebar) {\r\n            //this.lifebar.setPosition(0, this.node.height / 2 + this.barOffsetY);\r\n            this.updateLife(0, this.health);\r\n        }\r\n\r\n        this.setToIdle();\r\n    }\r\n\r\n    update(dt: number) {\r\n        // If already marked dead, skip AI\r\n        if (this.isDead) return;\r\n        if (this.isDeathAnimPlaying) {\r\n            // Let death animation play; do nothing else until it's over\r\n            return;\r\n        }\r\n\r\n        // 1) compute distance to player\r\n        let distToPlayer = Infinity;\r\n        if (this.player) {\r\n            const slimeW  = this.node.parent!.convertToWorldSpaceAR(this.node.position);\r\n            const playerW = this.player.parent!.convertToWorldSpaceAR(this.player.position);\r\n            distToPlayer = slimeW.sub(playerW).mag();\r\n        }\r\n\r\n        // 2) check if player is still within patrol radius\r\n        const localPlayerPos = this.node.parent!\r\n            .convertToNodeSpaceAR(\r\n                this.player!.parent!.convertToWorldSpaceAR(this.player!.position)\r\n            );\r\n        const distFromCenter = localPlayerPos.sub(this.patrolCenter).mag();\r\n        const playerInPatrol = distFromCenter <= this.patrolRadius;\r\n\r\n        // 3) redraw detection circle\r\n        const drawDetectR = Math.min(this.detectionRadius, this.patrolRadius);\r\n        this.detectionGfx.clear();\r\n        this.detectionGfx.lineWidth   = 2;\r\n        this.detectionGfx.strokeColor = distToPlayer <= this.detectionRadius\r\n            ? cc.color(255, 165, 0)\r\n            : cc.color(255, 0, 0);\r\n        this.detectionGfx.circle(0, 0, drawDetectR);\r\n        this.detectionGfx.stroke();\r\n\r\n        // 4) redraw attack circle\r\n        const drawAttackR = Math.min(this.attackRadius, this.patrolRadius);\r\n        this.attackGfx.clear();\r\n        this.attackGfx.lineWidth   = 2;\r\n        this.attackGfx.strokeColor = distToPlayer <= this.attackRadius\r\n            ? cc.color(128, 0, 128)\r\n            : cc.color(0, 0, 255);\r\n        this.attackGfx.circle(0, 0, drawAttackR);\r\n        this.attackGfx.stroke();\r\n\r\n        // 5) AI state transitions\r\n        const inDetect = distToPlayer <= this.detectionRadius && playerInPatrol;\r\n        const inAttack = distToPlayer <= this.attackRadius && playerInPatrol;\r\n\r\n        // attack first\r\n        if (inAttack && this.slimeState !== SlimeState.Attack) {\r\n            this.startAttack();\r\n            return;\r\n        }\r\n        if (this.slimeState === SlimeState.Attack) {\r\n            this.timer += dt;\r\n            // Wait through wind-up + attack anim (wind-up = timeBeforeAttack, attackAnim assumed 1s)\r\n            if (this.timer >= this.timeBeforeAttack + 1) {\r\n                this.setToIdle();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // then run\r\n        if (inDetect) {\r\n            if (this.slimeState !== SlimeState.Run) this.startRunning();\r\n            this.runTowardsPlayer(dt);\r\n            return;\r\n        } else if (this.slimeState === SlimeState.Run) {\r\n            this.setToIdle();\r\n        }\r\n\r\n        // patrol (idle → walk → idle)\r\n        this.timer += dt;\r\n        if (this.slimeState === SlimeState.Idle && this.timer >= this.idleTime) {\r\n            this.startWalking();\r\n        }\r\n        if (this.slimeState === SlimeState.Walk) {\r\n            const pos = this.node.getPosition();\r\n            const delta = cc.v2(\r\n                this.direction.x * this.walkSpeed * dt,\r\n                this.direction.y * this.walkSpeed * dt\r\n            );\r\n            const next  = pos.add(delta);\r\n            if (next.sub(this.patrolCenter).mag() > this.patrolRadius) {\r\n                this.setToIdle();\r\n                return;\r\n            }\r\n            this.node.setPosition(next);\r\n            if (this.timer >= this.walkTime) {\r\n                this.setToIdle();\r\n            }\r\n        }\r\n    }\r\n\r\n    // —— Health‐bar updater ——\r\n    private updateLife(delta: number, hp: number) {\r\n        if (!this.lifebar) return;\r\n        this.lifebar.width = hp;\r\n        if (hp <= 10)       this.lifebar.color = cc.Color.RED;\r\n        else if (hp <= 20)  this.lifebar.color = cc.Color.ORANGE;\r\n        else                this.lifebar.color = cc.Color.GREEN;\r\n    }\r\n\r\n    public takeDamage(amount: number) {\r\n        if (this.health <= 0 || this.isDeathAnimPlaying) return;\r\n\r\n        // play hurt animation based on direction to player\r\n        const playerPos = this.player.getPosition();\r\n        const slimePos  = this.node.getPosition();\r\n        const dir       = playerPos.sub(slimePos).normalize();\r\n        const hurtAnim  = Math.abs(dir.x) > Math.abs(dir.y)\r\n            ? (dir.x > 0 ? \"LavaSlimeHurtRight\" : \"LavaSlimeHurtLeft\")\r\n            : (dir.y > 0 ? \"LavaSlimeHurtUp\" : \"LavaSlimeHurtDown\");\r\n        this.anim.play(hurtAnim);\r\n\r\n        this.health -= amount;\r\n        if (this.health < 0) this.health = 0;\r\n        this.updateLife(-amount, this.health);\r\n\r\n        if (this.health === 0) {\r\n            this.startDeathSequence(dir);\r\n        }\r\n    }\r\n\r\n    public heal(amount: number) {\r\n        if (this.health <= 0) return;\r\n        this.health += amount;\r\n        if (this.health > this.maxHealth) this.health = this.maxHealth;\r\n        this.updateLife(amount, this.health);\r\n    }\r\n\r\n    private startDeathSequence(direction: cc.Vec2) {\r\n        this.isDeathAnimPlaying = true;\r\n        this.slimeState = SlimeState.Idle; // freeze other AI\r\n        this.playDeathAnimation(direction);\r\n    }\r\n\r\n    private playDeathAnimation(direction: cc.Vec2) {\r\n        const deathAnim = Math.abs(direction.x) > Math.abs(direction.y)\r\n            ? (direction.x > 0 ? \"LavaSlimeDeathRight\" : \"LavaSlimeDeathLeft\")\r\n            : (direction.y > 0 ? \"LavaSlimeDeathUp\" : \"LavaSlimeDeathDown\");\r\n        this.anim.play(deathAnim);\r\n\r\n        this.unscheduleAllCallbacks();\r\n        // After the death animation finishes (assume 1s), mark as fully dead\r\n        this.scheduleOnce(() => {\r\n            this.isDead = true;\r\n            this.isDeathAnimPlaying = false;\r\n            // Do NOT destroy the node—just leave the dead pose in place\r\n        }, 1);\r\n    }\r\n\r\n    private setToIdle() {\r\n        this.slimeState = SlimeState.Idle;\r\n        this.timer = 0;\r\n        this.anim.play(\"LavaSlimeIdle\");\r\n    }\r\n\r\n    private startWalking() {\r\n        this.slimeState = SlimeState.Walk;\r\n        this.timer = 0;\r\n        this.direction = cc.v2(\r\n            Math.random() >= 0.5 ? 1 : -1,\r\n            Math.random() >= 0.5 ? 1 : -1\r\n        ).normalize();\r\n        const clip = Math.abs(this.direction.x) > Math.abs(this.direction.y)\r\n            ? (this.direction.x > 0 ? \"LavaSlimeWalkRight\" : \"LavaSlimeWalkLeft\")\r\n            : (this.direction.y > 0 ? \"LavaSlimeWalkUp\" : \"LavaSlimeWalkDown\");\r\n        this.anim.play(clip);\r\n    }\r\n\r\n    private startRunning() {\r\n        this.slimeState = SlimeState.Run;\r\n        this.currentRunClip = \"\";\r\n    }\r\n\r\n    private startAttack() {\r\n        this.slimeState = SlimeState.Attack;\r\n        this.timer = 0;\r\n        // Wind‐up: play idle (or a custom wind‐up anim)\r\n        this.anim.play(\"LavaSlimeIdle\");\r\n        this.scheduleOnce(() => this.performAttack(), this.timeBeforeAttack);\r\n    }\r\n\r\n    private performAttack() {\r\n        // Play attack clip based on direction to player\r\n        const dir = this.getRunDirection();\r\n        const clip = Math.abs(dir.x) > Math.abs(dir.y)\r\n            ? (dir.x > 0 ? \"LavaSlimeAttackRight\" : \"LavaSlimeAttackLeft\")\r\n            : (dir.y > 0 ? \"LavaSlimeAttackUp\" : \"LavaSlimeAttackDown\");\r\n        this.anim.play(clip);\r\n\r\n        // Apply damage if player still within radius\r\n        const playerComp = this.player.getComponent(Player);\r\n        if (playerComp) {\r\n            const slimeW   = this.node.parent!.convertToWorldSpaceAR(this.node.position);\r\n            const playerW  = this.player.parent!.convertToWorldSpaceAR(this.player.position);\r\n            const dist     = slimeW.sub(playerW).mag();\r\n            if (dist <= this.attackRadius) {\r\n                playerComp.takeDamage(this.attackDamage);\r\n            }\r\n        }\r\n\r\n        // After attack anim (~1s), go back to idle\r\n        this.scheduleOnce(() => this.setToIdle(), 1);\r\n    }\r\n\r\n    private runTowardsPlayer(dt: number) {\r\n        const dir = this.getRunDirection();\r\n        const clip = Math.abs(dir.x) > Math.abs(dir.y)\r\n            ? (dir.x > 0 ? \"LavaSlimeRunRight\" : \"LavaSlimeRunLeft\")\r\n            : (dir.y > 0 ? \"LavaSlimeRunUp\" : \"LavaSlimeRunDown\");\r\n        if (clip !== this.currentRunClip) {\r\n            this.anim.play(clip);\r\n            this.currentRunClip = clip;\r\n        }\r\n        const delta = cc.v2(dir.x * this.runSpeed * dt, dir.y * this.runSpeed * dt);\r\n        const next  = this.node.getPosition().add(delta);\r\n        if (next.sub(this.patrolCenter).mag() > this.patrolRadius) {\r\n            this.setToIdle();\r\n            return;\r\n        }\r\n        this.node.setPosition(next);\r\n    }\r\n\r\n    private getRunDirection(): cc.Vec2 {\r\n        const worldP = this.player!.parent!.convertToWorldSpaceAR(this.player.position);\r\n        const localP = this.node.parent!.convertToNodeSpaceAR(worldP);\r\n        return cc.v2(localP.x - this.node.x, localP.y - this.node.y).normalize();\r\n    }\r\n\r\n    onDisable() {\r\n        this.unscheduleAllCallbacks();\r\n    }\r\n}\r\n"]}